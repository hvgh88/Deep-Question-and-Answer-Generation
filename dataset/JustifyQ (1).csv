question,answer,context
Justify with an example how some computers have little or no user view,"Some computers have little or no user view .For example, embedded computers in home devices and automobiles may have numeric keypads and may turn indicator lights on or off to show status, but they and their operating systems are designed primarily to run without user intervention","Recently, many varieties of mobile computers, such as smartphones and tablets, have come into fashion. Most mobile computers are standalone units for individual users. Quite often, they are connected to networks through cellular or other wireless technologies. Increasingly, these mobile devices are replacing desktop and laptop computers for people who are primarily interested in using computers for e-mail and web browsing. The user interface for mobile computers generally features a touch screen, where the user interacts with the system by pressing and swiping ngers across the screen rather than using a physical keyboard and mouse. Some computers have little or no user view. For example, embedded computers in home devices and automobiles may have numeric keypads and may turn indicator lights on or off to show status, but they and their operating systems are designed primarily to run without user intervention. From the computers point of view, the operating system is the program most intimately involved with the hardware. In this context, we can view an operating system as a resource allocator. A computer system has many resources that may be required to solve a problem: CPU time, memory space, le-storage space, I/O devices, and so on. The operating system acts as the manager of these resources. Facing numerous and possibly conicting requests for resources, the operating system must decide how to allocate them to specic programs and users so that it can operate the computer system efciently and fairly. As we have seen, resource allocation is especially important where many users access the same mainframe or minicomputer"
"Justify with an example how in 1998, the United States Department of Justice led suit against Microsoft, in essence claiming that Microsoft included too much functionality in its operating systems and thus prevented application vendors from competing (","In 1998, the United States Department of Justice led suit against Microsoft, in essence claiming that Microsoft included too much functionality in its operating systems and thus prevented application vendors from competing (.For example, a Web browser was an integral part of the operating systems.) As a result, Microsoft was found guilty of using its operating-system monopoly to limit competition","The common functions of controlling and allocating resources are then brought together into one piece of software: the operating system. In addition, we have no universally accepted denition of what is part of the operating system. A simple viewpoint is that it includes everything a vendor ships when you order the operating system. The features included, however, vary greatly across systems. Some systems take up less than a megabyte of space and lack even a full-screen editor, whereas others require gigabytes of space and are based entirely on graphical windowing systems. A more common denition, and the one that we usually follow, is that the operating system is the one program running at all times on the computerusually called the kernel. (Along with the kernel, there are two other types of programs: system programs, which are associated with the operating system but are not necessarily part of the kernel, and application programs, which include all programs not associated with the operation of the system.) The matter of what constitutes an operating system became increasingly important as personal computers became more widespread and operating systems grew increasingly sophisticated. In 1998, the United States Department of Justice led suit against Microsoft, in essence claiming that Microsoft included too much functionality in its operating systems and thus prevented application vendors from competing. (For example, a Web browser was an integral part of the operating systems.) As a result, Microsoft was found guilty of using its operating-system monopoly to limit competition. Today, however, if we look at operating systems for mobile devices, we see that once again the number of features constituting the operating system is increasing. Mobile operating systems often include not only a core kernel but also middlewarea set of software frameworks that provide additional services to application developers. For example, each of the two most prominent mobile operating systemsApples iOS and Googles Android features a core kernel along with middleware that supports databases, multimedia, and graphics (to name a only few)"
Justify with an example how mobile operating systems often include not only a core kernel but also middlewarea set of software frameworks that provide additional services to application developers,"Mobile operating systems often include not only a core kernel but also middlewarea set of software frameworks that provide additional services to application developers .For example, each of the two most prominent mobile operating systemsApples iOS and Googles Android features a core kernel along with middleware that supports databases, multimedia, and graphics (to name a only few)","In addition, we have no universally accepted denition of what is part of the operating system. A simple viewpoint is that it includes everything a vendor ships when you order the operating system. The features included, however, vary greatly across systems. Some systems take up less than a megabyte of space and lack even a full-screen editor, whereas others require gigabytes of space and are based entirely on graphical windowing systems. A more common denition, and the one that we usually follow, is that the operating system is the one program running at all times on the computerusually called the kernel. (Along with the kernel, there are two other types of programs: system programs, which are associated with the operating system but are not necessarily part of the kernel, and application programs, which include all programs not associated with the operation of the system.) The matter of what constitutes an operating system became increasingly important as personal computers became more widespread and operating systems grew increasingly sophisticated. In 1998, the United States Department of Justice led suit against Microsoft, in essence claiming that Microsoft included too much functionality in its operating systems and thus prevented application vendors from competing. (For example, a Web browser was an integral part of the operating systems.) As a result, Microsoft was found guilty of using its operating-system monopoly to limit competition. Today, however, if we look at operating systems for mobile devices, we see that once again the number of features constituting the operating system is increasing. Mobile operating systems often include not only a core kernel but also middlewarea set of software frameworks that provide additional services to application developers. For example, each of the two most prominent mobile operating systemsApples iOS and Googles Android features a core kernel along with middleware that supports databases, multimedia, and graphics (to name a only few). Computer-System Organization Before we can explore the details of how computer systems operate, we need general knowledge of the structure of a computer system. In this section, we look at several parts of this structure. The section is mostly concerned with computer-system organization, so you can skim or skip it if you already understand the concepts"
Justify with an example how a word is made up of one or more bytes,"A word is made up of one or more bytes .For example, a computer that has 64-bit registers and 64-bit memory addressing typically has 64-bit (8-byte) words","The straightforward method for handling this transfer would be to invoke a generic routine to examine the interrupt information. The routine, in turn, would call the interrupt-specic handler. However, interrupts must be handled quickly. Since only a predened number of interrupts is possible, a table of pointers to interrupt routines can be used instead to provide the necessary speed. The interrupt routine is called indirectly through the table, with no intermediate routine needed. Generally, the table of pointers is stored in low memory (the rst hundred or so locations). These locations hold the addresses of the interrupt service routines for the various devices. This array, or interrupt vector, of addresses is then indexed by a unique device number, given with the interrupt request, to provide the address of the interrupt service routine for STORAGE DEFINITIONS AND NOTATION The basic unit of computer storage is the bit. A bit can contain one of two values, 0 and 1. All other storage in a computer is based on collections of bits. Given enough bits, it is amazing how many things a computer can represent: numbers, letters, images, movies, sounds, documents, and programs, to name a few. A byte is 8 bits, and on most computers it is the smallest convenient chunk of storage. For example, most computers dont have an instruction to move a bit but do have one to move a byte. A less common term is word, which is a given computer architectures native unit of data. A word is made up of one or more bytes. For example, a computer that has 64-bit registers and 64-bit memory addressing typically has 64-bit (8-byte) words. A computer executes many operations in its native word size rather than a byte at a time. Computer storage, along with most computer throughput, is generally measured and manipulated in bytes and collections of bytes. A kilobyte, or KB, is 1,024 bytes; a megabyte, or MB, is 1,0242 bytes; a gigabyte, or GB, is 1,0243 bytes; a terabyte, or TB, is 1,0244 bytes; and a petabyte, or PB, is 1,0245 bytes. Computer manufacturers often round off these numbers and say that a megabyte is 1 million bytes and a gigabyte is 1 billion bytes. Networking measurements are an exception to this general rule; they are given in bits (because networks move data a bit at a time)"
"Justify with an example how sometimes, they are managed by the operating system, in that the operating system sends them information about their next task and monitors their status","Sometimes, they are managed by the operating system, in that the operating system sends them information about their next task and monitors their status .For example, a disk-controller microprocessor receives a sequence of requests from the main CPU and implements its own disk queue and scheduling algorithm","Until recently, most computer systems used a single processor. On a singleprocessor system, there is one main CPU capable of executing a general-purpose instruction set, including instructions from user processes. Almost all singleprocessor systems have other special-purpose processors as well. They may come in the form of device-specic processors, such as disk, keyboard, and graphics controllers; or, on mainframes, they may come in the form of more general-purpose processors, such as I/O processors that move data rapidly among the components of the system. All of these special-purpose processors run a limited instruction set and do not run user processes. Sometimes, they are managed by the operating system, in that the operating system sends them information about their next task and monitors their status. For example, a disk-controller microprocessor receives a sequence of requests from the main CPU and implements its own disk queue and scheduling algorithm. This arrangement relieves the main CPU of the overhead of disk scheduling. PCs contain a microprocessor in the keyboard to convert the keystrokes into codes to be sent to the CPU. In other systems or circumstances, special-purpose processors are low-level components built into the hardware. The operating system cannot communicate with these processors; they do their jobs autonomously. The use of special-purpose microprocessors is common and does not turn a single-processor system into a multiprocessor. If there is only one general-purpose CPU, then the system is a single-processor system. Within the past several years, multiprocessor systems (also known as parallel systems or multicore systems) have begun to dominate the landscape of computing. Such systems have two or more processors in close communication, sharing the computer bus and sometimes the clock, memory, and peripheral devices. Multiprocessor systems rst appeared prominently appeared in servers and have since migrated to desktop and laptop systems. Recently, multiple processors have appeared on mobile devices such as smartphones and tablet computers"
"Justify with an example how because most operating systems lack support for simultaneous data access by multiple hosts, parallel clusters usually require the use of special versions of software and special releases of applications","Because most operating systems lack support for simultaneous data access by multiple hosts, parallel clusters usually require the use of special versions of software and special releases of applications .For example, Oracle Real Application Cluster is a version of Oracles database that has been designed to run on a parallel cluster","Typically, these applications are designed so that once each computing node in the cluster has solved its portion of the problem, the results from all the nodes are combined into a nal solution. Other forms of clusters include parallel clusters and clustering over a wide-area network (WAN) (as described in Chapter 17). Parallel clusters allow multiple hosts to access the same data on shared storage. Because most operating systems lack support for simultaneous data access by multiple hosts, parallel clusters usually require the use of special versions of software and special releases of applications. For example, Oracle Real Application Cluster is a version of Oracles database that has been designed to run on a parallel cluster. Each machine runs Oracle, and a layer of software tracks access to the shared disk. Each machine has full access to all data in the database. To provide this shared access, the system must also supply access control and locking to BEOWULF CLUSTERS Beowulf clusters are designed to solve high-performance computing tasks. A Beowulf cluster consists of commodity hardware such as personal computers connected via a simple local-area network. No single specic software package is required to construct a cluster. Rather, the nodes use a set of open-source software libraries to communicate with one another. Thus, there are a variety of approaches to constructing a Beowulf cluster. Typically, though, Beowulf computing nodes run the Linux operating system. Since Beowulf clusters require no special hardware and operate using open-source software that is available free, they offer a low-cost strategy for building a high-performance computing cluster. In fact, some Beowulf clusters built from discarded personal computers are using hundreds of nodes to solve computationally expensive scientic computing problems"
"Justify with an example how with sharing, many processes could be adversely affected by a bug in one program","With sharing, many processes could be adversely affected by a bug in one program .For example, if a process gets stuck in an innite loop, this loop could prevent the correct operation of many other processes","Since the operating system and the users share the hardware and software resources of the computer system, we need to make sure that an error in a user program could cause problems only for the one program running. With sharing, many processes could be adversely affected by a bug in one program. For example, if a process gets stuck in an innite loop, this loop could prevent the correct operation of many other processes. More subtle errors can occur in a multiprogramming system, where one erroneous program might modify another program, the data of another program, or even the operating system itself. Without protection against these sorts of errors, either the computer must execute only one process at a time or all output must be suspect. A properly designed operating system must ensure that an incorrect (or malicious) program cannot cause other programs to execute incorrectly"
"Justify with an example how as noted earlier, the main memory is generally the only large storage device that the CPU is able to address and access directly","As noted earlier, the main memory is generally the only large storage device that the CPU is able to address and access directly .For example, for the CPU to process data from disk, those data must rst be transferred to main memory by CPU-generated I/O calls","The operating system is responsible for the following activities in connection with process management: Scheduling processes and threads on the CPUs Creating and deleting both user and system processes Suspending and resuming processes Providing mechanisms for process synchronization Providing mechanisms for process communication Memory Management As we discussed in Section 1.2.2, the main memory is central to the operation of a modern computer system. Main memory is a large array of bytes, ranging in size from hundreds of thousands to billions. Each byte has its own address. Main memory is a repository of quickly accessible data shared by the CPU and I/O devices. The central processor reads instructions from main memory during the instruction-fetch cycle and both reads and writes data from main memory during the data-fetch cycle (on a von Neumann architecture). As noted earlier, the main memory is generally the only large storage device that the CPU is able to address and access directly. For example, for the CPU to process data from disk, those data must rst be transferred to main memory by CPU-generated I/O calls. In the same way, instructions must be in memory for the CPU to execute them. For a program to be executed, it must be mapped to absolute addresses and loaded into memory. As the program executes, it accesses program instructions and data from memory by generating these absolute addresses. Eventually, the program terminates, its memory space is declared available, and the next program can be loaded and executed"
Justify with an example how one of the purposes of an operating system is to hide the peculiarities of specic hardware devices from the user,"One of the purposes of an operating system is to hide the peculiarities of specic hardware devices from the user .For example, in UNIX, the peculiarities of I/O devices are hidden from the bulk of the operating system itself by the I/O subsystem","In this environment, several copies (or replicas) of the same le can be kept on different computers. Since the various replicas may be accessed and updated concurrently, some distributed systems ensure that, when a replica is updated in one place, all other replicas are brought up to date as soon as possible. There are various ways to achieve this guarantee, as we discuss in Chapter 17. One of the purposes of an operating system is to hide the peculiarities of specic hardware devices from the user. For example, in UNIX, the peculiarities of I/O devices are hidden from the bulk of the operating system itself by the I/O subsystem. The I/O subsystem consists of several components: A memory-management component that includes buffering, caching, and spooling A general device-driver interface Drivers for specic hardware devices Only the device driver knows the peculiarities of the specic device to which it is assigned. We discussed in Section 1.2.3 how interrupt handlers and device drivers are used in the construction of efcient I/O subsystems. In Chapter 13, we discuss how the I/O subsystem interfaces to the other system components, manages devices, transfers data, and detects I/O completion"
"Justify with an example how for that purpose, mechanisms ensure that les, memory segments, CPU, and other resources can be operated on by only those processes that have gained proper authorization from the operating system","For that purpose, mechanisms ensure that les, memory segments, CPU, and other resources can be operated on by only those processes that have gained proper authorization from the operating system .For example, memory-addressing hardware ensures that a process can execute only within its own address space","We discussed in Section 1.2.3 how interrupt handlers and device drivers are used in the construction of efcient I/O subsystems. In Chapter 13, we discuss how the I/O subsystem interfaces to the other system components, manages devices, transfers data, and detects I/O completion. Protection and Security If a computer system has multiple users and allows the concurrent execution of multiple processes, then access to data must be regulated. For that purpose, mechanisms ensure that les, memory segments, CPU, and other resources can be operated on by only those processes that have gained proper authorization from the operating system. For example, memory-addressing hardware ensures that a process can execute only within its own address space. The timer ensures that no process can gain control of the CPU without eventually relinquishing control. Device-control registers are not accessible to users, so the integrity of the various peripheral devices is protected. Protection, then, is any mechanism for controlling the access of processes or users to the resources dened by a computer system. This mechanism must provide means to specify the controls to be imposed and to enforce the controls"
"Justify with an example how in some circumstances, we wish to distinguish among sets of users rather than individual users","In some circumstances, we wish to distinguish among sets of users rather than individual users .For example, the owner of a le on a UNIX system may be allowed to issue all operations on that le, whereas a selected set of users may be allowed only to read the le","When an ID needs to be readable by a user, it is translated back to the user name via the user name list. In some circumstances, we wish to distinguish among sets of users rather than individual users. For example, the owner of a le on a UNIX system may be allowed to issue all operations on that le, whereas a selected set of users may be allowed only to read the le. To accomplish this, we need to dene a group name and the set of users belonging to that group. Group functionality can be implemented as a system-wide list of group names and group identiers. A user can be in one or more groups, depending on operating-system design decisions. The users group IDs are also included in every associated process and thread"
"Justify with an example how one use of a hash function is to implement a hash map, which associates (or maps) [key:value] pairs using a hash function","One use of a hash function is to implement a hash map, which associates (or maps) [key:value] pairs using a hash function .For example, we can map the key operating to the value system","We can accommodate this hash collision by having a linked list at that table location that contains all of the items with the same hash value. Of course, the more collisions there are, the less efcient the hash function is. One use of a hash function is to implement a hash map, which associates (or maps) [key:value] pairs using a hash function. For example, we can map the key operating to the value system. Once the mapping is established, we can apply the hash function to the key to obtain the value from the hash map (Figure 1.17). For example, suppose that a user name is mapped to a password. Password authentication then proceeds as follows: a user enters his user name and password. The hash function is applied to the user name, which is then used to retrieve the password. The retrieved password is then compared with the password entered by the user for authentication"
Justify with an example how a bitmap is a string of n binary digits that can be used to represent the status of n items,"A bitmap is a string of n binary digits that can be used to represent the status of n items .For example, suppose we have several resources, and the availability of each resource is indicated by the value of a binary digit: 0 means that the resource is available, while 1 indicates that it is unavailable (or vice-versa)","Password authentication then proceeds as follows: a user enters his user name and password. The hash function is applied to the user name, which is then used to retrieve the password. The retrieved password is then compared with the password entered by the user for authentication. A bitmap is a string of n binary digits that can be used to represent the status of n items. For example, suppose we have several resources, and the availability of each resource is indicated by the value of a binary digit: 0 means that the resource is available, while 1 indicates that it is unavailable (or vice-versa). The value of the i th position in the bitmap is associated with the i th resource. As an example, consider the bitmap shown below: Resources 2, 4, 5, 6, and 8 are unavailable; resources 0, 1, 3, and 7 are available. The power of bitmaps becomes apparent when we consider their space efciency. If we were to use an eight-bit Boolean value instead of a single bit, the resulting data structure would be eight times larger. Thus, bitmaps are commonly used when there is a need to represent the availability of a large number of resources. Disk drives provide a nice illustration. A medium-sized disk drive might be divided into several thousand individual units, called disk blocks. A bitmap can be used to indicate the availability of each disk block"
Justify with an example how the continuing advent of new technologies brings about new forms of networks,"The continuing advent of new technologies brings about new forms of networks .For example, a metropolitan-area network (MAN) could link buildings within a city","A local-area network (LAN) connects computers within a room, a building, or a campus. A wide-area network (WAN) usually links buildings, cities, or countries. A global company may have a WAN to connect its ofces worldwide, for example. These networks may run one protocol or several protocols. The continuing advent of new technologies brings about new forms of networks. For example, a metropolitan-area network (MAN) could link buildings within a city. BlueTooth and 802.11 devices use wireless technology to communicate over a distance of several feet, in essence creating a personal-area network (PAN) between a phone and a headset or a smartphone and a desktop computer. The media to carry networks are equally varied. They include copper wires, ber strands, and wireless transmissions between satellites, microwave dishes, and radios. When computing devices are connected to cellular phones, they create a network. Even very short-range infrared communication can be used for networking. At a rudimentary level, whenever computers communicate, they use or create a network. These networks also vary in their performance and reliability"
Justify with an example how emulation is used when the source CPU type is different from the target CPU type,"Emulation is used when the source CPU type is different from the target CPU type .For example, when Apple switched from the IBM Power CPU to the Intel x86 CPU for its desktop and laptop computers, it included an emulation facility called Rosetta, which allowed applications compiled for the IBM CPU to run on the Intel CPU","Virtualization is a technology that allows operating systems to run as applications within other operating systems. At rst blush, there seems to be little reason for such functionality. But the virtualization industry is vast and growing, which is a testament to its utility and importance. Broadly speaking, virtualization is one member of a class of software that also includes emulation. Emulation is used when the source CPU type is different from the target CPU type. For example, when Apple switched from the IBM Power CPU to the Intel x86 CPU for its desktop and laptop computers, it included an emulation facility called Rosetta, which allowed applications compiled for the IBM CPU to run on the Intel CPU. That same concept can be extended to allow an entire operating system written for one platform to run on another. Emulation comes at a heavy price, however. Every machine-level instruction that runs natively on the source system must be translated to the equivalent function on the target system, frequently resulting in several target instructions. If the source and target CPUs have similar performance levels, the emulated code can run much slower than the native code. A common example of emulation occurs when a computer language is not compiled to native code but instead is either executed in its high-level form or translated to an intermediate form. This is known as interpretation"
"Justify with an example how on laptops and desktops, a VMM allows the user to install multiple operating systems for exploration or to run applications written for operating systems other than the native host","On laptops and desktops, a VMM allows the user to install multiple operating systems for exploration or to run applications written for operating systems other than the native host .For example, an Apple laptop running Mac OS X on the x86 CPU can run a Windows guest to allow execution of Windows applications","That application ran one or more guest copies of Windows or other native processes processes processes programming interface kernel VM1 kernel VM2 virtual machine manager hardware (b) x86 operating systems, each running its own applications. (See Figure 1.20.) Windows was the host operating system, and the VMware application was the virtual machine manager VMM. The VMM runs the guest operating systems, manages their resource use, and protects each guest from the others. Even though modern operating systems are fully capable of running multiple applications reliably, the use of virtualization continues to grow. On laptops and desktops, a VMM allows the user to install multiple operating systems for exploration or to run applications written for operating systems other than the native host. For example, an Apple laptop running Mac OS X on the x86 CPU can run a Windows guest to allow execution of Windows applications. Companies writing software for multiple operating systems can use virtualization to run all of those operating systems on a single physical server for development, testing, and debugging. Within data centers, virtualization has become a common method of executing and managing computing environments. VMMs like VMware, ESX, and Citrix XenServer no longer run on host operating systems but rather are the hosts. Full details of the features and implementation of virtualization are found in Chapter 16. Cloud computing is a type of computing that delivers computing, storage, and even applications as a service across a network. In some ways, its a logical extension of virtualization, because it uses virtualization as a base for its functionality. For example, the Amazon Elastic Compute Cloud (EC2) facility has thousands of servers, millions of virtual machines, and petabytes of storage available for use by anyone on the Internet. Users pay per month based on how much of those resources they use"
"Justify with an example how in some ways, its a logical extension of virtualization, because it uses virtualization as a base for its functionality","In some ways, its a logical extension of virtualization, because it uses virtualization as a base for its functionality .For example, the Amazon Elastic Compute Cloud (EC2) facility has thousands of servers, millions of virtual machines, and petabytes of storage available for use by anyone on the Internet","Even though modern operating systems are fully capable of running multiple applications reliably, the use of virtualization continues to grow. On laptops and desktops, a VMM allows the user to install multiple operating systems for exploration or to run applications written for operating systems other than the native host. For example, an Apple laptop running Mac OS X on the x86 CPU can run a Windows guest to allow execution of Windows applications. Companies writing software for multiple operating systems can use virtualization to run all of those operating systems on a single physical server for development, testing, and debugging. Within data centers, virtualization has become a common method of executing and managing computing environments. VMMs like VMware, ESX, and Citrix XenServer no longer run on host operating systems but rather are the hosts. Full details of the features and implementation of virtualization are found in Chapter 16. Cloud computing is a type of computing that delivers computing, storage, and even applications as a service across a network. In some ways, its a logical extension of virtualization, because it uses virtualization as a base for its functionality. For example, the Amazon Elastic Compute Cloud (EC2) facility has thousands of servers, millions of virtual machines, and petabytes of storage available for use by anyone on the Internet. Users pay per month based on how much of those resources they use. There are actually many types of cloud computing, including the following: Public cloud a cloud available via the Internet to anyone willing to pay for the services Private clouda cloud run by a company for that companys own use Hybrid cloud a cloud that includes both public and private cloud components Software as a service (SaaS)one or more applications (such as word processors or spreadsheets) available via the Internet Platform as a service (PaaS)a software stack ready for application use via the Internet (for example, a database server) Infrastructure as a service (IaaS)servers or storage available over the Internet (for example, storage available for making backup copies of production data) These cloud-computing types are not discrete, as a cloud computing environment may provide a combination of several types. For example, an organization may provide both SaaS and IaaS as a publicly available service"
"Justify with an example how sometimes, licenses are not mutually exclusive and cross-pollination occurs, allowing rapid improvements in operating-system projects","Sometimes, licenses are not mutually exclusive and cross-pollination occurs, allowing rapid improvements in operating-system projects .For example, several major components of OpenSolaris have been ported to BSD UNIX","The free software movement is driving legions of programmers to create thousands of open-source projects, including operating systems. Sites like http://freshmeat.net/ and http://distrowatch.com/ provide portals to many of these projects. As we stated earlier, open-source projects enable students to use source code as a learning tool. They can modify programs and test them, help nd and x bugs, and otherwise explore mature, full-featured operating systems, compilers, tools, user interfaces, and other types of programs. The availability of source code for historic projects, such as Multics, can help students to understand those projects and to build knowledge that will help in the implementation of new projects. GNU/Linux and BSD UNIX are all open-source operating systems, but each has its own goals, utility, licensing, and purpose. Sometimes, licenses are not mutually exclusive and cross-pollination occurs, allowing rapid improvements in operating-system projects. For example, several major components of OpenSolaris have been ported to BSD UNIX. The advantages of free software and open sourcing are likely to increase the number and quality of open-source projects, leading to an increase in the number of individuals and companies that use these projects. 1.13 Summary An operating system is software that manages the computer hardware, as well as providing an environment for application programs to run. Perhaps the most visible aspect of an operating system is the interface to the computer system it provides to the human user"
"Justify with an example how In addition, the rise of virtualization as a mainstream (and frequently free) computer function makes it possible to run many operating systems on top of one core system","In addition, the rise of virtualization as a mainstream (and frequently free) computer function makes it possible to run many operating systems on top of one core system .For example, VMware ( http://www.vmware.com) provides a free player for Windows on which hundreds of free virtual appliances can run","Operating systems that are no longer commercially viable have been open-sourced as well, enabling us to study how systems operated in a time of fewer CPU, memory, and storage resources. An extensive but incomplete list of open-source operating-system projects is available from http://dmoz.org/Computers/Software/Operating Systems/Open Source/. In addition, the rise of virtualization as a mainstream (and frequently free) computer function makes it possible to run many operating systems on top of one core system. For example, VMware ( http://www.vmware.com) provides a free player for Windows on which hundreds of free virtual appliances can run. Virtualbox ( http://www.virtualbox.com) provides a free, opensource virtual machine manager on many operating systems. Using such tools, students can try out hundreds of operating systems without dedicated hardware. In some cases, simulators of specic hardware are also available, allowing the operating system to run on native hardware, all within the connes of a modern computer and modern operating system. For example, a DECSYSTEM-20 simulator running on Mac OS X can boot TOPS-20, load the source tapes, and modify and compile a new TOPS-20 kernel. An interested student can search the Internet to nd the original papers that describe the operating system, as well as the original manuals"
"Justify with an example how in some cases, simulators of specic hardware are also available, allowing the operating system to run on native hardware, all within the connes of a modern computer and modern operating system","In some cases, simulators of specic hardware are also available, allowing the operating system to run on native hardware, all within the connes of a modern computer and modern operating system .For example, a DECSYSTEM-20 simulator running on Mac OS X can boot TOPS-20, load the source tapes, and modify and compile a new TOPS-20 kernel","In addition, the rise of virtualization as a mainstream (and frequently free) computer function makes it possible to run many operating systems on top of one core system. For example, VMware ( http://www.vmware.com) provides a free player for Windows on which hundreds of free virtual appliances can run. Virtualbox ( http://www.virtualbox.com) provides a free, opensource virtual machine manager on many operating systems. Using such tools, students can try out hundreds of operating systems without dedicated hardware. In some cases, simulators of specic hardware are also available, allowing the operating system to run on native hardware, all within the connes of a modern computer and modern operating system. For example, a DECSYSTEM-20 simulator running on Mac OS X can boot TOPS-20, load the source tapes, and modify and compile a new TOPS-20 kernel. An interested student can search the Internet to nd the original papers that describe the operating system, as well as the original manuals. The advent of open-source operating systems has also made it easier to make the move from student to operating-system developer. With some knowledge, some effort, and an Internet connection, a student can even create a new operating-system distribution. Just a few years ago, it was difcult or impossible to get access to source code. Now, such access is limited only by how much interest, time, and disk space a student has"
"Justify with an example how on systems with multiple command interpreters to choose from, the interpreters are known as shells","On systems with multiple command interpreters to choose from, the interpreters are known as shells .For example, on UNIX and Linux systems, a user may choose among several different shells, including the Bourne shell, C shell, Bourne-Again shell, Korn shell, and others","User and Operating-System Interface We mentioned earlier that there are several ways for users to interface with the operating system. Here, we discuss two fundamental approaches. One provides a command-line interface, or command interpreter, that allows users to directly enter commands to be performed by the operating system. The other allows users to interface with the operating system via a graphical user interface, or GUI. Some operating systems include the command interpreter in the kernel. Others, such as Windows and UNIX, treat the command interpreter as a special program that is running when a job is initiated or when a user rst logs on (on interactive systems). On systems with multiple command interpreters to choose from, the interpreters are known as shells. For example, on UNIX and Linux systems, a user may choose among several different shells, including the Bourne shell, C shell, Bourne-Again shell, Korn shell, and others. Third-party shells and free user-written shells are also available. Most shells provide similar functionality, and a users choice of which shell to use is generally based on personal preference. Figure 2.2 shows the Bourne shell command interpreter being used on Solaris 10. The main function of the command interpreter is to get and execute the next user-specied command. Many of the commands given at this level manipulate les: create, delete, list, print, copy, execute, and so on. The MS-DOS and UNIX shells operate in this way. These commands can be implemented in two general ways"
"Justify with an example how in one approach, the command interpreter itself contains the code to execute the command","In one approach, the command interpreter itself contains the code to execute the command .For example, a command to delete a le may cause the command interpreter to jump to a section of its code that sets up the parameters and makes the appropriate system call","The main function of the command interpreter is to get and execute the next user-specied command. Many of the commands given at this level manipulate les: create, delete, list, print, copy, execute, and so on. The MS-DOS and UNIX shells operate in this way. These commands can be implemented in two general ways. In one approach, the command interpreter itself contains the code to execute the command. For example, a command to delete a le may cause the command interpreter to jump to a section of its code that sets up the parameters and makes the appropriate system call. In this case, the number of commands that can be given determines the size of the command interpreter, since each command requires its own implementing code. An alternative approachused by UNIX, among other operating systems implements most commands through system programs. In this case, the command interpreter does not understand the command in any way; it merely uses the command to identify a le to be loaded into memory and executed"
"Justify with an example how further, commandline interfaces usually make repetitive tasks easier, in part because they have their own programmability","Further, commandline interfaces usually make repetitive tasks easier, in part because they have their own programmability .For example, if a frequent task requires a set of command-line steps, those steps can be recorded into a le, and that le can be run just like a program","Traditionally, UNIX systems have been dominated by command-line interfaces. Various GUI interfaces are available, however. These include the Common Desktop Environment (CDE) and X-Windows systems, which are common on commercial versions of UNIX, such as Solaris and IBMs AIX system. In addition, there has been signicant development in GUI designs from various open-source projects, such as K Desktop Environment (or KDE) and the GNOME desktop by the GNU project. Both the KDE and GNOME desktops run on Linux and various UNIX systems and are available under open-source licenses, which means their source code is readily available for reading and for modication under specic license terms. 2.2 User and Operating-System Interface Choice of Interface The choice of whether to use a command-line or GUI interface is mostly one of personal preference. System administrators who manage computers and power users who have deep knowledge of a system frequently use the command-line interface. For them, it is more efcient, giving them faster access to the activities they need to perform. Indeed, on some systems, only a subset of system functions is available via the GUI, leaving the less common tasks to those who are command-line knowledgeable. Further, commandline interfaces usually make repetitive tasks easier, in part because they have their own programmability. For example, if a frequent task requires a set of command-line steps, those steps can be recorded into a le, and that le can be run just like a program. The program is not compiled into executable code but rather is interpreted by the command-line interface. These shell scripts are very common on systems that are command-line oriented, such as UNIX and Linux. In contrast, most Windows users are happy to use the Windows GUI environment and almost never use the MS-DOS shell interface. The various changes undergone by the Macintosh operating systems provide a nice study in contrast. Historically, Mac OS has not provided a command-line interface, always requiring its users to interface with the operating system using its GUI"
"Justify with an example how behind the scenes, the functions that make up an API typically invoke the actual system calls on behalf of the application programmer","Behind the scenes, the functions that make up an API typically invoke the actual system calls on behalf of the application programmer .For example, the Windows function CreateProcess() (which unsurprisingly is used to create a new process) actually invokes the NTCreateProcess() system call in the Windows kernel","Three of the most common APIs available to application programmers are the Windows API for Windows systems, the POSIX API for POSIX-based systems (which include virtually all versions of UNIX, Linux, and Mac OS X), and the Java API for programs that run on the Java virtual machine. A programmer accesses an API via a library of code provided by the operating system. In the case of UNIX and Linux for programs written in the C language, the library is called libc. Note thatunless specied the system-call names used throughout this text are generic examples. Each operating system has its own name for each system call. Behind the scenes, the functions that make up an API typically invoke the actual system calls on behalf of the application programmer. For example, the Windows function CreateProcess() (which unsurprisingly is used to create a new process) actually invokes the NTCreateProcess() system call in the Windows kernel. Why would an application programmer prefer programming according to an API rather than invoking actual system calls? There are several reasons for doing so. One benet concerns program portability. An application program- destination file Example System Call Sequence Acquire input file name Write prompt to screen Accept input Acquire output file name Write prompt to screen Accept input Open the input file if file doesn't exist, abort Create output file if file exists, abort Loop Read from input file Write to output file Until read fails Close output file Write completion message to screen Terminate normally EXAMPLE OF STANDARD API As an example of a standard API, consider the read() function that is available in UNIX and Linux systems. The API for this function is obtained from the man page by invoking the command man read on the command line. A description of this API appears below: #include <unistd.h> ssize_t return value read(int fd, void *buf, size_t count) function name A program that uses the read() function must include the unistd.h header le, as this le denes the ssize t and size t data types (among other things). The parameters passed to read() are as follows: int fd the le descriptor to be read void *buf a buffer where the data will be read into size t count the maximum number of bytes to be buffer On a successful read, the number of bytes read is returned. A return value of 0 indicates end of le. If an error occurs, read() returns 1"
Justify with an example how the exact type and amount of information vary according to the particular operating system and call,"The exact type and amount of information vary according to the particular operating system and call .For example, to get input, we may need to specify the le or device to use as the source, as well as the address and length of the memory buffer into which the input should be read","System calls occur in different ways, depending on the computer in use. Often, more information is required than simply the identity of the desired system call. The exact type and amount of information vary according to the particular operating system and call. For example, to get input, we may need to specify the le or device to use as the source, as well as the address and length of the memory buffer into which the input should be read. Of course, the device or le and length may be implicit in the call. Three general methods are used to pass parameters to the operating system"
Justify with an example how many system calls exist simply for the purpose of transferring information between the user program and the operating system,"Many system calls exist simply for the purpose of transferring information between the user program and the operating system .For example, most systems have a system call to return the current time() and date()","The user interface can also make les and devices appear to be similar, even though the underlying system calls are dissimilar. This is another example of the many design decisions that go into building an operating system and user interface. Many system calls exist simply for the purpose of transferring information between the user program and the operating system. For example, most systems have a system call to return the current time() and date(). Other system calls may return information about the system, such as the number of current users, the version number of the operating system, the amount of free memory or disk space, and so on. Another set of system calls is helpful in debugging a program. Many systems provide system calls to dump() memory. This provision is useful for debugging. A program trace lists each system call as it is executed. Even microprocessors provide a CPU mode known as single step, in which a trap is executed by the CPU after every instruction. The trap is usually caught by a debugger"
Justify with an example how the wide range of systems in existence shows that different requirements can result in a large variety of solutions for different environments,"The wide range of systems in existence shows that different requirements can result in a large variety of solutions for different environments .For example, the requirements for VxWorks, a real- time operating system for embedded systems, must have been substantially different from those for MVS, a large multiuser, multiaccess operating system for IBM mainframes","A similar set of requirements can be dened by those people who must design, create, maintain, and operate the system. The system should be easy to design, implement, and maintain; and it should be exible, reliable, error free, and efcient. Again, these requirements are vague and may be interpreted in various ways. There is, in short, no unique solution to the problem of dening the requirements for an operating system. The wide range of systems in existence shows that different requirements can result in a large variety of solutions for different environments. For example, the requirements for VxWorks, a real- time operating system for embedded systems, must have been substantially different from those for MVS, a large multiuser, multiaccess operating system for IBM mainframes. Specifying and designing an operating system is a highly creative task"
Justify with an example how mechanisms determine how to do something; policies determine what will be done,"Mechanisms determine how to do something; policies determine what will be done .For example, the timer construct (see Section 1.5.2) is a mechanism for ensuring CPU protection, but deciding how long the timer is to be set for a particular user is a policy decision","One important principle is the separation of policy from mechanism. Mechanisms determine how to do something; policies determine what will be done. For example, the timer construct (see Section 1.5.2) is a mechanism for ensuring CPU protection, but deciding how long the timer is to be set for a particular user is a policy decision. The separation of policy and mechanism is important for exibility. Policies are likely to change across places or over time. In the worst case, each change in policy would require a change in the underlying mechanism. A general mechanism insensitive to changes in policy would be more desirable. A change in policy would then require redenition of only certain parameters of the system. For instance, consider a mechanism for giving priority to certain types of programs over others. If the mechanism is properly separated from policy, it can be used either to support a policy decision that I/O-intensive programs should have priority over CPU-intensive ones or to support the opposite policy"
"Justify with an example how because a layer can use only lower-level layers, careful planning is necessary","Because a layer can use only lower-level layers, careful planning is necessary .For example, the device driver for the backing store (disk space used by virtual-memory algorithms) must be at a lower level than the memory-management routines, because memory management requires the ability to use the backing store","Each layer is implemented only with operations provided by lower-level layers. A layer does not need to know how these operations are implemented; it needs to know only what these operations do. Hence, each layer hides the existence of certain data structures, operations, and hardware from higher-level layers. The major difculty with the layered approach involves appropriately dening the various layers. Because a layer can use only lower-level layers, careful planning is necessary. For example, the device driver for the backing store (disk space used by virtual-memory algorithms) must be at a lower level than the memory-management routines, because memory management requires the ability to use the backing store. Other requirements may not be so obvious. The backing-store driver would normally be above the CPU scheduler, because the driver may need to wait for I/O and the CPU can be rescheduled during this time. However, on a large system, the CPU scheduler may have more information about all the active processes than can t in memory. Therefore, this information may need to be swapped in and out of memory, requiring the backing-store driver routine to be below the CPU scheduler"
"Justify with an example how instead, they combine different structures, resulting in hybrid systems that address performance, security, and usability issues","Instead, they combine different structures, resulting in hybrid systems that address performance, security, and usability issues .For example, both Linux and Solaris are monolithic, because having the operating system in a single address space provides very efcient performance","The Solaris operating system structure, shown in Figure 2.15, is organized around a core kernel with seven types of loadable kernel modules: 1. Scheduling classes 2. File systems 3. Loadable system calls 4. Executable formats 5. STREAMS modules 6. Miscellaneous 7. Device and bus drivers Linux also uses loadable kernel modules, primarily for supporting device drivers and le systems. We cover creating loadable kernel modules in Linux as a programming exercise at the end of this chapter. In practice, very few operating systems adopt a single, strictly dened structure. Instead, they combine different structures, resulting in hybrid systems that address performance, security, and usability issues. For example, both Linux and Solaris are monolithic, because having the operating system in a single address space provides very efcient performance. However, they are also modular, so that new functionality can be dynamically added to the kernel. Windows is largely monolithic as well (again primarily for performance reasons), but it retains some behavior typical of microkernel systems, including providing support for separate subsystems (known as operating-system personalities) that run as user-mode processes. Windows systems also provide support for dynamically loadable kernel modules. We provide case studies of Linux and Windows 7 in in Chapters 18 and 19, respectively. In the remainder of this section, we explore the structure of three hybrid systems: the Apple Mac OS X operating system and the two most prominent mobile operating systemsiOS and Android. 2.7.5.1 Mac OS X The Apple Mac OS X operating system uses a hybrid structure. As shown in (Figure 2.4) and a set of application environments and services. Notably, the Cocoa environment species an API for the Objective-C programming language, which is used for writing Mac OS X applications. Below these layers is the kernel environment, which consists primarily of the Mach microkernel and the BSD UNIX kernel. Mach provides memory management; support for remote procedure calls (RPCs) and interprocess communication (IPC) facilities, including message passing; and thread scheduling. The BSD component provides a BSD command-line interface, support for networking and le systems, and an implementation of POSIX APIs, including Pthreads"
Justify with an example how the JVM executes as a process that interprets the loaded Java code and takes actions (via native machine instructions) on behalf of that code,"The JVM executes as a process that interprets the loaded Java code and takes actions (via native machine instructions) on behalf of that code .For example, to run the compiled Java program Program.class, we would enter java Program The command java runs the JVM as an ordinary process, which in turns executes the Java program Program in the virtual machine","Note that a process itself can be an execution environment for other code. The Java programming environment provides a good example. In most circumstances, an executable Java program is executed within the Java virtual machine (JVM). The JVM executes as a process that interprets the loaded Java code and takes actions (via native machine instructions) on behalf of that code. For example, to run the compiled Java program Program.class, we would enter java Program The command java runs the JVM as an ordinary process, which in turns executes the Java program Program in the virtual machine. The concept is the same as simulation, except that the code, instead of being written for a different instruction set, is written in the Java language. As a process executes, it changes state. The state of a process is dened in part by the current activity of that process. A process may be in one of the following states: New. The process is being created"
"Justify with an example how on some systems, the long-term scheduler may be absent or minimal","On some systems, the long-term scheduler may be absent or minimal .For example, time-sharing systems such as UNIX and Microsoft Windows systems often have no long-term scheduler but simply put every new process in memory for the short-term scheduler","On some systems, the long-term scheduler may be absent or minimal. For example, time-sharing systems such as UNIX and Microsoft Windows systems often have no long-term scheduler but simply put every new process in memory for the short-term scheduler. The stability of these systems depends either on a physical limitation (such as the number of available terminals) or on the self-adjusting nature of human users. If performance declines to unacceptable levels on a multiuser system, some users will simply quit. Some operating systems, such as time-sharing systems, may introduce an additional, intermediate level of scheduling. This medium-term scheduler is diagrammed in Figure 3.7. The key idea behind a medium-term scheduler is that sometimes it can be advantageous to remove a process from memory (and from active contention for the CPU) and thus reduce the degree of multiprogramming. Later, the process can be reintroduced into memory, and its execution can be continued where it left off. This scheme is called swapping"
"Justify with an example how on UNIX and Linux systems, we can obtain a listing of processes by using the ps command","On UNIX and Linux systems, we can obtain a listing of processes by using the ps command .For example, the command ps -el will list complete information for all processes currently active in the system","showing the name of each process and its pid. (We use the term process rather loosely, as Linux prefers the term task instead.) The init process (which always has a pid of 1) serves as the root parent process for all user processes. Once the system has booted, the init process can also create various user processes, such as a web or print server, an ssh server, and the like. In Figure 3.8, we see two children of init kthreadd and sshd. The kthreadd process is responsible for creating additional processes that perform tasks on behalf of the kernel (in this situation, khelper and pdflush). The sshd process is responsible for managing clients that connect to the system by using ssh (which is short for secure shell). The login process is responsible for managing clients that directly log onto the system. In this example, a client has logged on and is using the bash shell, which has been assigned pid 8416. Using the bash command-line interface, this user has created the process ps as well as the emacs editor. On UNIX and Linux systems, we can obtain a listing of processes by using the ps command. For example, the command ps -el will list complete information for all processes currently active in the system. It is easy to construct a process tree similar to the one shown in Figure 3.8 by recursively tracing parent processes all the way to the init process"
Justify with an example how a producer process produces information that is consumed by a consumer process,"A producer process produces information that is consumed by a consumer process .For example, a compiler may produce assembly code that is consumed by an assembler","Interprocess communication using shared memory requires communicating processes to establish a region of shared memory. Typically, a shared-memory region resides in the address space of the process creating the shared-memory segment. Other processes that wish to communicate using this shared-memory segment must attach it to their address space. Recall that, normally, the operating system tries to prevent one process from accessing another processs memory. Shared memory requires that two or more processes agree to remove this restriction. They can then exchange information by reading and writing data in the shared areas. The form of the data and the location are determined by these processes and are not under the operating systems control. The processes are also responsible for ensuring that they are not writing to the same location simultaneously. To illustrate the concept of cooperating processes, lets consider the producerconsumer problem, which is a common paradigm for cooperating processes. A producer process produces information that is consumed by a consumer process. For example, a compiler may produce assembly code that is consumed by an assembler. The assembler, in turn, may produce object modules that are consumed by the loader. The producerconsumer problem while (true) { /* produce an item in next produced */ while (((in + 1) % BUFFER SIZE) == out) ; /* do nothing */ buffer[in] = next produced; in = (in + 1) % BUFFER SIZE; also provides a useful metaphor for the clientserver paradigm. We generally think of a server as a producer and a client as a consumer. For example, a web server produces (that is, provides) HTML les and images, which are consumed (that is, read) by the client web browser requesting the resource. One solution to the producerconsumer problem uses shared memory. To allow producer and consumer processes to run concurrently, we must have available a buffer of items that can be lled by the producer and emptied by the consumer. This buffer will reside in a region of memory that is shared by the producer and consumer processes. A producer can produce one item while the consumer is consuming another item. The producer and consumer must be synchronized, so that the consumer does not try to consume an item that has not yet been produced"
Justify with an example how we generally think of a server as a producer and a client as a consumer,"We generally think of a server as a producer and a client as a consumer .For example, a web server produces (that is, provides) HTML les and images, which are consumed (that is, read) by the client web browser requesting the resource","Interprocess communication using shared memory requires communicating processes to establish a region of shared memory. Typically, a shared-memory region resides in the address space of the process creating the shared-memory segment. Other processes that wish to communicate using this shared-memory segment must attach it to their address space. Recall that, normally, the operating system tries to prevent one process from accessing another processs memory. Shared memory requires that two or more processes agree to remove this restriction. They can then exchange information by reading and writing data in the shared areas. The form of the data and the location are determined by these processes and are not under the operating systems control. The processes are also responsible for ensuring that they are not writing to the same location simultaneously. To illustrate the concept of cooperating processes, lets consider the producerconsumer problem, which is a common paradigm for cooperating processes. A producer process produces information that is consumed by a consumer process. For example, a compiler may produce assembly code that is consumed by an assembler. The assembler, in turn, may produce object modules that are consumed by the loader. The producerconsumer problem while (true) { /* produce an item in next produced */ while (((in + 1) % BUFFER SIZE) == out) ; /* do nothing */ buffer[in] = next produced; in = (in + 1) % BUFFER SIZE; also provides a useful metaphor for the clientserver paradigm. We generally think of a server as a producer and a client as a consumer. For example, a web server produces (that is, provides) HTML les and images, which are consumed (that is, read) by the client web browser requesting the resource. One solution to the producerconsumer problem uses shared memory. To allow producer and consumer processes to run concurrently, we must have available a buffer of items that can be lled by the producer and emptied by the consumer. This buffer will reside in a region of memory that is shared by the producer and consumer processes. A producer can produce one item while the consumer is consuming another item. The producer and consumer must be synchronized, so that the consumer does not try to consume an item that has not yet been produced"
"Justify with an example how21 The Collatz conjecture concerns what happens when we take any positive integer n and apply the following algorithm:  n= n/2, if n is even 3 n + 1, if n is odd The conjecture states that when this algorithm is continually applied, all positive integers will eventually reach 1","21 The Collatz conjecture concerns what happens when we take any positive integer n and apply the following algorithm:  n= n/2, if n is even 3 n + 1, if n is odd The conjecture states that when this algorithm is continually applied, all positive integers will eventually reach 1 .For example, if n = 35, the sequence is 35, 106, 53, 160, 80, 40, 20, 10, 5, 16, 8, 4, 2, 1 Write a C program using the fork() system call that generates this sequence in the child process","Implement the following API for obtaining and releasing a pid: int allocate map(void) Creates and initializes a data structure for representing pids; returns1 if unsuccessful, 1 if successful int allocate pid(void) Allocates and returns a pid; returns 1 if unable to allocate a pid (all pids are in use) void release pid(int pid) Releases a pid This programming problem will be modied later on in Chpaters 4 and 5. 3.21 The Collatz conjecture concerns what happens when we take any positive integer n and apply the following algorithm:  n= n/2, if n is even 3 n + 1, if n is odd The conjecture states that when this algorithm is continually applied, all positive integers will eventually reach 1. For example, if n = 35, the sequence is 35, 106, 53, 160, 80, 40, 20, 10, 5, 16, 8, 4, 2, 1 Write a C program using the fork() system call that generates this sequence in the child process. The starting number will be provided from the command line. For example, if 8 is passed as a parameter on the command line, the child process will output 8, 4, 2, 1. Because the parent and child processes have their own copies of the data, it will be necessary for the child to output the sequence. Have the parent invoke the wait() call to wait for the child process to complete before exiting the program. Perform necessary error checking to ensure that a positive integer is passed on the command line. 3.22 In Exercise 3.21, the child process must output the sequence of numbers generated from the algorithm specied by the Collatz conjecture because the parent and child have their own copies of the data. Another approach to designing this program is to establish a shared-memory object between the parent and child processes. This technique allows the child to write the contents of the sequence to the shared-memory object"
"Justify with an example how in certain situations, a single application may be required to perform several similar tasks","In certain situations, a single application may be required to perform several similar tasks .For example, a web server accepts client requests for web pages, images, sound, and so forth","An application typically is implemented as a separate process with several code registers files data stack registers stack stack thread multithreaded process threads of control. A web browser might have one thread display images or text while another thread retrieves data from the network, for example. A word processor may have a thread for displaying graphics, another thread for responding to keystrokes from the user, and a third thread for performing spelling and grammar checking in the background. Applications can also be designed to leverage processing capabilities on multicore systems. Such applications can perform several CPU-intensive tasks in parallel across the multiple computing cores. In certain situations, a single application may be required to perform several similar tasks. For example, a web server accepts client requests for web pages, images, sound, and so forth. A busy web server may have several (perhaps thousands of) clients concurrently accessing it. If the web server ran as a traditional single-threaded process, it would be able to service only one client at a time, and a client might have to wait a very long time for its request to be serviced. One solution is to have the server run as a single process that accepts requests. When the server receives a request, it creates a separate process to service that request. In fact, this process-creation method was in common use before threads became popular. Process creation is time consuming and resource intensive, however. If the new process will perform the same tasks as the existing process, why incur all that overhead? It is generally more efcient to use one process that contains multiple threads. If the web-server process is multithreaded, the server will create a separate thread that listens for client requests. When a request is made, rather than creating another process, the server creates a new thread to service the request and resume listening for additional requests. This is illustrated in Figure 4.2"
"Justify with an example how several threads operate in the kernel, and each thread performs a specic task, such as managing devices, managing memory, or interrupt handling","Several threads operate in the kernel, and each thread performs a specic task, such as managing devices, managing memory, or interrupt handling .For example, Solaris has a set of threads in the kernel specically for interrupt handling; Linux uses a kernel thread for managing the amount of free memory in the system","Typically, RPC servers are multithreaded. When a server receives a message, it 4.1 Overview (2) create new thread to service the request (1) request client server (3) resume listening for additional client requests services the message using a separate thread. This allows the server to service several concurrent requests. Finally, most operating-system kernels are now multithreaded. Several threads operate in the kernel, and each thread performs a specic task, such as managing devices, managing memory, or interrupt handling. For example, Solaris has a set of threads in the kernel specically for interrupt handling; Linux uses a kernel thread for managing the amount of free memory in the system. The benets of multithreaded programming can be broken down into four major categories: 1. Responsiveness. Multithreading an interactive application may allow a program to continue running even if part of it is blocked or is performing a lengthy operation, thereby increasing responsiveness to the user. This quality is especially useful in designing user interfaces. For instance, consider what happens when a user clicks a button that results in the performance of a time-consuming operation. A single-threaded application would be unresponsive to the user until the operation had completed. In contrast, if the time-consuming operation is performed in a separate thread, the application remains responsive to the user"
"Justify with an example how typically, synchronous threading involves signicant data sharing among threads","Typically, synchronous threading involves signicant data sharing among threads .For example, the parent thread may combine the results calculated by its various children","Before we proceed with our examples of thread creation, we introduce two general strategies for creating multiple threads: asynchronous threading and synchronous threading. With asynchronous threading, once the parent creates a child thread, the parent resumes its execution, so that the parent and child execute concurrently. Each thread runs independently of every other thread, and the parent thread need not know when its child terminates. Because the threads are independent, there is typically little data sharing between threads. Asynchronous threading is the strategy used in the multithreaded server illustrated in Figure 4.2. Synchronous threading occurs when the parent thread creates one or more children and then must wait for all of its children to terminate before it resumes the so-called fork-join strategy. Here, the threads created by the parent perform work concurrently, but the parent cannot continue until this work has been completed. Once each thread has nished its work, it terminates and joins with its parent. Only after all of the children have joined can the parent resume execution. Typically, synchronous threading involves signicant data sharing among threads. For example, the parent thread may combine the results calculated by its various children. All of the following examples use synchronous threading. Pthreads refers to the POSIX standard (IEEE 1003.1c) dening an API for thread creation and synchronization. This is a specication for thread behavior, not an implementation. Operating-system designers may implement the specication in any way they wish. Numerous systems implement the Pthreads specication; most are UNIX-type systems, including Linux, Mac OS X, and Solaris. Although Windows doesnt support Pthreads natively, some thirdparty implementations for Windows are available"
"Justify with an example how the specication for the JVM does not indicate how Java threads are to be mapped to the underlying operating system, instead leaving that decision to the particular implementation of the JVM","The specication for the JVM does not indicate how Java threads are to be mapped to the underlying operating system, instead leaving that decision to the particular implementation of the JVM .For example, the Windows XP operating system uses the one-to-one model; therefore, each Java thread for a JVM running on such a system maps to a kernel thread","Implicit Threading With the continued growth of multicore processing, applications containing hundredsor even thousandsof threads are looming on the horizon. Designing such applications is not a trivial undertaking: programmers must address not only the challenges outlined in Section 4.2 but additional difculties as well. These difculties, which relate to program correctness, are covered in One way to address these difculties and better support the design of multithreaded applications is to transfer the creation and management of class Sum { private int sum; public int getSum() { return sum; } public void setSum(int sum) { this.sum = sum; } class Summation implements Runnable { private int upper; private Sum sumValue; public Summation(int upper, Sum sumValue) { this.upper = upper; this.sumValue = sumValue; } public void run() { int sum = 0; for (int i = 0; i <= upper; i++) sum += i; sumValue.setSum(sum); } public class Driver { public static void main(String[] args) { if (args.length > 0) { if (Integer.parseInt(args[0]) < 0) System.err.println(args[0] + "" must be >= 0.""); else { Sum sumObject = new Sum(); int upper = Integer.parseInt(args[0]); Thread thrd = new Thread(new Summation(upper, sumObject)); thrd.start(); try { thrd.join(); System.out.println (""The sum of ""+upper+"" is ""+sumObject.getSum()); } catch (InterruptedException ie) { } } } else System.err.println(""Usage: Summation <integer value>""); } } THE JVM AND THE HOST OPERATING SYSTEM The JVM is typically implemented on top of a host operating system (see of the underlying operating system and to provide a consistent, abstract environment that allows Java programs to operate on any platform that supports a JVM. The specication for the JVM does not indicate how Java threads are to be mapped to the underlying operating system, instead leaving that decision to the particular implementation of the JVM. For example, the Windows XP operating system uses the one-to-one model; therefore, each Java thread for a JVM running on such a system maps to a kernel thread. On operating systems that use the many-to-many model (such as Tru64 UNIX), a Java thread is mapped according to the many-to-many model. Solaris initially implemented the JVM using the many-to-one model (the green threads library, mentioned earlier). Later releases of the JVM were implemented using the many-to-many model. Beginning with Solaris 9, Java threads were mapped using the one-to-one model. In addition, there may be a relationship between the Java thread library and the thread library on the host operating system. For example, implementations of a JVM for the Windows family of operating systems might use the Windows API when creating Java threads; Linux, Solaris, and Mac OS X systems might use the Pthreads API"
"Justify with an example how in addition, there may be a relationship between the Java thread library and the thread library on the host operating system","In addition, there may be a relationship between the Java thread library and the thread library on the host operating system .For example, implementations of a JVM for the Windows family of operating systems might use the Windows API when creating Java threads; Linux, Solaris, and Mac OS X systems might use the Pthreads API. threading from application developers to compilers and run-time libraries","Designing such applications is not a trivial undertaking: programmers must address not only the challenges outlined in Section 4.2 but additional difculties as well. These difculties, which relate to program correctness, are covered in One way to address these difculties and better support the design of multithreaded applications is to transfer the creation and management of class Sum { private int sum; public int getSum() { return sum; } public void setSum(int sum) { this.sum = sum; } class Summation implements Runnable { private int upper; private Sum sumValue; public Summation(int upper, Sum sumValue) { this.upper = upper; this.sumValue = sumValue; } public void run() { int sum = 0; for (int i = 0; i <= upper; i++) sum += i; sumValue.setSum(sum); } public class Driver { public static void main(String[] args) { if (args.length > 0) { if (Integer.parseInt(args[0]) < 0) System.err.println(args[0] + "" must be >= 0.""); else { Sum sumObject = new Sum(); int upper = Integer.parseInt(args[0]); Thread thrd = new Thread(new Summation(upper, sumObject)); thrd.start(); try { thrd.join(); System.out.println (""The sum of ""+upper+"" is ""+sumObject.getSum()); } catch (InterruptedException ie) { } } } else System.err.println(""Usage: Summation <integer value>""); } } THE JVM AND THE HOST OPERATING SYSTEM The JVM is typically implemented on top of a host operating system (see of the underlying operating system and to provide a consistent, abstract environment that allows Java programs to operate on any platform that supports a JVM. The specication for the JVM does not indicate how Java threads are to be mapped to the underlying operating system, instead leaving that decision to the particular implementation of the JVM. For example, the Windows XP operating system uses the one-to-one model; therefore, each Java thread for a JVM running on such a system maps to a kernel thread. On operating systems that use the many-to-many model (such as Tru64 UNIX), a Java thread is mapped according to the many-to-many model. Solaris initially implemented the JVM using the many-to-one model (the green threads library, mentioned earlier). Later releases of the JVM were implemented using the many-to-many model. Beginning with Solaris 9, Java threads were mapped using the one-to-one model. In addition, there may be a relationship between the Java thread library and the thread library on the host operating system. For example, implementations of a JVM for the Windows family of operating systems might use the Windows API when creating Java threads; Linux, Solaris, and Mac OS X systems might use the Pthreads API. threading from application developers to compilers and run-time libraries"
Justify with an example how the method for delivering a signal depends on the type of signal generated,"The method for delivering a signal depends on the type of signal generated .For example, synchronous signals need to be delivered to the thread causing the signal and not to other threads in the process","The method for delivering a signal depends on the type of signal generated. For example, synchronous signals need to be delivered to the thread causing the signal and not to other threads in the process. However, the situation with asynchronous signals is not as clear. Some asynchronous signalssuch as a signal that terminates a process (<control><C>, for example)should be sent to all threads. kill(pid t pid, int signal) This function species the process (pid) to which a particular signal (signal) is to be delivered. Most multithreaded versions of UNIX allow a thread to specify which signals it will accept and which it will block. Therefore, in some cases, an asynchronous signal may be delivered only to those threads that are not blocking it. However, because signals need to be handled only once, a signal is typically delivered only to the rst thread found that is not blocking it. POSIX Pthreads provides the following function, which allows a signal to be delivered to a specied thread (tid): pthread kill(pthread t tid, int signal) Although Windows does not explicitly provide support for signals, it allows us to emulate them using asynchronous procedure calls (APCs). The APC facility enables a user thread to specify a function that is to be called when the user thread receives notication of a particular event. As indicated by its name, an APC is roughly equivalent to an asynchronous signal in UNIX"
Justify with an example how a turnstile is a queue structure containing threads blocked on a lock,"A turnstile is a queue structure containing threads blocked on a lock .For example, if one thread currently owns the lock for a synchronized object, all other threads trying to acquire the lock will block and enter the turnstile for that lock","Readerwriter locks are used to protect data that are accessed frequently but are usually accessed in a read-only manner. In these circumstances, readerwriter locks are more efcient than semaphores, because multiple threads can read data concurrently, whereas semaphores always serialize access to the data. Readerwriter locks are relatively expensive to implement, so again they are used only on long sections of code. Solaris uses turnstiles to order the list of threads waiting to acquire either an adaptive mutex or a readerwriter lock. A turnstile is a queue structure containing threads blocked on a lock. For example, if one thread currently owns the lock for a synchronized object, all other threads trying to acquire the lock will block and enter the turnstile for that lock. When the lock is released, the kernel selects a thread from the turnstile as the next owner of the lock. Each synchronized object with at least one thread blocked on the objects lock requires a separate turnstile. However, rather than associating a turnstile with each synchronized object, Solaris gives each kernel thread its own turnstile"
Justify with an example how operating systems also provide support for synchronization,"Operating systems also provide support for synchronization .For example, Windows, Linux, and Solaris provide mechanisms such as semaphores, mutex locks, spinlocks, and condition variables to control access to shared data","The operating system must provide the means to guard against timing errors, and several language constructs have been proposed to deal with these problems. Monitors provide a synchronization mechanism for sharing abstract data types. A condition variable provides a method by which a monitor function can block its execution until it is signaled to continue. Operating systems also provide support for synchronization. For example, Windows, Linux, and Solaris provide mechanisms such as semaphores, mutex locks, spinlocks, and condition variables to control access to shared data. The Pthreads API provides support for mutex locks and semaphores, as well as condition variables. Several alternative approaches focus on synchronization for multicore systems. One approach uses transactional memory, which may address synchronization issues using either software or hardware techniques. Another approach uses the compiler extensions offered by OpenMP. Finally, functional programming languages address synchronization issues by disallowing mutability"
Justify with an example how internally dened priorities use some measurable quantity or quantities to compute the priority of a process,"Internally dened priorities use some measurable quantity or quantities to compute the priority of a process .For example, time limits, memory requirements, the number of open les, and the ratio of average I/O burst to average CPU burst have been used in computing priorities","As an example, consider the following set of processes, assumed to have arrived at time 0 in the order P1 , P2 , , P5 , with the length of the CPU burst given in milliseconds: Process Priority P2 P4 2 5 1 5 Using priority scheduling, we would schedule these processes according to the following Gantt chart: 16 18 19 The average waiting time is 8.2 milliseconds. Priorities can be dened either internally or externally. Internally dened priorities use some measurable quantity or quantities to compute the priority of a process. For example, time limits, memory requirements, the number of open les, and the ratio of average I/O burst to average CPU burst have been used in computing priorities. External priorities are set by criteria outside the operating system, such as the importance of the process, the type and amount of funds being paid for computer use, the department sponsoring the work, and other, often political, factors. Priority scheduling can be either preemptive or nonpreemptive. When a process arrives at the ready queue, its priority is compared with the priority of the currently running process. A preemptive priority scheduling algorithm will preempt the CPU if the priority of the newly arrived process is higher than the priority of the currently running process. A nonpreemptive priority scheduling algorithm will simply put the new process at the head of the ready queue"
Justify with an example how each queue has its own scheduling algorithm,"Each queue has its own scheduling algorithm .For example, separate queues might be used for foreground and background processes","Another class of scheduling algorithms has been created for situations in which processes are easily classied into different groups. For example, a 12.0 average turnaround time time P2 P4 3 7 10.5 9.5 2 5 time quantum common division is made between foreground (interactive) processes and background (batch) processes. These two types of processes have different response-time requirements and so may have different scheduling needs. In addition, foreground processes may have priority (externally dened) over background processes. A multilevel queue scheduling algorithm partitions the ready queue into several separate queues (Figure 6.6). The processes are permanently assigned to one queue, generally based on some property of the process, such as memory size, process priority, or process type. Each queue has its own scheduling algorithm. For example, separate queues might be used for foreground and background processes. The foreground queue might be scheduled by an RR algorithm, while the background queue is scheduled by an FCFS algorithm. In addition, there must be scheduling among the queues, which is commonly implemented as xed-priority preemptive scheduling. For example, the foreground queue may have absolute priority over the background queue"
"Justify with an example how in addition, there must be scheduling among the queues, which is commonly implemented as xed-priority preemptive scheduling","In addition, there must be scheduling among the queues, which is commonly implemented as xed-priority preemptive scheduling .For example, the foreground queue may have absolute priority over the background queue","A multilevel queue scheduling algorithm partitions the ready queue into several separate queues (Figure 6.6). The processes are permanently assigned to one queue, generally based on some property of the process, such as memory size, process priority, or process type. Each queue has its own scheduling algorithm. For example, separate queues might be used for foreground and background processes. The foreground queue might be scheduled by an RR algorithm, while the background queue is scheduled by an FCFS algorithm. In addition, there must be scheduling among the queues, which is commonly implemented as xed-priority preemptive scheduling. For example, the foreground queue may have absolute priority over the background queue. Lets look at an example of a multilevel queue scheduling algorithm with ve queues, listed below in order of priority: 1. System processes 2. Interactive processes 3. Interactive editing processes 4. Batch processes 5. Student processes highest priority system processes interactive editing processes student processes lowest priority Each queue has absolute priority over lower-priority queues. No process in the batch queue, for example, could run unless the queues for system processes, interactive processes, and interactive editing processes were all empty. If an interactive editing process entered the ready queue while a batch process was running, the batch process would be preempted"
"Justify with an example how note that on some systems, only certain contention scope values are allowed","Note that on some systems, only certain contention scope values are allowed .For example, Linux and Mac OS X systems allow only PTHREAD SCOPE SYSTEM","The Pthread IPC provides two functions for gettingand settingthe contention scope policy: pthread attr setscope(pthread attr t *attr, int scope) pthread attr getscope(pthread attr t *attr, int *scope) The rst parameter for both functions contains a pointer to the attribute set for the thread. The second parameter for the pthread attr setscope() function is passed either the PTHREAD SCOPE SYSTEM or the PTHREAD SCOPE PROCESS value, indicating how the contention scope is to be set. In the case of pthread attr getscope(), this second parameter contains a pointer to an int value that is set to the current value of the contention scope. If an error occurs, each of these functions returns a nonzero value. In Figure 6.8, we illustrate a Pthread scheduling API. The program rst determines the existing contention scope and sets it to PTHREAD SCOPE SYSTEM. It then creates ve separate threads that will run using the SCS scheduling policy. Note that on some systems, only certain contention scope values are allowed. For example, Linux and Mac OS X systems allow only PTHREAD SCOPE SYSTEM. Multiple-Processor Scheduling Our discussion thus far has focused on the problems of scheduling the CPU in a system with a single processor. If multiple CPUs are available, load sharing becomes possible but scheduling problems become correspondingly more complex. Many possibilities have been tried; and as we saw with singleprocessor CPU scheduling, there is no one best solution"
Justify with an example how many systems provide both soft and hard afnity,"Many systems provide both soft and hard afnity .For example, Linux implements soft afnity, but it also provides the sched setaffinity() system call, which supports hard afnity","Processor afnity takes several forms. When an operating system has a policy of attempting to keep a process running on the same processorbut not guaranteeing that it will do sowe have a situation known as soft afnity. Here, the operating system will attempt to keep a process on a single processor, but it is possible for a process to migrate between processors. In contrast, some systems provide system calls that support hard afnity, thereby allowing a process to specify a subset of processors on which it may run. Many systems provide both soft and hard afnity. For example, Linux implements soft afnity, but it also provides the sched setaffinity() system call, which supports hard afnity. The main-memory architecture of a system can affect processor afnity issues. Figure 6.9 illustrates an architecture featuring non-uniform memory access (NUMA), in which a CPU has faster access to some parts of main memory than to other parts. Typically, this occurs in systems containing combined CPU and memory boards. The CPUs on a board can access the memory on that board faster than they can access memory on other boards in the system"
Justify with an example how the amount of the boost depends on what the thread was waiting for,"The amount of the boost depends on what the thread was waiting for .For example, a thread waiting for keyboard I/O would get a large increase, whereas a thread waiting for a disk operation would get a moderate one","When a threads time quantum runs out, that thread is interrupted. If the thread is in the variable-priority class, its priority is lowered. The priority is never lowered below the base priority, however. Lowering the priority tends to limit the CPU consumption of compute-bound threads. When a variablepriority thread is released from a wait operation, the dispatcher boosts the priority. The amount of the boost depends on what the thread was waiting for. For example, a thread waiting for keyboard I/O would get a large increase, whereas a thread waiting for a disk operation would get a moderate one. This strategy tends to give good response times to interactive threads that are using the mouse and windows. It also enables I/O-bound threads to keep the I/O devices busy while permitting compute-bound threads to use spare CPU cycles in the background. This strategy is used by several time-sharing operating systems, including UNIX. In addition, the window with which the user is currently interacting receives a priority boost to enhance its response time"
"Justify with an example how furthermore, over a set of examples, deterministic modeling may indicate trends that can then be analyzed and proved separately","Furthermore, over a set of examples, deterministic modeling may indicate trends that can then be analyzed and proved separately .For example, it can be shown that, for the environment described (all processes and their times available at time 0), the SJF policy will always result in the minimum waiting time","We can see that, in this case, the average waiting time obtained with the SJF policy is less than half that obtained with FCFS scheduling; the RR algorithm gives us an intermediate value. Deterministic modeling is simple and fast. It gives us exact numbers, allowing us to compare the algorithms. However, it requires exact numbers for input, and its answers apply only to those cases. The main uses of deterministic modeling are in describing scheduling algorithms and providing examples. In cases where we are running the same program over and over again and can measure the programs processing requirements exactly, we may be able to use deterministic modeling to select a scheduling algorithm. Furthermore, over a set of examples, deterministic modeling may indicate trends that can then be analyzed and proved separately. For example, it can be shown that, for the environment described (all processes and their times available at time 0), the SJF policy will always result in the minimum waiting time. On many systems, the processes that are run vary from day to day, so there is no static set of processes (or times) to use for deterministic modeling. What can be determined, however, is the distribution of CPU and I/O bursts. These distributions can be measured and then approximated or simply estimated. The result is a mathematical formula describing the probability of a particular CPU burst. Commonly, this distribution is exponential and is described by its mean"
Justify with an example how we can use Littles formula to compute one of the three variables if we know the other two,"We can use Littles formula to compute one of the three variables if we know the other two .For example, if we know that 7 processes arrive every second (on average) and that there are normally 14 processes in the queue, then we can compute the average waiting time per process as 2 seconds","This equation, known as Littles formula, is particularly useful because it is valid for any scheduling algorithm and arrival distribution. We can use Littles formula to compute one of the three variables if we know the other two. For example, if we know that 7 processes arrive every second (on average) and that there are normally 14 processes in the queue, then we can compute the average waiting time per process as 2 seconds. Queueing analysis can be useful in comparing scheduling algorithms, but it also has limitations. At the moment, the classes of algorithms and distributions that can be handled are fairly limited. The mathematics of complicated algorithms and distributions can be difcult to work with. Thus, arrival and service distributions are often dened in mathematically tractable but unrealisticways. It is also generally necessary to make a number of independent assumptions, which may not be accurate. As a result of these difculties, queueing models are often only approximations of real systems, and the accuracy of the computed results may be questionable"
"Justify with an example how after that, the process can request instances of resource type R j if and only if F(R j ) > F(Ri )","After that, the process can request instances of resource type R j if and only if F(R j ) > F(Ri ) .For example, using the function dened previously, a process that wants to use the tape drive and printer at the same time must rst request the tape drive and then request the printer","7.4 Deadlock Prevention Circular Wait The fourth and nal condition for deadlocks is the circular-wait condition. One way to ensure that this condition never holds is to impose a total ordering of all resource types and to require that each process requests resources in an increasing order of enumeration. To illustrate, we let R = {R1 , R2 , ..., Rm } be the set of resource types. We assign to each resource type a unique integer number, which allows us to compare two resources and to determine whether one precedes another in our ordering. Formally, we dene a one-to-one function F: R N, where N is the set of natural numbers. For example, if the set of resource types R includes tape drives, disk drives, and printers, then the function F might be dened as follows: F (tape drive) = 1 F (disk drive) = 5 F (printer) = 12 We can now consider the following protocol to prevent deadlocks: Each process can request resources only in an increasing order of enumeration. That is, a process can initially request any number of instances of a resource type say, Ri . After that, the process can request instances of resource type R j if and only if F(R j ) > F(Ri ). For example, using the function dened previously, a process that wants to use the tape drive and printer at the same time must rst request the tape drive and then request the printer. Alternatively, we can require that a process requesting an instance of resource type R j must have released any resources Ri such that F(Ri ) F(R j ). Note also that if several instances of the same resource type are needed, a single request for all of them must be issued. If these two protocols are used, then the circular-wait condition cannot hold. We can demonstrate this fact by assuming that a circular wait exists (proof by contradiction). Let the set of processes involved in the circular wait be {P0 , P1 , ..., Pn }, where Pi is waiting for a resource Ri , which is held by process Pi+1 . (Modulo arithmetic is used on the indexes, so that Pn is waiting for a resource Rn held by P0 .) Then, since process Pi+1 is holding resource Ri while requesting resource Ri+1 , we must have F(Ri ) < F(Ri+1 ) for all i. But this condition means that F(R0 ) < F(R1 ) < ... < F(Rn ) < F (R0 ). By transitivity, F(R0 ) < F(R0 ), which is impossible. Therefore, there can be no circular wait"
Justify with an example how also note that the function F should be dened according to the normal order of usage of the resources in a system,"Also note that the function F should be dened according to the normal order of usage of the resources in a system .For example, because /* thread one runs in this function */ void *do work one(void *param) { pthread mutex lock(&first mutex); pthread mutex lock(&second mutex); /** * Do some work */ pthread mutex unlock(&second mutex); pthread mutex unlock(&first mutex); } /* thread two runs in this function */ void *do work two(void *param) { pthread mutex lock(&second mutex); pthread mutex lock(&first mutex); /** * Do some work */ pthread mutex unlock(&first mutex); pthread mutex unlock(&second mutex); } pthread exit(0); the tape drive is usually needed before the printer, it would be reasonable to dene F(tape drive) < F(printer)","We can accomplish this scheme in an application program by developing an ordering among all synchronization objects in the system. All requests for synchronization objects must be made in increasing order. For example, if the lock ordering in the Pthread program shown in Figure 7.4 was F (first mutex) = 1 F (second mutex) = 5 then thread two could not request the locks out of order. Keep in mind that developing an ordering, or hierarchy, does not in itself prevent deadlock. It is up to application developers to write programs that follow the ordering. Also note that the function F should be dened according to the normal order of usage of the resources in a system. For example, because /* thread one runs in this function */ void *do work one(void *param) { pthread mutex lock(&first mutex); pthread mutex lock(&second mutex); /** * Do some work */ pthread mutex unlock(&second mutex); pthread mutex unlock(&first mutex); } /* thread two runs in this function */ void *do work two(void *param) { pthread mutex lock(&second mutex); pthread mutex lock(&first mutex); /** * Do some work */ pthread mutex unlock(&first mutex); pthread mutex unlock(&second mutex); } pthread exit(0); the tape drive is usually needed before the printer, it would be reasonable to dene F(tape drive) < F(printer). Although ensuring that resources are acquired in the proper order is the responsibility of application developers, certain software can be used to verify that locks are acquired in the proper order and to give appropriate warnings when locks are acquired out of order and deadlock is possible. One lock-order verier, which works on BSD versions of UNIX such as FreeBSD, is known as witness. Witness uses mutual-exclusion locks to protect critical sections, as described in Chapter 5. It works by dynamically maintaining the relationship of lock orders in a system. Lets use the program shown in Figure 7.4 as an example. Assume that thread one is the rst to acquire the locks and does so in the order (1) first mutex, (2) second mutex. Witness records the relationship that first mutex must be acquired before second mutex. If thread two later acquires the locks out of order, witness generates a warning message on the system console"
Justify with an example how an alternative method for avoiding deadlocks is to require additional information about how resources are to be requested,"An alternative method for avoiding deadlocks is to require additional information about how resources are to be requested .For example, in a system with one tape drive and one printer, the system might need to know that process P will request rst the tape drive and then the printer before releasing both resources, whereas process Q will request rst the printer and then the tape drive","Deadlock Avoidance Deadlock-prevention algorithms, as discussed in Section 7.4, prevent deadlocks by limiting how requests can be made. The limits ensure that at least one of the necessary conditions for deadlock cannot occur. Possible side effects of preventing deadlocks by this method, however, are low device utilization and reduced system throughput. An alternative method for avoiding deadlocks is to require additional information about how resources are to be requested. For example, in a system with one tape drive and one printer, the system might need to know that process P will request rst the tape drive and then the printer before releasing both resources, whereas process Q will request rst the printer and then the tape drive. With this knowledge of the complete sequence of requests and releases for each process, the system can decide for each request whether or not the process should wait in order to avoid a possible future deadlock. Each request requires that in making this decision the system consider the resources currently available, the resources currently allocated to each process, and the future requests and releases of each process. The various algorithms that use this approach differ in the amount and type of information required. The simplest and most useful model requires that each process declare the maximum number of resources of each type that it may need. Given this a priori information, it is possible to construct an algorithm that ensures that the system will never enter a deadlocked state. A deadlock-avoidance algorithm dynamically examines the resource-allocation state to ensure that a circular-wait condition can never exist. The resourceallocation state is dened by the number of available and allocated resources and the maximum demands of the processes. In the following sections, we explore two deadlock-avoidance algorithms"
Justify with an example how the base register holds the smallest legal physical memory address; the limit register species the size of the range,"The base register holds the smallest legal physical memory address; the limit register species the size of the range .For example, if the base register holds operating system process base limit process 300040 and the limit register is 120900, then the program can legally access all addresses from 300040 through 420939 (inclusive)","Separate per-process memory space protects the processes from each other and is fundamental to having multiple processes loaded in memory for concurrent execution. To separate memory spaces, we need the ability to determine the range of legal addresses that the process may access and to ensure that the process can access only these legal addresses. We can provide this protection by using two registers, usually a base and a limit, as illustrated in Figure 8.1. The base register holds the smallest legal physical memory address; the limit register species the size of the range. For example, if the base register holds operating system process base limit process 300040 and the limit register is 120900, then the program can legally access all addresses from 300040 through 420939 (inclusive). Protection of memory space is accomplished by having the CPU hardware compare every address generated in user mode with the registers. Any attempt by a program executing in user mode to access operating-system memory or other users memory results in a trap to the operating system, which treats the attempt as a fatal error (Figure 8.2). This scheme prevents a user program from (accidentally or deliberately) modifying the code or data structures of either the operating system or other users"
"Justify with an example how if you know at compile time where the process will reside in memory, then absolute code can be generated","If you know at compile time where the process will reside in memory, then absolute code can be generated .For example, if you know that a user process will reside starting at location R, then the generated compiler code will start at that location and extend up from there","Each binding is a mapping from one address space to another. Classically, the binding of instructions and data to memory addresses can be done at any step along the way: Compile time. If you know at compile time where the process will reside in memory, then absolute code can be generated. For example, if you know that a user process will reside starting at location R, then the generated compiler code will start at that location and extend up from there. If, at some later time, the starting location changes, then it will be necessary to recompile this code. The MS-DOS .COM-format programs are bound at compile time. Load time. If it is not known at compile time where the process will reside in memory, then the compiler must generate relocatable code. In this case, nal binding is delayed until load time. If the starting address changes, we need only reload the user code to incorporate this changed value"
Justify with an example how this rather simple idea has great functionality and wide ramications,"This rather simple idea has great functionality and wide ramications .For example, the logical address space is now totally separate from the physical address space, so a process can have a logical 64-bit address space even though the system has less than 264 bytes of physical memory","The basic method for implementing paging involves breaking physical memory into xed-sized blocks called frames and breaking logical memory into blocks of the same size called pages. When a process is to be executed, its pages are loaded into any available memory frames from their source (a le system or the backing store). The backing store is divided into xed-sized blocks that are the same size as the memory frames or clusters of multiple frames. This rather simple idea has great functionality and wide ramications. For example, the logical address space is now totally separate from the physical address space, so a process can have a logical 64-bit address space even though the system has less than 264 bytes of physical memory. The hardware support for paging is illustrated in Figure 8.10. Every address generated by the CPU is divided into two parts: a page number (p) and a page f logical address CPU physical address f f1111 d p f physical memory offset (d). The page number is used as an index into a page table. The page table contains the base address of each page in physical memory. This base address is combined with the page offset to dene the physical memory address that is sent to the memory unit. The paging model of memory is shown in Figure 8.11"
"Justify with an example how if the memory requirements of a process do not happen to coincide with page boundaries, the last frame allocated may not be completely full","If the memory requirements of a process do not happen to coincide with page boundaries, the last frame allocated may not be completely full .For example, if page size is 2,048 bytes, a process of 72,766 bytes will need 35 pages plus 1,086 bytes","Every logical address is bound by the paging hardware to some physical address. Using paging is similar to using a table of base (or relocation) registers, one for each frame of memory. When we use a paging scheme, we have no external fragmentation: any free frame can be allocated to a process that needs it. However, we may have some internal fragmentation. Notice that frames are allocated as units. If the memory requirements of a process do not happen to coincide with page boundaries, the last frame allocated may not be completely full. For example, if page size is 2,048 bytes, a process of 72,766 bytes will need 35 pages plus 1,086 bytes. It will be allocated 36 frames, resulting in internal fragmentation of 2,048 1,086 = 962 bytes. In the worst case, a process would need n pages plus 1 byte. It would be allocated n + 1 frames, resulting in internal fragmentation of almost an entire frame. If process size is independent of page size, we expect internal fragmentation to average one-half page per process. This consideration suggests that small page sizes are desirable. However, overhead is involved in each page-table entry, and this overhead is reduced as the size of the pages increases. Also, disk I/O is more efcient when the amount data being transferred is larger (Chapter 10). Generally, page sizes have grown over time as processes, data sets, and main memory have become larger. Today, pages typically are between 4 KB and 8 KB in size, and some systems support even larger page sizes. Some CPUs and kernels even support multiple page sizes. For instance, Solaris uses page sizes of 8 KB and 4 MB, depending on the data stored by the pages"
Justify with an example how each cache is populated with objects that are instantiations of the kernel data structure the cache represents,"Each cache is populated with objects that are instantiations of the kernel data structure the cache represents .For example, the cache representing semaphores stores instances of semaphore objects, the cache representing process descriptors stores instances of process descriptor objects, and so forth","The obvious drawback to the buddy system is that rounding up to the next highest power of 2 is very likely to cause fragmentation within allocated segments. For example, a 33-KB request can only be satised with a 64KB segment. In fact, we cannot guarantee that less than 50 percent of the allocated unit will be wasted due to internal fragmentation. In the following section, we explore a memory allocation scheme where no space is lost due to fragmentation. A second strategy for allocating kernel memory is known as slab allocation. A slab is made up of one or more physically contiguous pages. A cache consists of one or more slabs. There is a single cache for each unique kernel data structure for example, a separate cache for the data structure representing process descriptors, a separate cache for le objects, a separate cache for semaphores, and so forth. Each cache is populated with objects that are instantiations of the kernel data structure the cache represents. For example, the cache representing semaphores stores instances of semaphore objects, the cache representing process descriptors stores instances of process descriptor objects, and so forth. The relationship among slabs, caches, and objects is shown in Figure 9.27. The gure shows two kernel objects 3 KB in size and three objects 7 KB in size, each stored in a separate cache"
Justify with an example how the number of objects in the cache depends on the size of the associated slab,"The number of objects in the cache depends on the size of the associated slab .For example, a 12-KB slab (made up of three continguous 4-KB pages) could store six 2-KB objects","The relationship among slabs, caches, and objects is shown in Figure 9.27. The gure shows two kernel objects 3 KB in size and three objects 7 KB in size, each stored in a separate cache. kernel objects slabs 3-KB objects physically contiguous pages 7-KB objects The slab-allocation algorithm uses caches to store kernel objects. When a cache is created, a number of objectswhich are initially marked as free are allocated to the cache. The number of objects in the cache depends on the size of the associated slab. For example, a 12-KB slab (made up of three continguous 4-KB pages) could store six 2-KB objects. Initially, all objects in the cache are marked as free. When a new object for a kernel data structure is needed, the allocator can assign any free object from the cache to satisfy the request. The object assigned from the cache is marked as used. Lets consider a scenario in which the kernel requests memory from the slab allocator for an object representing a process descriptor. In Linux systems, a process descriptor is of the type struct task struct, which requires approximately 1.7 KB of memory. When the Linux kernel creates a new task, it requests the necessary memory for the struct task struct object from its cache. The cache will fulll the request using a struct task struct object that has already been allocated in a slab and is marked as free"
"Justify with an example how alternatively, an operating system may provide several different page sizes","Alternatively, an operating system may provide several different page sizes .For example, the UltraSPARC supports page sizes of 8 KB, 64 KB, 512 KB, and 4 MB","Related to the hit ratio is a similar metric: the TLB reach. The TLB reach refers to the amount of memory accessible from the TLB and is simply the number of entries multiplied by the page size. Ideally, the working set for a process is stored in the TLB. If it is not, the process will spend a considerable amount of time resolving memory references in the page table rather than the TLB. If we double the number of entries in the TLB, we double the TLB reach. However, for some memory-intensive applications, this may still prove insufcient for storing the working set. Another approach for increasing the TLB reach is to either increase the size of the page or provide multiple page sizes. If we increase the page size say, from 8 KB to 32 KB we quadruple the TLB reach. However, this may lead to an increase in fragmentation for some applications that do not require such a large page size. Alternatively, an operating system may provide several different page sizes. For example, the UltraSPARC supports page sizes of 8 KB, 64 KB, 512 KB, and 4 MB. Of these available pages sizes, Solaris uses both 8-KB and 4-MB page sizes. And with a 64-entry TLB, the TLB reach for Solaris ranges from 512 KB with 8-KB pages to 256 MB with 4-MB pages. For the majority of applications, the 8-KB page size is sufcient, although Solaris maps the rst 4 MB of kernel code and data with two 4-MB pages. Solaris also allows applications such as databasesto take advantage of the large 4-MB page size. Providing support for multiple page sizes requires the operating system not hardware to manage the TLB. For example, one of the elds in a TLB entry must indicate the size of the page frame corresponding to the TLB entry"
Justify with an example how careful selection of data structures and programming structures can increase locality and hence lower the page-fault rate and the number of pages in the working set,"Careful selection of data structures and programming structures can increase locality and hence lower the page-fault rate and the number of pages in the working set .For example, a stack has good locality, since access is always made to the top","In contrast, suppose we change the code to int i, j; int[128][128] data; for (i = 0; i < 128; i++) for (j = 0; j < 128; j++) data[i][j] = 0; This code zeros all the words on one page before starting the next page, reducing the number of page faults to 128. Careful selection of data structures and programming structures can increase locality and hence lower the page-fault rate and the number of pages in the working set. For example, a stack has good locality, since access is always made to the top. A hash table, in contrast, is designed to scatter references, producing bad locality. Of course, locality of reference is just one measure of the efciency of the use of a data structure. Other heavily weighted factors include search speed, total number of memory references, and total number of pages touched. At a later stage, the compiler and loader can have a signicant effect on paging. Separating code and data and generating reentrant code means that code pages can be read-only and hence will never be modied. Clean pages do not have to be paged out to be replaced. The loader can avoid placing routines across page boundaries, keeping each routine completely in one page"
Justify with an example how the idea of ECC can be used directly in disk arrays via striping of bytes across disks,"The idea of ECC can be used directly in disk arrays via striping of bytes across disks .For example, the rst bit of each byte can be stored in disk 1, the second bit in disk 2, and so on until the eighth bit is stored in disk 8; the error-correction bits are stored in further disks","RAID level 2. RAID level 2 is also known as memory-style error-correctingcode (ECC) organization. Memory systems have long detected certain errors by using parity bits. Each byte in a memory system may have a parity bit associated with it that records whether the number of bits in the byte set to 1 is even (parity = 0) or odd (parity = 1). If one of the bits in the byte is damaged (either a 1 becomes a 0, or a 0 becomes a 1), the parity of the byte changes and thus does not match the stored parity. Similarly, if the stored parity bit is damaged, it does not match the computed parity. Thus, all single-bit errors are detected by the memory system. Error-correcting schemes store two or more extra bits and can reconstruct the data if a single bit is damaged. The idea of ECC can be used directly in disk arrays via striping of bytes across disks. For example, the rst bit of each byte can be stored in disk 1, the second bit in disk 2, and so on until the eighth bit is stored in disk 8; the error-correction bits are stored in further disks. This scheme is shown in Figure 10.11(c), where the disks labeled P store the errorcorrection bits. If one of the disks fails, the remaining bits of the byte and the associated error-correction bits can be read from other disks and used to reconstruct the damaged data. Note that RAID level 2 requires only three disks overhead for four disks of data, unlike RAID level 1, which requires four disks overhead. RAID level 3. RAID level 3, or bit-interleaved parity organization, improves on level 2 by taking into account the fact that, unlike memory systems, disk controllers can detect whether a sector has been read correctly, so a single parity bit can be used for error correction as well as for detection. The idea is as follows: If one of the sectors is damaged, we know exactly which sector it is, and we can gure out whether any bit in the sector is a 1 or a 0 by computing the parity of the corresponding bits from sectors in the other disks. If the parity of the remaining bits is equal to the stored parity, the missing bit is 0; otherwise, it is 1. RAID level 3 is as good as level 2 but is less expensive in the number of extra disks required (it has only a one-disk overhead), so level 2 is not used in practice. Level 3 is shown pictorially in RAID level 3 has two advantages over level 1. First, the storage overhead is reduced because only one parity disk is needed for several regular disks, whereas one mirror disk is needed for every disk in level 1. Second, since reads and writes of a byte are spread out over multiple disks with N-way striping of data, the transfer rate for reading or writing a single block is N times as fast as with RAID level 1. On the negative side, RAID level 3 supports fewer I/Os per second, since every disk has to participate in every I/O request"
Justify with an example how rAID system designers and administrators of storage have to make several other decisions as well,"RAID system designers and administrators of storage have to make several other decisions as well .For example, how many disks should be in a given RAID set? How many bits should be protected by each parity bit? If more disks are in an array, data-transfer rates are higher, but the system is more expensive","RAID level 0 is used in high-performance applications where data loss is not critical. RAID level 1 is popular for applications that require high reliability with fast recovery. RAID 0 + 1 and 1 + 0 are used where both performance and reliability are importantfor example, for small databases. Due to RAID 1s high space overhead, RAID 5 is often preferred for storing large volumes of data. Level 6 is not supported currently by many RAID implementations, but it should offer better reliability than level 5. RAID system designers and administrators of storage have to make several other decisions as well. For example, how many disks should be in a given RAID set? How many bits should be protected by each parity bit? If more disks are in an array, data-transfer rates are higher, but the system is more expensive. If more bits are protected by a parity bit, the space overhead due to parity bits is lower, but the chance that a second disk will fail before the rst failed disk is repaired is greater, and that will result in data loss"
Justify with an example how application programs also use extensions to indicate le types in which they are interested,"Application programs also use extensions to indicate le types in which they are interested .For example, Java compilers expect source les to have a .java extension, and the Microsoft Word word processor expects its les to end with a .doc or .docx extension","A common technique for implementing le types is to include the type as part of the le name. The name is split into two partsa name and an extension, usually separated by a period (Figure 11.3). In this way, the user and the operating system can tell from the name alone what the type of a le is. Most operating systems allow users to specify a le name as a sequence of characters followed by a period and terminated by an extension made up of additional characters. Examples include resume.docx, server.c, and ReaderThread.cpp. The system uses the extension to indicate the type of the le and the type of operations that can be done on that le. Only a le with a .com, .exe, or .sh extension can be executed, for instance. The .com and .exe les are two forms of binary executable les, whereas the .sh le is a shell script containing, in ASCII format, commands to the operating system. Application programs also use extensions to indicate le types in which they are interested. For example, Java compilers expect source les to have a .java extension, and the Microsoft Word word processor expects its les to end with a .doc or .docx extension. These extensions are not always required, so a user may specify a le without the extension (to save typing), and the application will look for a le with the given name and the extension it expects. Because these extensions are not supported by the operating system, they can be considered hints to the applications that operate on them"
"Justify with an example how the primary index le contains pointers to secondary index les, which point to the actual data items","The primary index le contains pointers to secondary index les, which point to the actual data items .For example, IBMs indexed sequential-access method (ISAM) uses a small master index that points to disk blocks of a secondary index","With large les, the index le itself may become too large to be kept in memory. One solution is to create an index for the index le. The primary index le contains pointers to secondary index les, which point to the actual data items. For example, IBMs indexed sequential-access method (ISAM) uses a small master index that points to disk blocks of a secondary index. The secondary index blocks point to the actual le blocks. The le is kept sorted on a dened key. To nd a particular item, we rst make a binary search of the master index, which provides the block number of the secondary index. This block is read in, and again a binary search is used to nd the block containing the desired record. Finally, this block is searched sequentially. In this way, any record can be located from its key by at most two direct-access reads. Figure 11.6 shows a similar situation as implemented by VMS index and relative les. 11.3 Directory and Disk Structure Next, we consider how to store les. Certainly, no general-purpose computer stores just one le. There are typically thousands, millions, even billions of les within a computer. Files are stored on random-access storage devices, including hard disks, optical disks, and solid-state (memory-based) disks"
"Justify with an example how with a tree-structured directory system, users can be allowed to access, in addition to their files, the files of other users","With a tree-structured directory system, users can be allowed to access, in addition to their files, the files of other users .For example, user B can access a file of user A by specifying its path names","The latter policy is more convenient, but it is also more dangerous, because an entire directory structure can be removed with one command. If that command is issued in error, a large number of les and directories will need to be restored (assuming a backup exists). With a tree-structured directory system, users can be allowed to access, in addition to their les, the les of other users. For example, user B can access a le of user A by specifying its path names. User B can specify either an absolute or a relative path name. Alternatively, user B can change her current directory to be user As directory and access the le by its le names. 11.3 Directory and Disk Structure Acyclic-Graph Directories Consider two programmers who are working on a joint project. The les associated with that project can be stored in a subdirectory, separating them from other projects and les of the two programmers. But since both programmers are equally responsible for the project, both want the subdirectory to be in their own directories. In this situation, the common subdirectory should be shared"
"Justify with an example how even in the case of a single user, the users file organization may require that some file be placed in different subdirectories","Even in the case of a single user, the users file organization may require that some file be placed in different subdirectories .For example, a program written for a particular project should be both in the directory of all programs and in the directory for that project","When people are working as a team, all the les they want to share can be put into one directory. The UFD of each team member will contain this directory of shared les as a subdirectory. Even in the case of a single user, the users le organization may require that some le be placed in different subdirectories. For example, a program written for a particular project should be both in the directory of all programs and in the directory for that project. Shared les and subdirectories can be implemented in several ways. A common way, exemplied by many of the UNIX systems, is to create a new directory entry called a link. A link is effectively a pointer to another le list w spell list rade or subdirectory. For example, a link may be implemented as an absolute or a relative path name. When a reference to a le is made, we search the directory. If the directory entry is marked as a link, then the name of the real le is included in the link information. We resolve the link by using that path name to locate the real le. Links are easily identied by their format in the directory entry (or by having a special type on systems that support types) and are effectively indirect pointers. The operating system ignores these links when traversing directory trees to preserve the acyclic structure of the system"
Justify with an example how systems impose semantics to clarify functionality,"Systems impose semantics to clarify functionality .For example, a system may disallow a mount over a directory that contains files; or it may make the mounted file system available at that directory and obscure the directorys existing files until the le system is unmounted, terminating the use of the file system and allowing access to the original files in that directory","unmounted volume residing on /device/dsk. At this point, only the les on the existing le system can be accessed. Figure 11.15 shows the effects of mounting the volume residing on /device/dsk over /users. If the volume is unmounted, the le system is restored to the situation depicted in Figure 11.14. Systems impose semantics to clarify functionality. For example, a system may disallow a mount over a directory that contains les; or it may make the mounted le system available at that directory and obscure the directorys existing les until the le system is unmounted, terminating the use of the le system and allowing access to the original les in that directory. As another example, a system may allow the same le system to be mounted repeatedly, at different mount points; or it may only allow one mount per le system. users sue doc Consider the actions of the Mac OS X operating system. Whenever the system encounters a disk for the rst time (either at boot time or while the system is running), the Mac OS X operating system searches for a le system on the device. If it nds one, it automatically mounts the le system under the /Volumes directory, adding a folder icon labeled with the name of the le system (as stored in the device directory). The user is then able to click on the icon and thus display the newly mounted le system"
Justify with an example how the group attribute denes a subset of users who can share access to the le,"The group attribute denes a subset of users who can share access to the le .For example, the owner of a le on a UNIX system can issue all operations on a le, while members of the les group can execute one subset of those operations, and all other users can execute another subset of operations","To implement sharing and protection, the system must maintain more le and directory attributes than are needed on a single-user system. Although many approaches have been taken to meet this requirement, most systems have evolved to use the concepts of le (or directory) owner (or user) and group. The owner is the user who can change attributes and grant access and who has the most control over the le. The group attribute denes a subset of users who can share access to the le. For example, the owner of a le on a UNIX system can issue all operations on a le, while members of the les group can execute one subset of those operations, and all other users can execute another subset of operations. Exactly which operations can be executed by group members and other users is denable by the les owner. More details on permission attributes are included in the next section. The owner and group IDs of a given le (or directory) are stored with the other le attributes. When a user requests an operation on a le, the user ID can be compared with the owner attribute to determine if the requesting user is the owner of the le. Likewise, the group IDs can be compared. The result indicates which permissions are applicable. The system then applies those permissions to the requested operation and allows or denies it"
"Justify with an example how while this stateless approach makes NFS resilient and rather easy to implement, it also makes it unsecure","While this stateless approach makes NFS resilient and rather easy to implement, it also makes it unsecure .For example, forged read or write requests could be allowed by an NFS server","To implement this kind of recovery from failure, some kind of state information may be maintained on both the client and the server. If both server and client maintain knowledge of their current activities and open les, then they can seamlessly recover from a failure. In the situation where the server crashes but must recognize that it has remotely mounted exported le systems and opened les, NFS takes a simple approach, implementing a stateless DFS. In essence, it assumes that a client request for a le read or write would not have occurred unless the le system had been remotely mounted and the le had been previously open. The NFS protocol carries all the information needed to locate the appropriate le and perform the requested operation. Similarly, it does not track which clients have the exported volumes mounted, again assuming that if a request comes in, it must be legitimate. While this stateless approach makes NFS resilient and rather easy to implement, it also makes it unsecure. For example, forged read or write requests could be allowed by an NFS server. These issues are addressed in the industry standard NFS Version 4, in which NFS is made stateful to improve its security, performance, and functionality. Consistency semantics represent an important criterion for evaluating any le system that supports le sharing. These semantics specify how multiple users of a system are to access a shared le simultaneously. In particular, they specify when modications of data by one user will be observable by other users. These semantics are typically implemented as code with the le system"
"Justify with an example how however, the complex algorithms of that chapter tend not to be implemented in the case of le I/O because of the great latencies and slow transfer rates of disks and networks","However, the complex algorithms of that chapter tend not to be implemented in the case of le I/O because of the great latencies and slow transfer rates of disks and networks .For example, performing an atomic transaction to a remote disk could involve several network communications, several disk reads and writes, or both","Consistency semantics represent an important criterion for evaluating any le system that supports le sharing. These semantics specify how multiple users of a system are to access a shared le simultaneously. In particular, they specify when modications of data by one user will be observable by other users. These semantics are typically implemented as code with the le system. Consistency semantics are directly related to the process synchronization algorithms of Chapter 5. However, the complex algorithms of that chapter tend not to be implemented in the case of le I/O because of the great latencies and slow transfer rates of disks and networks. For example, performing an atomic transaction to a remote disk could involve several network communications, several disk reads and writes, or both. Systems that attempt such a full set of functionalities tend to perform poorly. A successful implementation of complex sharing semantics can be found in the Andrew le system. For the following discussion, we assume that a series of le accesses (that is, reads and writes) attempted by a user to the same le is always enclosed between the open() and close() operations. The series of accesses between the open() and close() operations makes up a le session. To illustrate the concept, we sketch several prominent examples of consistency semantics"
"Justify with an example how the most common recent approach is to combine access-control lists with the more general (and easier to implement) owner, group, and universe accesscontrol scheme just described","The most common recent approach is to combine access-control lists with the more general (and easier to implement) owner, group, and universe accesscontrol scheme just described .For example, Solaris uses the three categories of access by default but allows access-control lists to be added to specic les and directories when more ne-grained access control is desired","Universe. All other users in the system constitute the universe. The most common recent approach is to combine access-control lists with the more general (and easier to implement) owner, group, and universe accesscontrol scheme just described. For example, Solaris uses the three categories of access by default but allows access-control lists to be added to specic les and directories when more ne-grained access control is desired. To illustrate, consider a person, Sara, who is writing a new book. She has hired three graduate students (Jim, Dawn, and Jill) to help with the project. The text of the book is kept in a le named book.tex. The protection associated with this le is as follows: Sara should be able to invoke all operations on the le"
"Justify with an example how many le systems are in use today, and most operating systems support more than one","Many le systems are in use today, and most operating systems support more than one .For example, most CD-ROMs are written in the ISO 9660 format, a standard format agreed on by CD-ROM manufacturers","When a layered structure is used for le-system implementation, duplication of code is minimized. The I/O control and sometimes the basic le-system code can be used by multiple le systems. Each le system can then have its own logical le-system and le-organization modules. Unfortunately, layering can introduce more operating-system overhead, which may result in decreased performance. The use of layering, including the decision about how many layers to use and what each layer should do, is a major challenge in designing new systems. Many le systems are in use today, and most operating systems support more than one. For example, most CD-ROMs are written in the ISO 9660 format, a standard format agreed on by CD-ROM manufacturers. In addition to removable-media le systems, each operating system has one or more diskbased le systems. UNIX uses the UNIX le system (UFS), which is based on the Berkeley Fast File System (FFS). Windows supports disk le-system formats of FAT, FAT32, and NTFS (or Windows NT File System), as well as CD-ROM and DVD le-system formats. Although Linux supports over forty different le systems, the standard Linux le system is known as the extended le system, with the most common versions being ext3 and ext4. There are also distributed le systems in which a le system on a server is mounted by one or more client computers across a network. File-system research continues to be an active area of operating-system design and implementation. Google created its own le system to meet the companys specic storage and retrieval needs, which include highperformance access from many clients across a very large number of disks"
"Justify with an example how to allow for large les, we can link together several index blocks","To allow for large les, we can link together several index blocks .For example, an index block might contain a small header giving the name of the le and a set of the rst 100 disk-block addresses","Indexed allocation supports direct access, without suffering from external fragmentation, because any free block on the disk can satisfy a request for more space. Indexed allocation does suffer from wasted space, however. The pointer directory 3 7 13 17 21 25 29 file jeep index block 10 1 1 1 12.4 Allocation Methods overhead of the index block is generally greater than the pointer overhead of linked allocation. Consider a common case in which we have a le of only one or two blocks. With linked allocation, we lose the space of only one pointer per block. With indexed allocation, an entire index block must be allocated, even if only one or two pointers will be non-null. This point raises the question of how large the index block should be. Every le must have an index block, so we want the index block to be as small as possible. If the index block is too small, however, it will not be able to hold enough pointers for a large le, and a mechanism will have to be available to deal with this issue. Mechanisms for this purpose include the following: Linked scheme. An index block is normally one disk block. Thus, it can be read and written directly by itself. To allow for large les, we can link together several index blocks. For example, an index block might contain a small header giving the name of the le and a set of the rst 100 disk-block addresses. The next address (the last word in the index block) is null (for a small le) or is a pointer to another index block (for a large le). Multilevel index. A variant of linked representation uses a rst-level index block to point to a set of second-level index blocks, which in turn point to the le blocks. To access a block, the operating system uses the rst-level index to nd a second-level index block and then uses that block to nd the desired data block. This approach could be continued to a third or fourth level, depending on the desired maximum le size. With 4,096-byte blocks, we could store 1,024 four-byte pointers in an index block. Two levels of indexes allow 1,048,576 data blocks and a le size of up to 4 GB"
Justify with an example how operating systems frequently include a ag in the open system call to allow a process to request that writes be performed synchronously,"Operating systems frequently include a ag in the open system call to allow a process to request that writes be performed synchronously .For example, databases use this feature for atomic transactions, to assure that data reach stable storage in the required order","Another issue that can affect the performance of I/O is whether writes to the le system occur synchronously or asynchronously. Synchronous writes occur in the order in which the disk subsystem receives them, and the writes are not buffered. Thus, the calling routine must wait for the data to reach the disk drive before it can proceed. In an asynchronous write, the data are stored in the cache, and control returns to the caller. Most writes are asynchronous. However, metadata writes, among others, can be synchronous. Operating systems frequently include a ag in the open system call to allow a process to request that writes be performed synchronously. For example, databases use this feature for atomic transactions, to assure that data reach stable storage in the required order. Some systems optimize their page cache by using different replacement algorithms, depending on the access type of the le. A le being read or written sequentially should not have its pages replaced in LRU order, because the most recently used page will be used last, or perhaps never again. Instead, sequential access can be optimized by techniques known as free-behind and read-ahead. Free-behind removes a page from the buffer as soon as the next page is requested. The previous pages are not likely to be used again and waste buffer space. With read-ahead, a requested page and several subsequent pages are read and cached. These pages are likely to be requested after the current page is processed. Retrieving these data from the disk in one transfer and caching them saves a considerable amount of time. One might think that a track cache on the controller would eliminate the need for read-ahead on a multiprogrammed system. However, because of the high latency and overhead involved in making many small transfers from the track cache to main memory, performing a read-ahead remains benecial"
Justify with an example how vectored I/O allows one system call to perform multiple I/Ooperations involving multiple locations,"vectored I/O allows one system call to perform multiple I/Ooperations involving multiple locations .For example, the UNIXreadv system call accepts a vector of multiple buffers and either reads from a source to that vector or writes from that vector to a destination","It species desired reads for several devices in one system call and returns as soon as any one of them completes. Some operating systems provide another major variation of I/O via their applications interfaces. vectored I/O allows one system call to perform multiple I/Ooperations involving multiple locations. For example, the UNIXreadv system call accepts a vector of multiple buffers and either reads from a source to that vector or writes from that vector to a destination. The same transfer could be caused by several individual invocations of system calls, but this scatter gather method is useful for a variety of reasons. Multiple separate buffers can have their contents transferred via one system call, avoiding context-switching and system-call overhead. Without vectored I/O, the data might rst need to be transferred to a larger buffer in the right order and then transmitted, which is inefcient. In addition, some versions of scattergather provide atomicity, assuring that all the I/O is done without interruption (and avoiding corruption of data if other threads are also performing I/Oinvolving those buffers). When possible, programmers make use of scattergather I/O features to increase throughput and decrease system overhead"
"Justify with an example how the rst part of an MS-DOS le name, preceding the colon, is a string that identies a specic hardware device","The rst part of an MS-DOS le name, preceding the colon, is a string that identies a specic hardware device .For example, C: is the rst part of every le name on the primary hard disk","Consider, for example, reading a le from disk. The application refers to the data by a le name. Within a disk, the le system maps from the le name through the le-system directories to obtain the space allocation of the le. For instance, in MS-DOS, the name maps to a number that indicates an entry in the le-access table, and that table entry tells which disk blocks are allocated to the le. In UNIX, the name maps to an inode number, and the corresponding inode contains the space-allocation information. But how is the connection made from the le name to the disk controller (the hardware port address or the memory-mapped controller registers)? One method is that used by MS-DOS, a relatively simple operating system. The rst part of an MS-DOS le name, preceding the colon, is a string that identies a specic hardware device. For example, C: is the rst part of every le name on the primary hard disk. The fact that C: represents the primary hard disk is built into the operating system; C: is mapped to a specic port address through a device table. Because of the colon separator, the device name space is separate from the le-system name space. This separation makes it easy for the operating system to associate extra functionality with each device. For instance, it is easy to invoke spooling on any les written to the printer. If, instead, the device name space is incorporated in the regular le-system name space, as it is in UNIX, the normal le-system name services are provided automatically. If the le system provides ownership and access control to all le names, then devices have owners and access control. Since les are stored on devices, such an interface provides access to the I/O system at two levels"
Justify with an example how modules may be used by different streams and hence by different devices,"Modules may be used by different streams and hence by different devices .For example, a networking module may be used by both an Ethernet network card and a 802.11 wireless network card","As mentioned, the driver end like the stream head and moduleshas a read and write queue. However, the driver end must respond to interrupts, such as one triggered when a frame is ready to be read from a network. Unlike the stream head, which may block if it is unable to copy a message to the next queue in line, the driver end must handle all incoming data. Drivers must support ow control as well. However, if a devices buffer is full, the device typically resorts to dropping incoming messages. Consider a network card whose input buffer is full. The network card must simply drop further messages until there is enough buffer space to store incoming messages. The benet of using STREAMS is that it provides a framework for a modular and incremental approach to writing device drivers and network protocols. Modules may be used by different streams and hence by different devices. For example, a networking module may be used by both an Ethernet network card and a 802.11 wireless network card. Furthermore, rather than treating character-device I/O as an unstructured byte stream, STREAMS allows support for message boundaries and control information when communicating between modules. Most UNIX variants support STREAMS, and it is the preferred method for writing protocols and device drivers. For example, System V UNIX and Solaris implement the socket mechanism using STREAMS. 13.7 Performance I/O is a major factor in system performance. It places heavy demands on the CPU to execute device-driver code and to schedule processes fairly and efciently as they block and unblock. The resulting context switches stress the CPU and its hardware caches. I/O also exposes any inefciencies in the interrupt-handling mechanisms in the kernel. In addition, I/O loads down the memory bus during data copies between controllers and physical memory and again during copies between kernel buffers and application data space. Coping gracefully with all these demands is one of the major concerns of a computer architect"
"Justify with an example how most UNIX variants support STREAMS, and it is the preferred method for writing protocols and device drivers","Most UNIX variants support STREAMS, and it is the preferred method for writing protocols and device drivers .For example, System V UNIX and Solaris implement the socket mechanism using STREAMS. 13.7 Performance I/O is a major factor in system performance","As mentioned, the driver end like the stream head and moduleshas a read and write queue. However, the driver end must respond to interrupts, such as one triggered when a frame is ready to be read from a network. Unlike the stream head, which may block if it is unable to copy a message to the next queue in line, the driver end must handle all incoming data. Drivers must support ow control as well. However, if a devices buffer is full, the device typically resorts to dropping incoming messages. Consider a network card whose input buffer is full. The network card must simply drop further messages until there is enough buffer space to store incoming messages. The benet of using STREAMS is that it provides a framework for a modular and incremental approach to writing device drivers and network protocols. Modules may be used by different streams and hence by different devices. For example, a networking module may be used by both an Ethernet network card and a 802.11 wireless network card. Furthermore, rather than treating character-device I/O as an unstructured byte stream, STREAMS allows support for message boundaries and control information when communicating between modules. Most UNIX variants support STREAMS, and it is the preferred method for writing protocols and device drivers. For example, System V UNIX and Solaris implement the socket mechanism using STREAMS. 13.7 Performance I/O is a major factor in system performance. It places heavy demands on the CPU to execute device-driver code and to schedule processes fairly and efciently as they block and unblock. The resulting context switches stress the CPU and its hardware caches. I/O also exposes any inefciencies in the interrupt-handling mechanisms in the kernel. In addition, I/O loads down the memory bus during data copies between controllers and physical memory and again during copies between kernel buffers and application data space. Coping gracefully with all these demands is one of the major concerns of a computer architect"
"Justify with an example how a domain is a collection of access rights, each of which is an ordered pair <object-name, rights-set>","A domain is a collection of access rights, each of which is an ordered pair <object-name, rights-set> .For example, if domain D has the access right <file F, {read,write}>, then a process executing in domain D can both read and write le F","For example, when process p invokes procedure A(), the procedure should be allowed to access only its own variables and the formal parameters passed to it; it should not be able to access all the variables of process p. Similarly, consider the case in which process p invokes a compiler to compile a particular le. The compiler should not be able to access les arbitrarily but should have access only to a well-dened subset of les (such as the source le, listing le, and so on) related to the le to be compiled. Conversely, the compiler may have private les used for accounting or optimization purposes that process p should not be able to access. The need-to-know principle is similar to the principle of least privilege discussed in Section 14.2 in that the goals of protection are to minimize the risks of possible security violations. To facilitate the scheme just described, a process operates within a protection domain, which species the resources that the process may access. Each domain denes a set of objects and the types of operations that may be invoked on each object. The ability to execute an operation on an object is an access right. A domain is a collection of access rights, each of which is an ordered pair <object-name, rights-set>. For example, if domain D has the access right <file F, {read,write}>, then a process executing in domain D can both read and write le F. It cannot, however, perform any other operation on that object. Domains may share access rights. For example, in Figure 14.1, we have three domains: D1 , D2 , and D3 . The access right <O4 , {print}> is shared by D2 and D3 , implying that a process executing in either of these two domains can print object O4 . Note that a process must be executing in domain D1 to read and write object O1 , while only processes in domain D3 may execute object O1"
Justify with an example how) A congurable policy le determines the permissions granted to the domain (and its classes),") A congurable policy le determines the permissions granted to the domain (and its classes) .For example, classes loaded from a trusted server might be placed in a protection domain that allows them to access les in the users home directory, whereas classes loaded from an untrusted server might have no le access permissions at all. It can be complicated for the JVM to determine what class is responsible for a request to access a protected resource","Because of these capabilities, protection is a paramount concern. Classes running in the same JVM may be from different sources and may not be equally trusted. As a result, enforcing protection at the granularity of the JVM process is insufcient. Intuitively, whether a request to open a le should be allowed will generally depend on which class has requested the open. The operating system lacks this knowledge. Thus, such protection decisions are handled within the JVM. When the JVM loads a class, it assigns the class to a protection domain that gives the permissions of that class. The protection domain to which the class is assigned depends on the URL from which the class was loaded and any digital signatures on the class le. (Digital signatures are covered in Section 15.4.1.3.) A congurable policy le determines the permissions granted to the domain (and its classes). For example, classes loaded from a trusted server might be placed in a protection domain that allows them to access les in the users home directory, whereas classes loaded from an untrusted server might have no le access permissions at all. It can be complicated for the JVM to determine what class is responsible for a request to access a protected resource. Accesses are often performed indirectly, through system libraries or other classes. For example, consider a class that is not allowed to open network connections. It could call a system library to request the load of the contents of a URL. The JVM must decide whether or not to open a network connection for this request. But which class should be used to determine if the connection should be allowed, the application or the system library? The philosophy adopted in Java is to require the library class to explicitly permit a network connection. More generally, in order to access a protected resource, some method in the calling sequence that resulted in the request must explicitly assert the privilege to access the resource. By doing so, this method takes responsibility for the request. Presumably, it will also perform whatever checks are necessary to ensure the safety of the request. Of course, not every method is allowed to assert a privilege; a method can assert a privilege only if its class is in a protection domain that is itself allowed to exercise the privilege"
"Justify with an example how this is the foundation of Java protection, since it enables a class to effectively encapsulate and protect its data and methods from other classes loaded in the same JVM","This is the foundation of Java protection, since it enables a class to effectively encapsulate and protect its data and methods from other classes loaded in the same JVM .For example, a variable can be dened as private so that only the class that contains it can access it or protected so that it can be accessed only by the class that contains it, subclasses of that class, or classes in the same package","More generally, Javas load-time and run-time checks enforce type safety of Java classes. Type safety ensures that classes cannot treat integers as pointers, write past the end of an array, or otherwise access memory in arbitrary ways. Rather, a program can access an object only via the methods dened on that object by its class. This is the foundation of Java protection, since it enables a class to effectively encapsulate and protect its data and methods from other classes loaded in the same JVM. For example, a variable can be dened as private so that only the class that contains it can access it or protected so that it can be accessed only by the class that contains it, subclasses of that class, or classes in the same package. Type safety ensures that these restrictions can be enforced. 14.10 Summary Computer systems contain many objects, and they need to be protected from misuse. Objects may be hardware (such as memory, CPU time, and I/O devices) or software (such as les, programs, and semaphores). An access right is permission to perform an operation on an object. A domain is a set of access rights. Processes execute in domains and may use any of the access rights in the domain to access and manipulate objects. During its lifetime, a process may be either bound to a protection domain or allowed to switch from one domain to another"
Justify with an example how language-based protection provides ner-grained arbitration of requests and privileges than the operating system is able to provide,"Language-based protection provides ner-grained arbitration of requests and privileges than the operating system is able to provide .For example, a single Java JVM can run several threads, each in a different protection class","Real systems are much more limited than the general model and tend to provide protection only for les. UNIX is representative, providing read, write, and execution protection separately for the owner, group, and general public for each le. MULTICS uses a ring structure in addition to le access. Hydra, the Cambridge CAP system, and Mach are capability systems that extend protection to user-dened software objects. Solaris 10 implements the principle of least privilege via role-based access control, a form of the access matrix. Language-based protection provides ner-grained arbitration of requests and privileges than the operating system is able to provide. For example, a single Java JVM can run several threads, each in a different protection class. It enforces the resource requests through sophisticated stack inspection and via the type safety of the language. Practice Exercises 14.2 A Burroughs B7000/B6000 MCP le can be tagged as sensitive data"
"Justify with an example how in fact, even most nonprogram security events have as their goal causing a program threat","In fact, even most nonprogram security events have as their goal causing a program threat .For example, while it is useful to log in to a system without authorization, it is quite a lot more useful to leave behind a back-door daemon that provides information or allows easy access even if the original exploit is blocked","In the remainder of this chapter, we address security at the network and operating-system levels. Security at the physical and human levels, although important, is for the most part beyond the scope of this text. Security within the operating system and between operating systems is implemented in several ways, ranging from passwords for authentication through guarding against viruses to detecting intrusions. We start with an exploration of security threats. 15.2 Program Threats Processes, along with the kernel, are the only means of accomplishing work on a computer. Therefore, writing a program that creates a breach of security, or causing a normal process to change its behavior and create a breach, is a common goal of crackers. In fact, even most nonprogram security events have as their goal causing a program threat. For example, while it is useful to log in to a system without authorization, it is quite a lot more useful to leave behind a back-door daemon that provides information or allows easy access even if the original exploit is blocked. In this section, we describe common methods by which programs cause security breaches. Note that there is considerable variation in the naming conventions for security holes and that we use the most common or descriptive terms. Many systems have mechanisms for allowing programs written by users to be executed by other users. If these programs are executed in a domain that provides the access rights of the executing user, the other users may misuse these rights. A text-editor program, for example, may include code to search the le to be edited for certain keywords. If any are found, the entire le may be copied to a special area accessible to the creator of the text editor"
"Justify with an example how this latter practice is an example of a general category of attacks known as covert channels, in which surreptitious communication occurs","This latter practice is an example of a general category of attacks known as covert channels, in which surreptitious communication occurs .For example, the installation of an innocuous-seeming program on a Windows system could result in the loading of a spyware daemon","The emulator stored away the password, printed out a login error message, and exited; the user was then provided with a genuine login prompt. This type of attack can be defeated by having the operating system print a usage message at the end of an interactive session or by a nontrappable key sequence, such as the control-alt-delete combination used by all modern Windows operating systems. Another variation on the Trojan horse is spyware. Spyware sometimes accompanies a program that the user has chosen to install. Most frequently, it comes along with freeware or shareware programs, but sometimes it is included with commercial software. The goal of spyware is to download ads to display on the users system, create pop-up browser windows when certain sites are visited, or capture information from the users system and return it to a central site. This latter practice is an example of a general category of attacks known as covert channels, in which surreptitious communication occurs. For example, the installation of an innocuous-seeming program on a Windows system could result in the loading of a spyware daemon. The spyware could contact a central site, be given a message and a list of recipient addresses, and deliver a spam message to those users from the Windows machine. This process continues until the user discovers the spyware. Frequently, the spyware is not discovered. In 2010, it was estimated that 90 percent of spam was being delivered by this method. This theft of service is not even considered a crime in most countries! Spyware is a micro example of a macro problem: violation of the principle of least privilege. Under most circumstances, a user of an operating system does not need to install network daemons. Such daemons are installed via two mistakes. First, a user may run with more privileges than necessary (for example, as the administrator), allowing programs that she runs to have more access to the system than is necessary. This is a case of human errora common security weakness. Second, an operating system may allow by default more privileges than a normal user needs. This is a case of poor operating-system design decisions. An operating system (and, indeed, software in general) should allow ne-grained control of access and security, but it must also be easy to manage and understand. Inconvenient or inadequate security measures are bound to be circumvented, causing an overall weakening of the security they were designed to implement"
Justify with an example how this tricky virus attempts to avoid detection by modifying parts of the system that could be used to detect it,"This tricky virus attempts to avoid detection by modifying parts of the system that could be used to detect it .For example, it could modify the read system call so that if the le it has modied is read, the original form of the code is returned rather than the infected code. Tunneling","Encrypted. An encrypted virus includes decryption code along with the encrypted virus, again to avoid detection. The virus rst decrypts and then executes. Stealth. This tricky virus attempts to avoid detection by modifying parts of the system that could be used to detect it. For example, it could modify the read system call so that if the le it has modied is read, the original form of the code is returned rather than the infected code. Tunneling. This virus attempts to bypass detection by an antivirus scanner by installing itself in the interrupt-handler chain. Similar viruses install themselves in device drivers"
"Justify with an example how increasingly, operating systems strive to be secure by default","Increasingly, operating systems strive to be secure by default .For example, Solaris 10 moved from a model in which many services (FTP, telnet, and others) were enabled by default when the system was installed to a model in which almost all services are disabled at installation time and must specically be enabled by system administrators","The more open an operating system isthe more services it has enabled and the more functions it allowsthe more likely it is that a bug is available to exploit. Increasingly, operating systems strive to be secure by default. For example, Solaris 10 moved from a model in which many services (FTP, telnet, and others) were enabled by default when the system was installed to a model in which almost all services are disabled at installation time and must specically be enabled by system administrators. Such changes reduce the systems attack surfacethe set of ways in which an attacker can try to break into the system. In the remainder of this section, we discuss some examples of system and network threats, including worms, port scanning, and denial-of-service attacks. It is important to note that masquerading and replay attacks are also commonly launched over networks between systems. In fact, these attacks are more effective and harder to counter when multiple systems are involved"
Justify with an example how there are other interesting aspects of DOS attacks,"There are other interesting aspects of DOS attacks .For example, if an authentication algorithm locks an account for a period of time after several incorrect attempts to access the account, then an attacker could cause all authentication to be blocked by purposely making incorrect attempts to access all accounts","Sometimes a site does not even know it is under attack. It can be difcult to determine whether a system slowdown is an attack or just a surge in system use. Consider that a successful advertising campaign that greatly increases trafc to a site could be considered a DDOS. There are other interesting aspects of DOS attacks. For example, if an authentication algorithm locks an account for a period of time after several incorrect attempts to access the account, then an attacker could cause all authentication to be blocked by purposely making incorrect attempts to access all accounts. Similarly, a rewall that automatically blocks certain kinds of trafc could be induced to block that trafc when it should not. These examples suggest that programmers and systems managers need to fully understand the algorithms and technologies they are deploying. Finally, computer science classes are notorious sources of accidental system DOS attacks. Consider the rst programming exercises in which students learn to create subprocesses or threads. A common bug involves spawning subprocesses innitely. The systems free memory and CPU resources dont stand a chance. 15.4 Cryptography as a Security Tool There are many defenses against computer attacks, running the gamut from methodology to technology. The broadest tool available to system designers and users is cryptography. In this section, we discuss cryptography and its use in computer security. Note that the cryptography discussed here has been simplied for educational purposes; readers are cautioned against using any of the schemes described here in the real world. Good cryptography libraries are widely available and would make a good basis for production applications"
Justify with an example how message digests are useful for detecting changed messages but are not useful as authenticators,"Message digests are useful for detecting changed messages but are not useful as authenticators .For example, H(m) can be sent along with a message; but if H is known, then someone could modify m to m and recompute H(m ), and the message modication would not be detected","The critical property that an authentication algorithm must possess is this: for a message m, a computer can generate an authenticator a A such that Vk (m, a ) = true only if it possesses k. Thus, a computer holding k can generate authenticators on messages so that any computer possessing k can verify them. However, a computer not holding k cannot generate authenticators on messages that can be veried using Vk . Since authenticators are generally exposed (for example, sent on a network with the messages themselves), it must not be feasible to derive k from the authenticators. Practically, if Vk (m, a ) = true, then we know that m has not been modied, and that the sender of the message has k. If we share k with only one entity, then we know that the message originated from k. Just as there are two types of encryption algorithms, there are two main varieties of authentication algorithms. The rst step in understanding these algorithms is to explore hash functions. A hash function H(m) creates a small, xed-sized block of data, known as a message digest or hash value, from a message m. Hash functions work by taking a message, splitting it into blocks, and processing the blocks to produce an n-bit hash. H must be collision resistant that is, it must be infeasible to nd an m = m such that H(m) = H(m ). Now, if H(m) = H(m ), we know that m = m that is, we know that the message has not been modied. Common message-digest functions include MD5, now considered insecure, which produces a 128-bit hash, and SHA-1, which outputs a 160-bit hash. Message digests are useful for detecting changed messages but are not useful as authenticators. For example, H(m) can be sent along with a message; but if H is known, then someone could modify m to m and recompute H(m ), and the message modication would not be detected. Therefore, we must authenticate H(m). The rst main type of authentication algorithm uses symmetric encryption. In a message-authentication code (MAC), a cryptographic checksum is generated from the message using a secret key. A MAC provides a way to securely authenticate short values. If we use it to authenticate H(m) for an H that is collision resistant, then we obtain a way to securely authenticate long messages by hashing them rst. Note that k is needed to compute both Sk and Vk , so anyone able to compute one can compute the other"
"Justify with an example how sometimes, for instance, we want authentication but not condentiality","Sometimes, for instance, we want authentication but not condentiality .For example, a company could provide a software patch and could sign that patch to prove that it came from the company and that it hasnt been modied","Note that encryption and authentication may be used together or separately. Sometimes, for instance, we want authentication but not condentiality. For example, a company could provide a software patch and could sign that patch to prove that it came from the company and that it hasnt been modied. Authentication is a component of many aspects of security. For example, digital signatures are the core of nonrepudiation, which supplies proof that an entity performed an action. A typical example of nonrepudiation involves the lling out of electronic forms as an alternative to the signing of paper contracts. Nonrepudiation assures that a person lling out an electronic form cannot deny that he did so"
Justify with an example how authentication is a component of many aspects of security,"Authentication is a component of many aspects of security .For example, digital signatures are the core of nonrepudiation, which supplies proof that an entity performed an action","For example, a company could provide a software patch and could sign that patch to prove that it came from the company and that it hasnt been modied. Authentication is a component of many aspects of security. For example, digital signatures are the core of nonrepudiation, which supplies proof that an entity performed an action. A typical example of nonrepudiation involves the lling out of electronic forms as an alternative to the signing of paper contracts. Nonrepudiation assures that a person lling out an electronic form cannot deny that he did so. 15.4.1.4 Key Distribution Certainly, a good part of the battle between cryptographers (those inventing ciphers) and cryptanalysts (those trying to break them) involves keys. With symmetric algorithms, both parties need the key, and no one else should have it. The delivery of the symmetric key is a huge challenge. Sometimes it is performed out-of-bandsay, via a paper document or a conversation"
"Justify with an example how that is, when one protocol generates a message to send to its protocol peer on another machine, it hands its message to the protocol below it in the network-protocol stack for delivery to its peer on that machine","That is, when one protocol generates a message to send to its protocol peer on another machine, it hands its message to the protocol below it in the network-protocol stack for delivery to its peer on that machine .For example, in an IP network, TCP (a transportlayer protocol) acts as a client of IP (a network-layer protocol): TCP packets are passed down to IP for delivery to the IP peer at the other end of the connection","The problem is one of authenticationwhat we need is proof of who (or what) owns a public key. One way to solve that problem involves the use of digital certicates. A digital certicate is a public key digitally signed by a trusted party. The trusted party receives proof of identication from some entity and certies that the public key belongs to that entity. But how do we know we can trust the certier? These certicate authorities have their public keys included within web browsers (and other consumers of certicates) before they are distributed. The certicate authorities can then vouch for other authorities (digitally signing the public keys of these other authorities), and so on, creating a web of trust. The certicates can be distributed in a standard X.509 digital certicate format that can be parsed by computer. This scheme is used for secure web communication, as we discuss in Section 15.4.3. Network protocols are typically organized in layers, like an onion or a parfait, with each layer acting as a client of the one below it. That is, when one protocol generates a message to send to its protocol peer on another machine, it hands its message to the protocol below it in the network-protocol stack for delivery to its peer on that machine. For example, in an IP network, TCP (a transportlayer protocol) acts as a client of IP (a network-layer protocol): TCP packets are passed down to IP for delivery to the IP peer at the other end of the connection. IP encapsulates the TCP packet in an IP packet, which it similarly passes down to the data-link layer to be transmitted across the network to its peer on the message m encryption key k bad encryption algorithm E Ek 2. Public key k bad d (m decryption key k bad decryption algorithm D attacker read 1. Public key k e decryption key k d decryption algorithm D destination computer. This IP peer then delivers the TCP packet up to the TCP peer on that machine"
"Justify with an example how on the one hand, more protocols benet from protections placed lower in the stack","On the one hand, more protocols benet from protections placed lower in the stack .For example, since IP packets encapsulate TCP packets, encryption of IP packets (using IPSec, for example) also hides the contents of the encapsulated TCP packets","Cryptography can be inserted at almost any layer in the OSI model. SSL (Section 15.4.3), for example, provides security at the transport layer. Networklayer security generally has been standardized on IPSec, which denes IP packet formats that allow the insertion of authenticators and the encryption of packet contents. IPSec uses symmetric encryption and uses the Internet Key Exchange (IKE) protocol for key exchange. IKE is based on pubic-key encryption. IPSec is becoming widely used as the basis for virtual private networks (VPNs), in which all trafc between two IPSec endpoints is encrypted to make a private network out of one that may otherwise be public. Numerous protocols also have been developed for use by applications, such as PGP for encrypting e-mail, but then the applications themselves must be coded to implement security. Where is cryptographic protection best placed in a protocol stack? In general, there is no denitive answer. On the one hand, more protocols benet from protections placed lower in the stack. For example, since IP packets encapsulate TCP packets, encryption of IP packets (using IPSec, for example) also hides the contents of the encapsulated TCP packets. Similarly, authenticators on IP packets detect the modication of contained TCP header information. On the other hand, protection at lower layers in the protocol stack may give insufcient protection to higher-layer protocols. For example, an application server that accepts connections encrypted with IPSec might be able to authenticate the client computers from which requests are received"
"Justify with an example how on the other hand, protection at lower layers in the protocol stack may give insufcient protection to higher-layer protocols","On the other hand, protection at lower layers in the protocol stack may give insufcient protection to higher-layer protocols .For example, an application server that accepts connections encrypted with IPSec might be able to authenticate the client computers from which requests are received","Where is cryptographic protection best placed in a protocol stack? In general, there is no denitive answer. On the one hand, more protocols benet from protections placed lower in the stack. For example, since IP packets encapsulate TCP packets, encryption of IP packets (using IPSec, for example) also hides the contents of the encapsulated TCP packets. Similarly, authenticators on IP packets detect the modication of contained TCP header information. On the other hand, protection at lower layers in the protocol stack may give insufcient protection to higher-layer protocols. For example, an application server that accepts connections encrypted with IPSec might be able to authenticate the client computers from which requests are received. However, to authenticate a user at a client computer, the server may need to use an application-level protocolthe user may be required to type a password"
"Justify with an example how in addition to its use on the Internet, SSL is being used for a wide variety of tasks","In addition to its use on the Internet, SSL is being used for a wide variety of tasks .For example, IPSec VPNs now have a competitor in SSL VPNs","This is one purpose of the certicate certs . In particular, the attrs eld contains information that the client can use to determine the identityfor example, the domain name of the server with which it is communicating. For applications in which the server also needs information about the client, SSL supports an option by which a client can send a certicate to the server. In addition to its use on the Internet, SSL is being used for a wide variety of tasks. For example, IPSec VPNs now have a competitor in SSL VPNs. IPSec is good for point-to-point encryption of trafcsay, between two company ofces. SSL VPNs are more exible but not as efcient, so they might be used between an individual employee working remotely and the corporate ofce. 15.5 User Authentication Our earlier discussion of authentication involves messages and sessions. But what about users? If a system cannot authenticate a user, then authenticating that a message came from that user is pointless. Thus, a major security problem for operating systems is user authentication. The protection system depends on the ability to identify the programs and processes currently executing, which in turn depends on the ability to identify each user of the system"
Justify with an example how different passwords may be associated with different access rights,"Different passwords may be associated with different access rights .For example, different passwords may be used for reading les, appending les, and updating les","Passwords are often used to protect objects in the computer system, in the absence of more complete protection schemes. They can be considered a special case of either keys or capabilities. For instance, a password may be associated with each resource (such as a le). Whenever a request is made to use the resource, the password must be given. If the password is correct, access is granted. Different passwords may be associated with different access rights. For example, different passwords may be used for reading les, appending les, and updating les. In practice, most systems require only one password for a user to gain full rights. Although more passwords theoretically would be more secure, such systems tend not to be implemented due to the classic trade-off between security and convenience. If security makes something inconvenient, then the security is frequently bypassed or otherwise circumvented"
Justify with an example how short passwords are especially vulnerable to this method,"Short passwords are especially vulnerable to this method .For example, a four-character password provides only 10,000 variations","There are two common ways to guess a password. One way is for the intruder (either human or program) to know the user or to have information about the user. All too frequently, people use obvious information (such as the names of their cats or spouses) as their passwords. The other way is to use brute force, trying enumerationor all possible combinations of valid password characters (letters, numbers, and punctuation on some systems)until the password is found. Short passwords are especially vulnerable to this method. For example, a four-character password provides only 10,000 variations. On average, guessing 5,000 times would produce a correct hit. A program that could try a password every millisecond would take only about 5 seconds to guess a four-character password. Enumeration is less successful where systems allow longer passwords that include both uppercase and lowercase letters, along with numbers and all punctuation characters. Of course, users must take advantage of the large password space and must not, for example, use only lowercase letters. In addition to being guessed, passwords can be exposed as a result of visual or electronic monitoring. An intruder can look over the shoulder of a user (shoulder surng) when the user is logging in and can learn the password easily by watching the keyboard. Alternatively, anyone with access to the network on which a computer resides can seamlessly add a network monitor, allowing him to sniff, or watch, all data being transferred on the network, including user IDs and passwords. Encrypting the data stream containing the password solves this problem. Even such a system could have passwords stolen, however. For example, if a le is used to contain the passwords, it could be copied for off-system analysis. Or consider a Trojan-horse program installed on the system that captures every keystroke before sending it on to the application"
Justify with an example how a good technique is to generate your password by using the rst letter of each word of an easily remembered phrase using both upper and lower characters with a number or punctuation mark thrown in for good measure,"A good technique is to generate your password by using the rst letter of each word of an easily remembered phrase using both upper and lower characters with a number or punctuation mark thrown in for good measure .For example, the phrase My mothers name is Katherine might yield the password Mmn.isK!","If the user has selected a password that is also a word in the dictionary, the password is cracked. On sufciently fast computers, or even on clusters of slow computers, such a comparison may take only a few hours. Furthermore, because UNIX systems use a well-known hashing algorithm, a cracker might keep a cache of passwords that have been cracked previously. For these reasons, systems include a salt, or recorded random number, in the hashing algorithm. The salt value is added to the password to ensure that if two plaintext passwords are the same, they result in different hash values. In addition, the salt value makes hashing a dictionary ineffective, because each dictionary term would need to be combined with each salt value for comparison to the stored passwords. Newer versions of UNIX also store the hashed password entries in a le readable only by the superuser. The programs that compare the hash to the stored value are run setuid to root, so they can read this le, but other users cannot. Another weakness in the UNIX password methods is that many UNIX systems treat only the rst eight characters as signicant. It is therefore extremely important for users to take advantage of the available password space. Complicating the issue further is the fact that some systems do not allow the use of dictionary words as passwords. A good technique is to generate your password by using the rst letter of each word of an easily remembered phrase using both upper and lower characters with a number or punctuation mark thrown in for good measure. For example, the phrase My mothers name is Katherine might yield the password Mmn.isK!. The password is hard to crack but easy for the user to remember. A more secure system would allow more characters in its passwords. Indeed, a system might also allow passwords to include the space character, so that a user could create a passphrase. To avoid the problems of password snifng and shoulder surng, a system can use a set of paired passwords. When a session begins, the system randomly selects and presents one part of a password pair; the user must supply the other part. In this system, the user is challenged and must respond with the correct answer to that challenge"
Justify with an example how policies vary widely but generally include a statement of what is being secured,"Policies vary widely but generally include a statement of what is being secured .For example, a policy might state that all outsideaccessible applications must have a code review before being deployed, or that users should not share their passwords, or that all connection points between a company and the outside must have port scans run every six months","Consider the security of a house without a door lock, with a door lock, and with a lock and an alarm. In this section, we look at the major methods, tools, and techniques that can be used to improve resistance to threats. The rst step toward improving the security of any aspect of computing is to have a security policy. Policies vary widely but generally include a statement of what is being secured. For example, a policy might state that all outsideaccessible applications must have a code review before being deployed, or that users should not share their passwords, or that all connection points between a company and the outside must have port scans run every six months. Without a policy in place, it is impossible for users and administrators to know what is permissible, what is required, and what is not allowed. The policy is a road map to security, and if a site is trying to move from less secure to more secure, it needs a map to know how to get there. Once the security policy is in place, the people it affects should know it well. It should be their guide. The policy should also be a living document that is reviewed and updated periodically to ensure that it is still pertinent and still followed"
Justify with an example how tripwire operates on the premise that many intrusions result in modication of system directories and les,"Tripwire operates on the premise that many intrusions result in modication of system directories and les .For example, an attacker might modify the system programs, perhaps inserting copies with Trojan horses, or might insert new programs into directories commonly found in user-shell search paths","The best protection against computer viruses is prevention, or the practice of safe computing. Purchasing unopened software from vendors and avoiding free or pirated copies from public sources or disk exchange offer the safest route to preventing infection. However, even new copies of legitimate software applications are not immune to virus infection: in a few cases, disgruntled employees of a software company have infected the master copies of software programs to do economic harm to the company. For macro viruses, one defense is to exchange Microsoft Word documents in an alternative le format called rich text format (RTF). Unlike the native Word format, RTF does not include the capability to attach macros. Another defense is to avoid opening any e-mail attachments from unknown users. Unfortunately, history has shown that e-mail vulnerabilities appear as fast as they are xed. For example, in 2000, the love bug virus became very widespread by traveling in e-mail messages that pretended to be love notes sent by friends of the receivers. Once a receiver opened the attached Visual Basic script, the virus propagated by sending itself to the rst addresses in the receivers e-mail contact list. Fortunately, except for clogging e-mail systems THE TRIPWIRE FILE SYSTEM An example of an anomaly-detection tool is the Tripwire le system integritychecking tool for UNIX, developed at Purdue University. Tripwire operates on the premise that many intrusions result in modication of system directories and les. For example, an attacker might modify the system programs, perhaps inserting copies with Trojan horses, or might insert new programs into directories commonly found in user-shell search paths. Or an intruder might remove system log les to cover his tracks. Tripwire is a tool to monitor le systems for added, deleted, or changed les and to alert system administrators to these modications. The operation of Tripwire is controlled by a conguration le tw.config that enumerates the directories and les to be monitored for changes, deletions, or additions. Each entry in this conguration le includes a selection mask to specify the le attributes (inode attributes) that will be monitored for changes. For example, the selection mask might specify that a les permissions be monitored but its access time be ignored. In addition, the selection mask can instruct that the le be monitored for changes. Monitoring the hash of a le for changes is as good as monitoring the le itself, and storing hashes of les requires far less room than copying the les themselves"
Justify with an example how each entry in this conguration le includes a selection mask to specify the le attributes (inode attributes) that will be monitored for changes,"Each entry in this conguration le includes a selection mask to specify the le attributes (inode attributes) that will be monitored for changes .For example, the selection mask might specify that a les permissions be monitored but its access time be ignored","Another defense is to avoid opening any e-mail attachments from unknown users. Unfortunately, history has shown that e-mail vulnerabilities appear as fast as they are xed. For example, in 2000, the love bug virus became very widespread by traveling in e-mail messages that pretended to be love notes sent by friends of the receivers. Once a receiver opened the attached Visual Basic script, the virus propagated by sending itself to the rst addresses in the receivers e-mail contact list. Fortunately, except for clogging e-mail systems THE TRIPWIRE FILE SYSTEM An example of an anomaly-detection tool is the Tripwire le system integritychecking tool for UNIX, developed at Purdue University. Tripwire operates on the premise that many intrusions result in modication of system directories and les. For example, an attacker might modify the system programs, perhaps inserting copies with Trojan horses, or might insert new programs into directories commonly found in user-shell search paths. Or an intruder might remove system log les to cover his tracks. Tripwire is a tool to monitor le systems for added, deleted, or changed les and to alert system administrators to these modications. The operation of Tripwire is controlled by a conguration le tw.config that enumerates the directories and les to be monitored for changes, deletions, or additions. Each entry in this conguration le includes a selection mask to specify the le attributes (inode attributes) that will be monitored for changes. For example, the selection mask might specify that a les permissions be monitored but its access time be ignored. In addition, the selection mask can instruct that the le be monitored for changes. Monitoring the hash of a le for changes is as good as monitoring the le itself, and storing hashes of les requires far less room than copying the les themselves. When run initially, Tripwire takes as input the tw.config le and computes a signature for each le or directory consisting of its monitored attributes (inode attributes and hash values). These signatures are stored in a database. When run subsequently, Tripwire inputs both tw.config and the previously stored database, recomputes the signature for each le or directory named in tw.config, and compares this signature with the signature (if any) in the previously computed database. Events reported to an administrator include any monitored le or directory whose signature differs from that in the database (a changed le), any le or directory in a monitored directory for which a signature does not exist in the database (an added le), and any signature in the database for which the corresponding le or directory no longer exists (a deleted le)"
"Justify with an example how another vulnerability of rewalls is spoong, in which an unauthorized host pretends to be an authorized host by meeting some authorization criterion","Another vulnerability of rewalls is spoong, in which an unauthorized host pretends to be an authorized host by meeting some authorization criterion .For example, if a rewall rule allows a connection from a host and identies that host by its IP address, then another host could send packets using that same address and be allowed through the rewall","A common implementation has the Internet as the untrusted domain; a semitrusted and semisecure network, called the demilitarized zone (DMZ), as another domain; and a companys computers as a third domain (Figure Internet access from companys computers DMZ access from Internet firewall access between DMZ and companys computers 15.10). Connections are allowed from the Internet to the DMZ computers and from the company computers to the Internet but are not allowed from the Internet or DMZ computers to the company computers. Optionally, controlled communications may be allowed between the DMZ and one company computer or more. For instance, a web server on the DMZ may need to query a database server on the corporate network. With a rewall, however, access is contained, and any DMZ systems that are broken into still are unable to access the company computers. Of course, a rewall itself must be secure and attack-proof. Otherwise, its ability to secure connections can be compromised. Furthermore, rewalls do not prevent attacks that tunnel, or travel within protocols or connections that the rewall allows. A buffer-overow attack to a web server will not be stopped by the rewall, for example, because the HTTP connection is allowed; it is the contents of the HTTP connection that house the attack. Likewise, denialof-service attacks can affect rewalls as much as any other machines. Another vulnerability of rewalls is spoong, in which an unauthorized host pretends to be an authorized host by meeting some authorization criterion. For example, if a rewall rule allows a connection from a host and identies that host by its IP address, then another host could send packets using that same address and be allowed through the rewall. In addition to the most common network rewalls, there are other, newer kinds of rewalls, each with its pros and cons. A personal rewall is a software layer either included with the operating system or added as an application. Rather than limiting communication between security domains, it limits communication to (and possibly from) a given host. A user could add a personal rewall to her PC so that a Trojan horse would be denied access to the network to which the PC is connected, for example. An application proxy rewall understands the protocols that applications speak across the network"
"Justify with an example how system-call rewalls sit between applications and the kernel, monitoring system-call execution","System-call rewalls sit between applications and the kernel, monitoring system-call execution .For example, in Solaris 10, the least privilege feature implements a list of more than fty system calls that processes may or may not be allowed to make","In addition to the most common network rewalls, there are other, newer kinds of rewalls, each with its pros and cons. A personal rewall is a software layer either included with the operating system or added as an application. Rather than limiting communication between security domains, it limits communication to (and possibly from) a given host. A user could add a personal rewall to her PC so that a Trojan horse would be denied access to the network to which the PC is connected, for example. An application proxy rewall understands the protocols that applications speak across the network. For example, SMTP is used for mail transfer. An application proxy accepts a connection just as an SMTP server would and then initiates a connection to the original destination SMTP server. It can monitor the trafc as it forwards the message, watching for and disabling illegal commands, attempts to exploit bugs, and so on. Some rewalls are designed for one specic protocol. An XML rewall, for example, has the specic purpose of analyzing XML trafc and blocking disallowed or malformed XML. System-call rewalls sit between applications and the kernel, monitoring system-call execution. For example, in Solaris 10, the least privilege feature implements a list of more than fty system calls that processes may or may not be allowed to make. A process that does not need to spawn other processes can have that ability taken away, for instance. 15.8 Computer-Security Classications The U.S. Department of Defense Trusted Computer System Evaluation Criteria specify four security classications in systems: A, B, C, and D. This specication is widely used to determine the security of a facility and to model security solutions, so we explore it here. The lowest-level classication is division D, or minimal protection. Division D includes only one class and is used for systems that have failed to meet the requirements of any of the other security classes"
"Justify with an example how optionally, the system access-control list can set the integrity of the object and identify which operations to block from lower-integrity subjects: read, write (always enforced), or execute","Optionally, the system access-control list can set the integrity of the object and identify which operations to block from lower-integrity subjects: read, write (always enforced), or execute .For example, the security descriptor of the le foo.bar might have owner avi and this discretionary access-control list: aviall access group csreadwrite access user cliffno access In addition, it might have a system access-control list that tells the system to audit writes by everyone, along with an integrity label of medium that denies read, write, and execute to lower-integrity subjects","For securable objects without an explicit integrity label, a default label of medium is assigned. The label for a given subject is assigned during logon. For instance, a nonadministrative user will have an integrity label of medium. In addition to integrity labels, Windows Vista also added User Account Control (UAC), which represents an administrative account (not the built-in Administrators account) with two separate tokens. One, for normal usage, has the built-in Administrators group disabled and has an integrity label of medium. The other, for elevated usage, has the built-in Administrators group enabled and an integrity label of high. Security attributes of an object in Windows 7 are described by a security descriptor. The security descriptor contains the security ID of the owner of the object (who can change the access permissions), a group security ID used Summary only by the POSIX subsystem, a discretionary access-control list that identies which users or groups are allowed (and which are explicitly denied) access, and a system access-control list that controls which auditing messages the system will generate. Optionally, the system access-control list can set the integrity of the object and identify which operations to block from lower-integrity subjects: read, write (always enforced), or execute. For example, the security descriptor of the le foo.bar might have owner avi and this discretionary access-control list: aviall access group csreadwrite access user cliffno access In addition, it might have a system access-control list that tells the system to audit writes by everyone, along with an integrity label of medium that denies read, write, and execute to lower-integrity subjects. An access-control list is composed of access-control entries that contain the security ID of the individual and an access mask that denes all possible actions on the object, with a value of AccessAllowed or AccessDenied for each action. Files in Windows 7 may have the following access types: ReadData, WriteData, AppendData, Execute, ReadExtendedAttribute, WriteExtendedAttribute, ReadAttributes, and WriteAttributes. We can see how this allows a ne degree of control over access to objects"
"Justify with an example how since that time, virtualization has expanded to include all common CPUs, many commercial and open-source tools, and many operating systems","Since that time, virtualization has expanded to include all common CPUs, many commercial and open-source tools, and many operating systems .For example, the open-source VirtualBox project (http://www.virtualbox.org) provides a program than runs on Intel x86 and AMD64 CPUs and on Windows, Linux, Mac OS X, and Solaris host operating systems","These requirements of delity, performance, and safety still guide virtualization efforts today. By the late 1990s, Intel 80x86 CPUs had become common, fast, and rich in features. Accordingly, developers launched multiple efforts to implement virtualization on that platform. Both Xen and VMware created technologies, still used today, to allow guest operating systems to run on the 80x86. Since that time, virtualization has expanded to include all common CPUs, many commercial and open-source tools, and many operating systems. For example, the open-source VirtualBox project (http://www.virtualbox.org) provides a program than runs on Intel x86 and AMD64 CPUs and on Windows, Linux, Mac OS X, and Solaris host operating systems. Possible guest operating systems include many versions of Windows, Linux, Solaris, and BSD, including even MS-DOS and IBM OS/2. 16.3 Benets and Features Several advantages make virtualization attractive. Most of them are fundamentally related to the ability to share the same hardware yet run several different execution environments (that is, different operating systems) concurrently"
"Justify with an example how these parameters usually include the number of CPUs, amount of memory, networking details, and storage details that the VMM will take into account when creating the guest","These parameters usually include the number of CPUs, amount of memory, networking details, and storage details that the VMM will take into account when creating the guest .For example, a user might want to create a new guest with two virtual CPUs, 4 GB of memory, 10 GB of disk space, one network interface that gets its IP address via DHCP, and access to the DVD drive","Here, we discuss the implementations in general, with the understanding that VMMs take advantage of hardware assistance where it is available. Lets begin with the virtual machine life cycle. Whatever the hypervisor type, at the time a virtual machine is created, its creator gives the VMM certain parameters. These parameters usually include the number of CPUs, amount of memory, networking details, and storage details that the VMM will take into account when creating the guest. For example, a user might want to create a new guest with two virtual CPUs, 4 GB of memory, 10 GB of disk space, one network interface that gets its IP address via DHCP, and access to the DVD drive. The VMM then creates the virtual machine with those parameters. In the case of a type 0 hypervisor, the resources are usually dedicated. In this situation, if there are not two virtual CPUs available and unallocated, the creation request in our example will fail. For other hypervisor types, the resources are dedicated or virtualized, depending on the type. Certainly, an IP address cannot be shared, but the virtual CPUs are usually multiplexed on the physical CPUs as discussed in Section 16.6.1. Similarly, memory management usually involves allocating more memory to guests than actually exists in physical memory. This is more complicated and is described in Section 16.6.2"
"Justify with an example how in these cases, the guests are paravirtualized, aware of the virtualization and assisting in its execution","In these cases, the guests are paravirtualized, aware of the virtualization and assisting in its execution .For example, a guest must watch for signals from the hardware or VMM that a hardware change has occurred, probe its hardware devices to detect the change, and add or subtract CPUs or memory from its available resources","I/O presents some difculty, because it is not easy to dedicate I/O devices to guests if there are not enough. What if a system has two Ethernet ports and more than two guests, for example? Either all guests must get their own I/O devices, or the system must provided I/O device sharing. In these cases, the hypervisor manages shared access or grants all devices to a control partition. In the control partition, a guest operating system provides services (such as networking) via daemons to other guests, and the hypervisor routes I/O requests appropriately. Some type 0 hypervisors are even more sophisticated and can move physical CPUs and memory between running guests. In these cases, the guests are paravirtualized, aware of the virtualization and assisting in its execution. For example, a guest must watch for signals from the hardware or VMM that a hardware change has occurred, probe its hardware devices to detect the change, and add or subtract CPUs or memory from its available resources. Because type 0 virtualization is very close to raw hardware execution, it should be considered separately from the other methods discussed here"
Justify with an example how an important benet is the ability to consolidate more operating systems and applications onto fewer systems,"An important benet is the ability to consolidate more operating systems and applications onto fewer systems .For example, rather than having ten systems running at 10 percent utilization each, a data center might have one server manage the entire load","Type 1 hypervisors run in kernel mode, taking advantage of hardware protection. Where the host CPU allows, they use multiple modes to give guest operating systems their own control and improved performance. They implement device drivers for the hardware they run on, because no other component could do so. Because they are operating systems, they must also provide CPU scheduling, memory management, I/O management, protection, and even security. Frequently, they provide APIs, but those APIs support applications in guests or external applications that supply features like backups, monitoring, and security. Many type 1 hypervisors are closed-source commercial offerings, such as VMware ESX while some are open source or hybrids of open and closed source, such as Citrix XenServer and its open Xen counterpart. By using type 1 hypervisors, data-center managers can control and manage the operating systems and applications in new and sophisticated ways. An important benet is the ability to consolidate more operating systems and applications onto fewer systems. For example, rather than having ten systems running at 10 percent utilization each, a data center might have one server manage the entire load. If utilization increases, guests and their applications can be moved to less-loaded systems live, without interruption of service. Using snapshots and cloning, the system can save the states of guests and duplicate those statesa much easier task than restoring from backups or installing manually or via scripts and tools. The price of this increased manageability is the cost of the VMM (if it is a commercial product), the need to learn new management tools and methods, and the increased complexity. Another type of type 1 hypervisor includes various general-purpose operating systems with VMM functionality. In this instance, an operating system such as RedHat Enterprise Linux, Windows, or Oracle Solaris performs its normal duties as well as providing a VMM allowing other operating systems to run as guests. Because of their extra duties, these hypervisors typically provide fewer virtualization features than other type 1 hypervisors. In many ways, they treat a guest operating system as just another process, albeit with special handling provided when the guest tries to execute special instructions"
Justify with an example how type 2 hypervisors have limits not associated with some of the other types,"Type 2 hypervisors have limits not associated with some of the other types .For example, a user needs administrative privileges to access many of the hardware assistance features of modern CPUs","Type 2 hypervisors have limits not associated with some of the other types. For example, a user needs administrative privileges to access many of the hardware assistance features of modern CPUs. If the VMM is being run by a standard user without additional privileges, the VMM cannot take advantage of these features. Due to this limitation, as well as the extra overhead of running a general-purpose operating system as well as guest operating systems, type 2 hypervisors tend to have poorer overall performance than type 0 or 1. As is often the case, the limitations of type 2 hypervisors also provide some benets. They run on a variety of general-purpose operating systems, and running them requires no changes to the host operating system. A student can use a type 2 hypervisor, for example, to test a non-native operating system without replacing the native operating system. In fact, on an Apple laptop, a student could have versions of Windows, Linux, Unix, and less common operating systems all available for learning and experimentation"
"Justify with an example how here, a programming language is designed to run within a custom-built virtualized environment","Here, a programming language is designed to run within a custom-built virtualized environment .For example, Oracles Java has many features that depend on its running in the Java virtual machine (JVM), including specic methods for security and memory management","Xen allowed virtualization of x86 CPUs without the use of binary translation, instead requiring modications in the guest operating systems like the one described above. Over time, Xen has taken advantage of hardware features supporting virtualization. As a result, it no longer requires modied guests and essentially does not need the paravirtualization method. Paravirtualization is still used in other solutions, however, such as type 0 hypervisors. Another kind of virtualization, based on a different execution model, is the virtualization of programming environments. Here, a programming language is designed to run within a custom-built virtualized environment. For example, Oracles Java has many features that depend on its running in the Java virtual machine (JVM), including specic methods for security and memory management. If we dene virtualization as including only duplication of hardware, this is not really virtualization at all. But we need not limit ourselves to that denition"
"Justify with an example how here, a VMM can use standard scheduling algorithms to make progress on each thread but can also add a fairness aspect to those algorithms","Here, a VMM can use standard scheduling algorithms to make progress on each thread but can also add a fairness aspect to those algorithms .For example, if there are six hardware CPUs and 12 guest-allocated CPUs, the VMM could allocate CPU resources proportionally, giving each guest half of the CPU resources it believes it has","The signicant variations among virtualization technologies make it difcult to summarize the effect of virtualization on scheduling. First, lets consider the general case of VMM scheduling. The VMM has a number of physical CPUs available and a number of threads to run on those CPUs. The threads can be VMM threads or guest threads. Guests are congured with a certain number of virtual CPUs at creation time, and that number can be adjusted throughout the life of the VM. When there are enough CPUs to allocate the requested number to each guest, the VMM can treat the CPUs as dedicated and schedule only a given guests threads on that guests CPUs. In this situation, the guests act much like native operating systems running on native CPUs. Of course, in other situations, there may not be enough CPUs to go around. The VMM itself needs some CPU cycles for guest management and I/O management and can steal cycles from the guests by scheduling its threads across all of the system CPUs, but the impact of this action is relatively minor. More difcult is the case of overcommitment, in which the guests are congured for more CPUs than exist in the system. Here, a VMM can use standard scheduling algorithms to make progress on each thread but can also add a fairness aspect to those algorithms. For example, if there are six hardware CPUs and 12 guest-allocated CPUs, the VMM could allocate CPU resources proportionally, giving each guest half of the CPU resources it believes it has. The VMM can still present all 12 virtual CPUs to the guests, but in mapping them onto physical CPUs, the VMM can use its scheduler to share them appropriately. Even given a scheduler that provides fairness, any guest operating-system scheduling algorithm that assumes a certain amount of progress in a given amount of time will be negatively affected by virtualization. Consider a timesharing operating system that tries to allot 100 milliseconds to each time slice to give users a reasonable response time. Within a virtual machine, this operating system is at the mercy of the virtualization system as to what CPU resources it actually receives. A given 100-millisecond time slice may take much more than 100 milliseconds of virtual CPU time. Depending on how busy the system is, the time slice may take a second or more, resulting in very poor response times for users logged into that virtual machine. The effect on a real-time operating system can be even more serious"
"Justify with an example how because of all the variation in I/O devices, operating systems are used to dealing with varying and exible I/O mechanisms","Because of all the variation in I/O devices, operating systems are used to dealing with varying and exible I/O mechanisms .For example, operating systems have a device-driver mechanism that provides a uniform interface to the operating system whatever the I/O device","3. Another common method for reducing memory pressure is for the VMM to determine if the same page has been loaded more than once. If this is the case, to the VMM reduces the number of copies of the page to one and maps the other users of the page to that one copy. VMware, for example, randomly samples guest memory and creates a hash for each page sampled. That hash value is a thumbprint of the page. The hash of every page examined is compared with other hashes already stored in a hash table. If there is a match, the pages are compared byte by byte to see if they really are identical. If they are, one page is freed, and its logical address is mapped to the others physical address. This technique might seem at rst to be ineffective, but consider that guests run operating systems. If multiple guests run the same operating system, then only one copy of the active operating-system pages need be in memory. Similarly, multiple guests could be running the same set of applications, again a likely source of memory sharing. In the area of I/O, hypervisors have some leeway and can be less concerned with exactly representing the underlying hardware to their guests. Because of all the variation in I/O devices, operating systems are used to dealing with varying and exible I/O mechanisms. For example, operating systems have a device-driver mechanism that provides a uniform interface to the operating system whatever the I/O device. Device-driver interfaces are designed to allow third-party hardware manufacturers to provide device drivers connecting their devices to the operating system. Usually, device drivers can be dynamically loaded and unloaded. Virtualization takes advantage of such built-in exibility by providing specic virtualized devices to guest operating systems. As described in Section 16.5, VMMs vary greatly in how they provide I/O to their guests. I/O devices may be dedicated to guests, for example, or the VMM may have device drivers onto which it maps guest I/O. The VMM may also provide idealized device drivers to guests, which allows easy provision and management of guest I/O. In this case, the guest sees an easy-to-control device, but in reality that simple device driver communicates to the VMM which sends those requests to a more complicated real device through a more complex real device driver. I/O in virtual environments is complicated and requires careful VMM design and implementation"
Justify with an example how guests sometimes need more disk space than is available in their root disk image,"Guests sometimes need more disk space than is available in their root disk image .For example, a nonvirtualized database server might use several le systems spread across many disks to store various parts of the database","Type 1 hypervisors store the guest root disk (and conguration information) in one or more les within the le systems provided by the VMM. Type 2 hypervisors store the same information within the host operating systems le systems. In essence, a disk image, containing all of the contents of the root disk of the guest, is contained within one le in the VMM. Aside from the potential performance problems that causes, it is a clever solution, because it simplies copying and moving guests. If the administrator wants a duplicate of the guest (for testing, for example), she simply copies the associated disk image of the guest and tells the VMM about the new copy. Booting that new VM brings up an identical guest. Moving a virtual machine from one system to another that runs the same VMM is as simple as halting the guest, copying the image to the other system, and starting the guest there. Guests sometimes need more disk space than is available in their root disk image. For example, a nonvirtualized database server might use several le systems spread across many disks to store various parts of the database. Virtualizing such a database usually involves creating several les and having the VMM present those to the guest as disks. The guest then executes as usual, with the VMM translating the disk I/O requests coming from the guest into le I/O commands to the correct les"
Justify with an example how live migration enables entirely new ways of managing data centers,"Live migration enables entirely new ways of managing data centers .For example, virtualization management tools can monitor all the VMMs in an environment and automatically balance resource use by moving guests between the VMMs","Live migration enables entirely new ways of managing data centers. For example, virtualization management tools can monitor all the VMMs in an environment and automatically balance resource use by moving guests between the VMMs. They can also optimize the use of electricity and cooling by migrating all guests off selected servers if other servers can handle the load and powering down the selected servers entirely. If the load increases, these tools can power up the servers and migrate guests back to them. 16.7 Examples Despite the advantages of virtual machines, they received little attention for a number of years after they were rst developed. Today, however, virtual machines are coming into fashion as a means of solving system compatibility problems. In this section, we explore two popular contemporary virtual machines: the VMware Workstation and the Java virtual machine. As you will see, these virtual machines can typically run on top of operating systems of any of the design types discussed in earlier chapters. Thus, operating-system design methodssimple layers, microkernels, modules, and virtual machines are not mutually exclusive"
"Justify with an example how3), commonly known as gateway routers or simply routers, that are responsible for dening the interface through which the sites communicate over the network, as well as for transferring information among the various sites","3), commonly known as gateway routers or simply routers, that are responsible for dening the interface through which the sites communicate over the network, as well as for transferring information among the various sites .For example, the Internet WAN enables hosts at geographically separated sites to communicate with one another","Typical links are telephone lines, leased (dedicated data) lines, optical cable, microwave links, radio waves, and satellite channels. These communication links are controlled by special communication processors (Figure 17.3), commonly known as gateway routers or simply routers, that are responsible for dening the interface through which the sites communicate over the network, as well as for transferring information among the various sites. For example, the Internet WAN enables hosts at geographically separated sites to communicate with one another. The host computers typically differ from one another in speed, CPU type, operating system, and so on. Hosts are generally on LANs, which are, in turn, connected to the Internet via regional networks. The regional networks, such as NSFnet in the northeast United States, are interlinked with routers (Section 17.4.2) to form the worldwide H network host host operating system communication subsystem H H CP H CP network host communication processor host operating system H network. Connections between networks sometimes use a telephone-system service called T1, which provides a transfer rate of 1.544 megabits per second over a leased line. For sites requiring faster Internet access, T1s are collected into multiple-T1 units that work in parallel to provide more throughput. For instance, a T3 is composed of 28 T1 connections and has a transfer rate of 45 megabits per second. Connections such as OC-12 are common and provide 622 megabits per second. Residences can connect to the Internet by either telephone, cable, or specialized Internet service providers that install routers to connect the residences to central services. Of course, there are other WANs besides the Internet. A company might create its own private WAN for increased security, performance, or reliability. As mentioned, WANs are generally slower than LANs, although backbone WAN connections that link major cities may have transfer rates of over 40 gigabits per second. Frequently, WANs and LANs interconnect, and it is difcult to tell where one ends and the other starts. Consider the cellular phone data network. Cell phones are used for both voice and data communications. Cell phones in a given area connect via radio waves to a cell tower that contains receivers and transmitters. This part of the network is similar to a LAN except that the cell phones do not communicate with each other (unless two people talking or exchanging data happen to be connected to the same tower). Rather, the towers are connected to other towers and to hubs that connect the tower communications to land lines or other communication mediums and route the packets toward their destinations. This part of the network is more WAN-like"
"Justify with an example how when the network is partitioned, the two coordinators (each for its own partition) may initiate conicting actions","When the network is partitioned, the two coordinators (each for its own partition) may initiate conicting actions .For example, if the coordinators are responsible for implementing mutual exclusion, we may have a situation in which two processes are executing simultaneously in their critical sections","If the system believes that a site has failed (because that site can be reached no longer), then all sites in the system must be notied, so that they will no longer attempt to use the services of the failed site. The failure of a site that serves as a central coordinator for some activity (such as deadlock detection) requires the election of a new coordinator. Similarly, if the failed site is part of a logical ring, then a new logical ring must be constructed. Note that, if the site has not failed (that is, if it is up but cannot be reached), then we may have the undesirable situation in which two sites serve as the coordinator. When the network is partitioned, the two coordinators (each for its own partition) may initiate conicting actions. For example, if the coordinators are responsible for implementing mutual exclusion, we may have a situation in which two processes are executing simultaneously in their critical sections. When a failed link or site is repaired, it must be integrated into the system gracefully and smoothly"
Justify with an example how site B then may have to receive information from the other sites to update its local tables,"Site B then may have to receive information from the other sites to update its local tables .For example, it may need routingtable information, a list of sites that are down, undelivered messages, a transaction log of unexecuted transactions, and mail","Suppose that a link between A and B has failed. When it is repaired, both A and B must be notied. We can accomplish this notication by continuously repeating the heartbeat procedure described in Section 17.7.1. Suppose that site B has failed. When it recovers, it must notify all other sites that it is up again. Site B then may have to receive information from the other sites to update its local tables. For example, it may need routingtable information, a list of sites that are down, undelivered messages, a transaction log of unexecuted transactions, and mail. If the site has not failed but simply could not be reached, then it still needs this information. A distributed system must tolerate a certain level of failure and continue to function normally when faced with various types of failures. Making a facility fault tolerant starts at the protocol level, as described above, but continues through all aspects of the system. We use the term fault tolerance in a broad sense. Communication faults, certain machine failures, storage-device crashes, and decays of storage media should all be tolerated to some extent. A faulttolerant system should continue to function, perhaps in a degraded form, when faced with such failures. The degradation can affect performance, functionality, or both. It should be proportional, however, to the failures that caused it. A system that grinds to a halt when only one of its components fails is certainly not fault tolerant"
Justify with an example how systems have bounded resources and can become completely saturated under increased load,"Systems have bounded resources and can become completely saturated under increased load .For example, with respect to a le system, saturation occurs either when a servers CPU runs at a high utilization rate or when disks I/O requests overwhelm the I/O subsystem","Another aspect of transparency is user mobility. It would be convenient to allow users to log into any machine in the system rather than forcing them to use a specic machine. A transparent distributed system facilitates user mobility by bringing over the users environment (for example, home directory) to wherever he logs in. Protocols like LDAP provide an authentication system for local, remote, and mobile users. Once the authentication is complete, facilities like desktop virtualization allow users to see their desktop sessions at remote facilities. Still another issue is scalabilitythe capability of a system to adapt to increased service load. Systems have bounded resources and can become completely saturated under increased load. For example, with respect to a le system, saturation occurs either when a servers CPU runs at a high utilization rate or when disks I/O requests overwhelm the I/O subsystem. Scalability is a relative property, but it can be measured accurately. A scalable system reacts more gracefully to increased load than does a nonscalable one. First, its performance degrades more moderately; and second, its resources reach a saturated state later. Even perfect design cannot accommodate an ever-growing load. Adding new resources might solve the problem, but it might generate additional indirect load on other resources (for example, adding machines to a distributed system can clog the network and increase service loads). Even worse, expanding the system can call for expensive design modications. A scalable system should have the potential to grow without these problems. In a distributed system, the ability to scale up gracefully is of special importance, since expanding the network by adding new machines or interconnecting two networks is commonplace. In short, a scalable design should withstand high service load, accommodate growth of the user community, and allow simple integration of added resources. Scalability is related to fault tolerance, discussed earlier. A heavily loaded component can become paralyzed and behave like a faulty component. In addition, shifting the load from a faulty component to that components backup can saturate the latter. Generally, having spare resources is essential for ensuring reliability as well as for handling peak loads gracefully. Thus, the multiple resources in a distributed system represent an inherent advantage, giving the system a greater potential for fault tolerance and scalability"
Justify with an example how the libraries may also provide more complex versions of the basic system calls,"The libraries may also provide more complex versions of the basic system calls .For example, the C languages buffered le-handling functions are all implemented in the system libraries, providing more advanced control of le I/O than the basic kernel system calls","The system libraries provide many types of functionality. At the simplest level, they allow applications to make system calls to the Linux kernel. Making a system call involves transferring control from unprivileged user mode to privileged kernel mode; the details of this transfer vary from architecture to architecture. The libraries take care of collecting the system-call arguments and, if necessary, arranging those arguments in the special form necessary to make the system call. The libraries may also provide more complex versions of the basic system calls. For example, the C languages buffered le-handling functions are all implemented in the system libraries, providing more advanced control of le I/O than the basic kernel system calls. The libraries also provide routines that do not correspond to system calls at all, such as sorting algorithms, mathematical functions, and string-manipulation routines. All the functions necessary to support the running of UNIX or POSIX applications are implemented in the system libraries. The Linux system includes a wide variety of user-mode programsboth system utilities and user utilities. The system utilities include all the programs necessary to initialize and then administer the system, such as those to set up networking interfaces and to add and remove users from the system"
Justify with an example how a module may register many types of functionality; it is not limited to only one type,"A module may register many types of functionality; it is not limited to only one type .For example, a device driver might want to register two separate mechanisms for accessing the device","The kernel maintains dynamic tables of all known drivers and provides a set of routines to allow drivers to be added to or removed from these tables at any time. The kernel makes sure that it calls a modules startup routine when that module is loaded and calls the modules cleanup routine before that module is unloaded. These routines are responsible for registering the modules functionality. A module may register many types of functionality; it is not limited to only one type. For example, a device driver might want to register two separate mechanisms for accessing the device. Registration tables include, among others, the following items: Device drivers. These drivers include character devices (such as printers, terminals, and mice), block devices (including all disk drives), and network interface devices. File systems. The le system may be anything that implements Linuxs virtual le system calling routines. It might implement a format for storing les on a disk, but it might equally well be a network le system, such as NFS, or a virtual le system whose contents are generated on demand, such as Linuxs /proc le system"
Justify with an example how various important environment variables have conventional meanings to related parts of the system software,"Various important environment variables have conventional meanings to related parts of the system software .For example, the TERM variable is set up to name the type of terminal connected to a users login session","However, a completely new environment is set up when a new program is invoked. On calling exec(), a process must supply the environment for the new program. The kernel passes these environment variables to the next program, replacing the processs current environment. The kernel otherwise leaves the environment and command-line vectors alonetheir interpretation is left entirely to the user-mode libraries and applications. The passing of environment variables from one process to the next and the inheriting of these variables by the children of a process provide exible ways to pass information to components of the user-mode system software. Various important environment variables have conventional meanings to related parts of the system software. For example, the TERM variable is set up to name the type of terminal connected to a users login session. Many programs use this variable to determine how to perform operations on the users display, such as moving the cursor and scrolling a region of text. Programs with multilingual support use the LANG variable to determine the language in which to display system messages for programs that include multilingual support. The environment-variable mechanism custom-tailors the operating system on a per-process basis. Users can choose their own languages or select their own editors independently of one another"
Justify with an example how zONE HIGHMEM (for high memory) refers to physical memory that is not mapped into the kernel address space,"ZONE HIGHMEM (for high memory) refers to physical memory that is not mapped into the kernel address space .For example, on the 32-bit Intel architecture (where 232 provides a 4-GB address space), the kernel is mapped into the rst 896 MB of the address space; the remaining memory is referred to as high memory and is allocated from ZONE HIGHMEM","18.6 Memory Management Memory management under Linux has two components. The rst deals with allocating and freeing physical memorypages, groups of pages, and small blocks of RAM. The second handles virtual memory, which is memory-mapped into the address space of running processes. In this section, we describe these two components and then examine the mechanisms by which the loadable components of a new program are brought into a processs virtual memory in response to an exec() system call. 18.6 Memory Management Management of Physical Memory Due to specic hardware constraints, Linux separates physical memory into four different zones, or regions: ZONE DMA ZONE DMA32 ZONE NORMAL ZONE HIGHMEM These zones are architecture specic. For example, on the Intel x86-32 architecture, certain ISA (industry standard architecture) devices can only access the lower 16 MB of physical memory using DMA. On these systems, the rst 16 MB of physical memory comprise ZONE DMA. On other systems, certain devices can only access the rst 4 GB of physical memory, despite supporting 64bit addresses. On such systems, the rst 4 GB of physical memory comprise ZONE DMA32. ZONE HIGHMEM (for high memory) refers to physical memory that is not mapped into the kernel address space. For example, on the 32-bit Intel architecture (where 232 provides a 4-GB address space), the kernel is mapped into the rst 896 MB of the address space; the remaining memory is referred to as high memory and is allocated from ZONE HIGHMEM. Finally, ZONE NORMAL comprises everything else the normal, regularly mapped pages. Whether an architecture has a given zone depends on its constraints. A modern, 64-bit architecture such as Intel x86-64 has a small 16 MB ZONE DMA (for legacy devices) and all the rest of its memory in ZONE NORMAL, with no high memory. The relationship of zones and physical addresses on the Intel x86-32 architecture is shown in Figure 18.3. The kernel maintains a list of free pages for each zone. When a request for physical memory arrives, the kernel satises the request using the appropriate zone"
Justify with an example how the number of objects in the cache depends on the size of the associated slab,"The number of objects in the cache depends on the size of the associated slab .For example, a 12-KB slab (made up of three contiguous 4-KB pages) could store six 2-KB objects","8KB 16KB 4KB 8KB 4KB 18.6 Memory Management kernel objects 3-KB objects physically contiguous pages 7-KB objects Each cache is populated with objects that are instantiations of the kernel data structure the cache represents. For example, the cache representing inodes stores instances of inode structures, and the cache representing process descriptors stores instances of process descriptor structures. The relationship among slabs, caches, and objects is shown in Figure 18.5. The gure shows two kernel objects 3 KB in size and three objects 7 KB in size. These objects are stored in the respective caches for 3-KB and 7-KB objects. The slab-allocation algorithm uses caches to store kernel objects. When a cache is created, a number of objects are allocated to the cache. The number of objects in the cache depends on the size of the associated slab. For example, a 12-KB slab (made up of three contiguous 4-KB pages) could store six 2-KB objects. Initially, all the objects in the cache are marked as free. When a new object for a kernel data structure is needed, the allocator can assign any free object from the cache to satisfy the request. The object assigned from the cache is marked as used. Lets consider a scenario in which the kernel requests memory from the slab allocator for an object representing a process descriptor. In Linux systems, a process descriptor is of the type struct task struct, which requires approximately 1.7 KB of memory. When the Linux kernel creates a new task, it requests the necessary memory for the struct task struct object from its cache. The cache will fulll the request using a struct task struct object that has already been allocated in a slab and is marked as free"
Justify with an example how the /proc le system provides a way for programs to access this information as plain text les; the standard UNIX user environment provides powerful tools to process such les,"The /proc le system provides a way for programs to access this information as plain text les; the standard UNIX user environment provides powerful tools to process such les .For example, in the past, the traditional UNIX ps command for listing the states of all running processes has been implemented as a privileged process that reads the process state directly from the kernels virtual memory","Each subdirectory of the le system corresponded not to a directory on any disk but rather to an active process on the current system. A listing of the le system reveals one directory per process, with the directory name being the ASCII decimal representation of the processs unique process identier (PID). Linux implements such a /proc le system but extends it greatly by adding a number of extra directories and text les under the le systems root directory. These new entries correspond to various statistics about the kernel and the associated loaded drivers. The /proc le system provides a way for programs to access this information as plain text les; the standard UNIX user environment provides powerful tools to process such les. For example, in the past, the traditional UNIX ps command for listing the states of all running processes has been implemented as a privileged process that reads the process state directly from the kernels virtual memory. Under Linux, this command is implemented as an entirely unprivileged program that simply parses and formats the information from /proc. The /proc le system must implement two things: a directory structure and the le contents within. Because a UNIX le system is dened as a set of le and directory inodes identied by their inode numbers, the /proc le system must dene a unique and persistent inode number for each directory and the associated les. Once such a mapping exists, the le system can use this inode number to identify just what operation is required when a user tries to read from a particular le inode or to perform a lookup in a particular directory inode. When data are read from one of these les, the /proc le system will collect the appropriate information, format it into textual form, and place it into the requesting processs read buffer"
Justify with an example how requests originating from a process go in that processs list,"Requests originating from a process go in that processs list .For example, if two processes are issuing I/O requests, CFQ will maintain two separate lists of requests, one for each process","Although a simple elevator algorithm remains available, the default I/O scheduler is now the Completely Fair Queueing (CFQ) scheduler. The CFQ I/O scheduler is fundamentally different from elevator-based algorithms. Instead of sorting requests into a list, CFQ maintains a set of listsby default, one for each process. Requests originating from a process go in that processs list. For example, if two processes are issuing I/O requests, CFQ will maintain two separate lists of requests, one for each process. The lists are maintained according to the C-SCAN algorithm. CFQ services the lists differently as well. Where a traditional C-SCAN algorithm is indifferent to a specic process, CFQ services each processs list round-robin. It pulls a congurable number of requests (by default, four) from each list before moving on to the next. This method results in fairness at the process leveleach process receives an equal fraction of the disks bandwidth. The result is benecial with interactive workloads where I/O latency is important. In practice, however, CFQ performs well with most workloads"
Justify with an example how the kernel also generates signals internally,"The kernel also generates signals internally .For example, it can send a signal to a server process when data arrive on a network channel, to a parent process when a child terminates, or to a waiting process when a timer expires","However, a limited number of signals are available, and they cannot carry information. Only the fact that a signal has occurred is available to a process. Signals are not generated only by processes. The kernel also generates signals internally. For example, it can send a signal to a server process when data arrive on a network channel, to a parent process when a child terminates, or to a waiting process when a timer expires. Internally, the Linux kernel does not use signals to communicate with processes running in kernel mode. If a kernel-mode process is expecting an event to occur, it will not use signals to receive notication of that event"
Justify with an example how this procedure allows multiple processes to wait for a single event,"This procedure allows multiple processes to wait for a single event .For example, if several processes are trying to read a le from a disk, then they will all be awakened once the data have been read into memory successfully","Rather, communication about incoming asynchronous events within the kernel takes place through the use of scheduling states and wait queue structures. These mechanisms allow kernel-mode processes to inform one another about relevant events, and they also allow events to be generated by device drivers or by the networking system. Whenever a process wants to wait for some event to complete, it places itself on a wait queue associated with that event and tells the scheduler that it is no longer eligible for execution. Once the event has completed, every process on the wait queue will be awoken. This procedure allows multiple processes to wait for a single event. For example, if several processes are trying to read a le from a disk, then they will all be awakened once the data have been read into memory successfully. Although signals have always been the main mechanism for communicating asynchronous events among processes, Linux also implements the semaphore mechanism of System V UNIX. A process can wait on a semaphore as easily as it can wait for a signal, but semaphores have two advantages: large numbers of semaphores can be shared among multiple independent processes, and operations on multiple semaphores can be performed atomically"
Justify with an example how this mechanism allows a program to run with privileges different from those of the user running the program,"This mechanism allows a program to run with privileges different from those of the user running the program .For example, the lpr program (which submits a job to a print queue) has access to the systems print queues even if the user running that program does not","The only exception is the privileged root UID. A process with this special UID is granted automatic access to any object in the system, bypassing normal access checks. Such processes are also granted permission to perform privileged operations, such as reading any physical memory or opening reserved network sockets. This mechanism allows the kernel to prevent normal users from accessing these resources: most of the kernels key internal resources are implicitly owned by the root UID. Linux implements the standard UNIX setuid mechanism described in Section A.3.2. This mechanism allows a program to run with privileges different from those of the user running the program. For example, the lpr program (which submits a job to a print queue) has access to the systems print queues even if the user running that program does not. The UNIX implementation of setuid distinguishes between a processs real and effective UID. The real UID is that of the user running the program; the effective UID is that of the les owner. Under Linux, this mechanism is augmented in two ways. First, Linux implements the POSIX specications saved user-id mechanism, which allows a process to drop and reacquire its effective UID repeatedly. For security reasons, a program may want to perform most of its operations in a safe mode, waiving the privileges granted by its setuid status; but it may wish to perform selected operations with all its privileges. Standard UNIX implementations achieve this capacity only by swapping the real and effective UIDs. When this is done, the previous effective UID is remembered, but the programs real UID does not always correspond to the UID of the user running the program. Saved UIDs allow a process to set its effective UID to its real UID and then return to the previous value of its effective UID without having to modify the real UID at any time"
Justify with an example how this mechanism allows a client to pass access to a single le selectively to some server process without granting that process any other privileges,"This mechanism allows a client to pass access to a single le selectively to some server process without granting that process any other privileges .For example, it is no longer necessary for a print server to be able to read all the les of a user who submits a new print job","The second enhancement provided by Linux is the addition of a process characteristic that grants just a subset of the rights of the effective UID. The fsuid and fsgid process properties are used when access rights are granted to les. The appropriate property is set every time the effective UID or GID is set. However, the fsuid and fsgid can be set independently of the effective ids, allowing a process to access les on behalf of another user without taking on the identity of that other user in any other way. Specically, server processes can use this mechanism to serve les to a certain user without becoming vulnerable to being killed or suspended by that user. Finally, Linux provides a mechanism for exible passing of rights from one program to anothera mechanism that has become common in modern versions of UNIX. When a local network socket has been set up between any two processes on the system, either of those processes may send to the other process a le descriptor for one of its open les; the other process receives a duplicate le descriptor for the same le. This mechanism allows a client to pass access to a single le selectively to some server process without granting that process any other privileges. For example, it is no longer necessary for a print server to be able to read all the les of a user who submits a new print job. The print client can simply pass the server le descriptors for any les to be printed, denying the server access to any of the users other les. 18.12 Summary Linux is a modern, free operating system based on UNIX standards. It has been designed to run efciently and reliably on common PC hardware; it also runs on a variety of other platforms, such as mobile phones. It provides a programming interface and user interface compatible with standard UNIX systems and can run a large number of UNIX applications, including an increasing number of commercially supported applications"
Justify with an example how the amount of the boost depends on the device for which the thread was waiting,"The amount of the boost depends on the device for which the thread was waiting .For example, a thread waiting for keyboard I/O would get a large priority increase, whereas a thread waiting for a disk operation would get a moderate one","The priority of the preempted thread may be modied before it is placed back on the dispatcher queues. If the preempted thread is in the variablepriority class, its priority is lowered. The priority is never lowered below the base priority. Lowering the threads priority tends to limit the CPU consumption of compute-bound threads versus I/O-bound threads. When a variable-priority thread is released from a wait operation, the dispatcher boosts the priority. The amount of the boost depends on the device for which the thread was waiting. For example, a thread waiting for keyboard I/O would get a large priority increase, whereas a thread waiting for a disk operation would get a moderate one. This strategy tends to give good response times to interactive threads using a mouse and windows. It also enables I/O-bound threads to keep the I/O devices busy while permitting compute-bound threads to use spare CPU cycles in the background. In addition, the thread associated with the users active GUI window receives a priority boost to enhance its response time. Scheduling occurs when a thread enters the ready or wait state, when a thread terminates, or when an application changes a threads priority or processor afnity. If a higher-priority thread becomes ready while a lowerpriority thread is running, the lower-priority thread is preempted. This preemption gives the higher-priority thread preferential access to the CPU"
"Justify with an example how if no debugger is running, a message is sent to the processs exception port to give the environmental subsystem a chance to translate the exception","If no debugger is running, a message is sent to the processs exception port to give the environmental subsystem a chance to translate the exception .For example, the POSIX environment translates Windows exception messages into POSIX signals before sending them to the thread that caused the exception","When an exception occurs in kernel mode, the exception dispatcher simply calls a routine to locate the exception handler. If no handler is found, a fatal system error occurs, and the user is left with the infamous blue screen of death that signies system failure. Exception handling is more complex for user-mode processes, because an environmental subsystem (such as the POSIX system) sets up a debugger port and an exception port for every process it creates. (For details on ports, see Section 19.3.3.4.) If a debugger port is registered, the exception handler sends the exception to the port. If the debugger port is not found or does not handle that exception, the dispatcher attempts to nd an appropriate exception handler. If no handler is found, the debugger is called again to catch the error for debugging. If no debugger is running, a message is sent to the processs exception port to give the environmental subsystem a chance to translate the exception. For example, the POSIX environment translates Windows exception messages into POSIX signals before sending them to the thread that caused the exception. Finally, if nothing else works, the kernel simply terminates the process containing the thread that caused the exception. When Windows fails to handle an exception, it may construct a description of the error that occurred and request permission from the user to send the information back to Microsoft for further analysis. In some cases, Microsofts automated analysis may be able to recognize the error immediately and suggest a x or workaround"
Justify with an example how thread attach is used by kernel worker threads that need to execute in the context of the process originating a work request,"Thread attach is used by kernel worker threads that need to execute in the context of the process originating a work request .For example, the VM manager might use thread attach when it needs access to a processs working set or page tables, and the I/O manager might use it in updating the status variable in a process for asynchronous I/O operations","The debugger support in the process manager includes the APIs to suspend and resume threads and to create threads that begin in suspended mode. There are also process-manager APIs that get and set a threads register context and access another processs virtual memory. Threads can be created in the current process; they can also be injected into another process. The debugger makes use of thread injection to execute code within a process being debugged. While running in the executive, a thread can temporarily attach to a different process. Thread attach is used by kernel worker threads that need to execute in the context of the process originating a work request. For example, the VM manager might use thread attach when it needs access to a processs working set or page tables, and the I/O manager might use it in updating the status variable in a process for asynchronous I/O operations. The process manager also supports impersonation. Each thread has an associated security token. When the login process authenticates a user, the security token is attached to the users process and inherited by its child processes. The token contains the security identity (SID) of the user, the SIDs of the groups the user belongs to, the privileges the user has, and the integrity level of the process. By default, all threads within a process share a common token, representing the user and the application that started the process. However, a thread running in a process with a security token belonging to one user can set a thread-specic token belonging to another user to impersonate that user"
Justify with an example how the I/O request may be completed in a context different from the one in which it was made,"The I/O request may be completed in a context different from the one in which it was made .For example, if a driver is performing its part of an I/O operation and is forced to block for an extended time, it may queue the IRP to a worker thread to continue processing in the system context","The I/O manager converts the requests it receives into a standard form called an I/O request packet (IRP). It then forwards the IRP to the rst driver in the targeted I/O stack for processing. After a driver processes the IRP, it calls the I/O manager either to forward the IRP to the next driver in the stack or, if all processing is nished, to complete the operation represented by the IRP. The I/O request may be completed in a context different from the one in which it was made. For example, if a driver is performing its part of an I/O operation and is forced to block for an extended time, it may queue the IRP to a worker thread to continue processing in the system context. In the original thread, the driver returns a status indicating that the I/O request is pending so that the thread can continue executing in parallel with the I/O operation. An IRP may also be processed in interrupt-service routines and completed in an arbitrary process context. Because some nal processing may need to take place in the context that initiated the I/O, the I/O manager uses an APC to do nal I/O-completion processing in the process context of the originating thread. The I/O stack model is very exible. As a driver stack is built, various drivers have the opportunity to insert themselves into the stack as lter drivers"
Justify with an example how the PnP manager also supports other requests,"The PnP manager also supports other requests .For example, queryremove, which operates similarly to query-stop, is employed when a user is getting ready to eject a removable device, such as a USB storage device","The PnP manager handles dynamic reconguration as follows. First, it gets a list of devices from each bus driver (for example, PCI or USB). It loads the installed driver (after nding one, if necessary) and sends an add-device request to the appropriate driver for each device. The PnP manager then gures out the optimal resource assignments and sends a start-device request to each driver specifying the resource assignments for the device. If a device needs to be recongured, the PnP manager sends a query-stop request, which asks the driver whether the device can be temporarily disabled. If the driver can disable the device, then all pending operations are completed, and new operations are prevented from starting. Finally, the PnP manager sends a stop request and can then recongure the device with a new start-device request. The PnP manager also supports other requests. For example, queryremove, which operates similarly to query-stop, is employed when a user is getting ready to eject a removable device, such as a USB storage device. The surprise-remove request is used when a device fails or, more likely, when a user removes a device without telling the system to stop it rst. Finally, the remove request tells the driver to stop using a device permanently. Many programs in the system are interested in the addition or removal of devices, so the PnP manager supports notications. Such a notication, for example, gives GUI le menus the information they need to update their list of disk volumes when a new storage device is attached or removed. Installing devices often results in adding new services to the svchost.exe processes in the system. These services frequently set themselves up to run whenever the system boots and continue to run even if the original device is never plugged into the system. Windows 7 introduced a service-trigger mechanism in the service control manager (SCM), which manages the system services. With this mechanism, services can register themselves to start only when SCM receives a notication from the PnP manager that the device of interest has been added to the system"
"Justify with an example how in addition to the program or data for a job, the programmer supplied control cards, which contained directives to the resident monitor indicating what program to run","In addition to the program or data for a job, the programmer supplied control cards, which contained directives to the resident monitor indicating what program to run .For example, a normal user program might require one of three programs to run: the FORTRAN compiler (FTN), the assembler (ASM), or the users program (RUN)","But how would the resident monitor know which program to execute? Previously, the operator had been given a short description of what programs were to be run on what data. Control cards were introduced to provide this information directly to the monitor. The idea is simple. In addition to the program or data for a job, the programmer supplied control cards, which contained directives to the resident monitor indicating what program to run. For example, a normal user program might require one of three programs to run: the FORTRAN compiler (FTN), the assembler (ASM), or the users program (RUN). We could use a separate control card for each of these: $FTN Execute the FORTRAN compiler. $ASM Execute the assembler"
"Justify with an example how depending on the controller, more than one device may be attached","Depending on the controller, more than one device may be attached .For instance, seven or more devices can be attached to the small computer-systems interface (SCSI) controller","Storage is only one of many types of I/O devices within a computer. A large portion of operating system code is dedicated to managing I/O, both because of its importance to the reliability and performance of a system and because of the varying nature of the devices. Next, we provide an overview of I/O. A general-purpose computer system consists of CPUs and multiple device controllers that are connected through a common bus. Each device controller is in charge of a specic type of device. Depending on the controller, more than one device may be attached. For instance, seven or more devices can be attached to the small computer-systems interface (SCSI) controller. A device controller maintains some local buffer storage and a set of special-purpose registers. The device controller is responsible for moving the data between the peripheral devices that it controls and its local buffer storage. Typically, operating systems have a device driver for each device controller. This device driver understands the device controller and provides the rest of the operating system with a uniform interface to the device. To start an I/O operation, the device driver loads the appropriate registers within the device controller. The device controller, in turn, examines the contents of these registers to determine what action to take (such as read a character from the keyboard). The controller starts the transfer of data from the device to its local buffer. Once the transfer of data is complete, the device controller informs the device driver via an interrupt that it has nished its operation. The device driver then returns control to the operating system, possibly returning the data or a pointer to the data if the operation was a read"
"Justify with an example how special hardware can differentiate the multiple processors, or the software can be written to allow only one boss and multiple workers","Special hardware can differentiate the multiple processors, or the software can be written to allow only one boss and multiple workers .For instance, Sun Microsystems operating system SunOS Version 4 provided asymmetric multiprocessing, whereas Version 5 (Solaris) is symmetric on the same hardware","However, we must carefully control I/O to ensure that the data reach the appropriate processor. Also, since the CPUs are separate, one may be sitting idle while another is overloaded, resulting in inefciencies. These inefciencies can be avoided if the processors share certain data structures. A multiprocessor system of this form will allow processes and resourcessuch as memory to be shared dynamically among the various processors and can lower the variance among the processors. Such a system must be written carefully, as we shall see in Chapter 5. Virtually all modern operating systemsincluding Windows, Mac OS X, and Linuxnow provide support for SMP. The difference between symmetric and asymmetric multiprocessing may result from either hardware or software. Special hardware can differentiate the multiple processors, or the software can be written to allow only one boss and multiple workers. For instance, Sun Microsystems operating system SunOS Version 4 provided asymmetric multiprocessing, whereas Version 5 (Solaris) is symmetric on the same hardware. Multiprocessing adds CPUs to increase computing power. If the CPU has an integrated memory controller, then adding CPUs can also increase the amount CPU1 registers registers cache memory of memory addressable in the system. Either way, multiprocessing can cause a system to change its memory access model from uniform memory access (UMA) to non-uniform memory access (NUMA). UMA is dened as the situation in which access to any RAM from any CPU takes the same amount of time. With NUMA, some parts of memory may take longer to access than other parts, creating a performance penalty. Operating systems can minimize the NUMA penalty through resource management, as discussed in Section 9.5.4"
"Justify with an example how when the counter reaches 0, an interrupt occurs","When the counter reaches 0, an interrupt occurs .For instance, a 10-bit counter with a 1-millisecond clock allows interrupts at intervals from 1 millisecond to 1,024 milliseconds, in steps of 1 millisecond","We cannot allow a user program to get stuck in an innite loop or to fail to call system services and never return control to the operating system. To accomplish this goal, we can use a timer. A timer can be set to interrupt the computer after a specied period. The period may be xed (for example, 1/60 second) or variable (for example, from 1 millisecond to 1 second). A variable timer is generally implemented by a xed-rate clock and a counter. The operating system sets the counter. Every time the clock ticks, the counter is decremented. When the counter reaches 0, an interrupt occurs. For instance, a 10-bit counter with a 1-millisecond clock allows interrupts at intervals from 1 millisecond to 1,024 milliseconds, in steps of 1 millisecond. Before turning over control to the user, the operating system ensures that the timer is set to interrupt. If the timer interrupts, control transfers automatically to the operating system, which may treat the interrupt as a fatal error or may give the program more time. Clearly, instructions that modify the content of the timer are privileged"
"Justify with an example how in MS-DOS, the interfaces and levels of functionality are not well separated","In MS-DOS, the interfaces and levels of functionality are not well separated .For instance, application programs are able to access the basic I/O routines to write directly to the display and disk drives","In MS-DOS, the interfaces and levels of functionality are not well separated. For instance, application programs are able to access the basic I/O routines to write directly to the display and disk drives. Such freedom leaves MS-DOS vulnerable to errant (or malicious) programs, causing entire system crashes when user programs fail. Of course, MS-DOS was also limited by the hardware of its era. Because the Intel 8088 for which it was written provides no dual mode and no hardware protection, the designers of MS-DOS had no choice but to leave the base hardware accessible. Another example of limited structuring is the original UNIX operating system. Like MS-DOS, UNIX initially was limited by hardware functionality. It consists of two separable parts: the kernel and the system programs. The kernel resident system program ROM BIOS device drivers 2.7 Operating-System Structure (the users) shells and commands compilers and interpreters system libraries system-call interface to the kernel signals terminal handling character I/O system terminal drivers file system swapping block I/O system disk and tape drivers CPU scheduling page replacement demand paging virtual memory kernel interface to the hardware terminal controllers terminals device controllers disks and tapes memory controllers physical memory is further separated into a series of interfaces and device drivers, which have been added and expanded over the years as UNIX has evolved. We can view the traditional UNIX operating system as being layered to some extent, as shown in hardware is the kernel. The kernel provides the le system, CPU scheduling, memory management, and other operating-system functions through system calls. Taken in sum, that is an enormous amount of functionality to be combined into one level. This monolithic structure was difcult to implement and maintain. It had a distinct performance advantage, however: there is very little overhead in the system call interface or in communication within the kernel"
"Justify with an example how as we will see in Chapter 8, advanced memory-management techniques may require that extra data be switched with each context","As we will see in Chapter 8, advanced memory-management techniques may require that extra data be switched with each context .For instance, the address space of the current process must be preserved as the space of the next task is prepared for use","Switching the CPU to another process requires performing a state save of the current process and a state restore of a different process. This task is known as a context switch. When a context switch occurs, the kernel saves the context of the old process in its PCB and loads the saved context of the new process scheduled to run. Context-switch time is pure overhead, because the system does no useful work while switching. Switching speed varies from machine to machine, depending on the memory speed, the number of registers that must be copied, and the existence of special instructions (such as a single instruction to load or store all registers). A typical speed is a few milliseconds. Context-switch times are highly dependent on hardware support. For instance, some processors (such as the Sun UltraSPARC) provide multiple sets of registers. A context switch here simply requires changing the pointer to the current register set. Of course, if there are more active processes than there are register sets, the system resorts to copying register data to and from memory, as before. Also, the more complex the operating system, the greater the amount of work that must be done during a context switch. As we will see in Chapter 8, advanced memory-management techniques may require that extra data be switched with each context. For instance, the address space of the current process must be preserved as the space of the next task is prepared for use. How the address space is preserved, and what amount of work is needed to preserve it, depend on the memory-management method of the operating system"
Justify with an example how even an individual user may work on many tasks at the same time,"Even an individual user may work on many tasks at the same time .For instance, a user may be editing, listening to music, and compiling in parallel","Modularity. We may want to construct the system in a modular fashion, dividing the system functions into separate processes or threads, as we discussed in Chapter 2. Convenience. Even an individual user may work on many tasks at the same time. For instance, a user may be editing, listening to music, and compiling in parallel. Cooperating processes require an interprocess communication (IPC) mechanism that will allow them to exchange data and information. There are two fundamental models of interprocess communication: shared memory and message passing. In the shared-memory model, a region of memory that is shared by cooperating processes is established. Processes can then exchange information by reading and writing data to the shared region. In the message-passing model, communication takes place by means of messages exchanged between the cooperating processes. The two communications models are contrasted in Both of the models just mentioned are common in operating systems, and many systems implement both. Message passing is useful for exchanging smaller amounts of data, because no conicts need be avoided. Message passing is also easier to implement in a distributed system than shared memory"
"Justify with an example how mach guarantees that multiple messages from the same sender are queued in rst-in, rst-out (FIFO) order but does not guarantee an absolute ordering","Mach guarantees that multiple messages from the same sender are queued in rst-in, rst-out (FIFO) order but does not guarantee an absolute ordering .For instance, messages from two senders may be queued in any order","The port allocate() system call creates a new mailbox and allocates space for its queue of messages. The maximum size of the message queue defaults to eight messages. The task that creates the mailbox is that mailboxs owner. The owner is also allowed to receive from the mailbox. Only one task at a time can either own or receive from a mailbox, but these rights can be sent to other tasks. The mailboxs message queue is initially empty. As messages are sent to the mailbox, the messages are copied into the mailbox. All messages have the same priority. Mach guarantees that multiple messages from the same sender are queued in rst-in, rst-out (FIFO) order but does not guarantee an absolute ordering. For instance, messages from two senders may be queued in any order. The messages themselves consist of a xed-length header followed by a variable-length data portion. The header indicates the length of the message and includes two mailbox names. One mailbox name species the mailbox to which the message is being sent. Commonly, the sending thread expects a reply, so the mailbox name of the sender is passed on to the receiving task, which can use it as a return address"
"Justify with an example how the return message contains any data resulting from that call, which is executed by the DFS daemon on behalf of the client","The return message contains any data resulting from that call, which is executed by the DFS daemon on behalf of the client .For instance, a message might contain a request to transfer a whole le to a client or be limited to a simple block request","Two approaches are common. First, the binding information may be predetermined, in the form of xed port addresses. At compile time, an RPC call has a xed port number associated with it. Once a program is compiled, the server cannot change the port number of the requested service. Second, binding can be done dynamically by a rendezvous mechanism. Typically, an operating system provides a rendezvous (also called a matchmaker) daemon on a xed RPC port. A client then sends a message containing the name of the RPC to the rendezvous daemon requesting the port address of the RPC it needs to execute. The port number is returned, and the RPC calls can be sent to that port until the process terminates (or the server crashes). This method requires the extra overhead of the initial request but is more exible than the rst approach. Figure 3.23 shows a sample interaction. The RPC scheme is useful in implementing a distributed le system (Chapter 17). Such a system can be implemented as a set of RPC daemons and clients. The messages are addressed to the distributed le system port on a server on which a le operation is to take place. The message contains the disk operation to be performed. The disk operation might be read, write, rename, delete, or status, corresponding to the usual le-related system calls. The return message contains any data resulting from that call, which is executed by the DFS daemon on behalf of the client. For instance, a message might contain a request to transfer a whole le to a client or be limited to a simple block request. In the latter case, several requests may be needed if a whole le is to be transferred. A pipe acts as a conduit allowing two processes to communicate. Pipes were one of the rst IPC mechanisms in early UNIX systems. They typically provide one of the simpler ways for processes to communicate with one another, although they also have some limitations. In implementing a pipe, four issues must be considered: 1. Does the pipe allow bidirectional communication, or is communication unidirectional? 2. If two-way communication is allowed, is it half duplex (data can travel only one way at a time) or full duplex (data can travel in both directions at the same time)? 3. Must a relationship (such as parentchild) exist between the communicating processes? 4. Can the pipes communicate over a network, or must the communicating processes reside on the same machine? In the following sections, we explore two common types of pipes used on both UNIX and Windows systems: ordinary pipes and named pipes"
"Justify with an example how here, each queue gets a certain portion of the CPU time, which it can then schedule among its various processes","Here, each queue gets a certain portion of the CPU time, which it can then schedule among its various processes .For instance, in the foregroundbackground queue example, the foreground queue can be given 80 percent of the CPU time for RR scheduling among its processes, while the background queue receives 20 percent of the CPU to give to its processes on an FCFS basis","Lets look at an example of a multilevel queue scheduling algorithm with ve queues, listed below in order of priority: 1. System processes 2. Interactive processes 3. Interactive editing processes 4. Batch processes 5. Student processes highest priority system processes interactive editing processes student processes lowest priority Each queue has absolute priority over lower-priority queues. No process in the batch queue, for example, could run unless the queues for system processes, interactive processes, and interactive editing processes were all empty. If an interactive editing process entered the ready queue while a batch process was running, the batch process would be preempted. Another possibility is to time-slice among the queues. Here, each queue gets a certain portion of the CPU time, which it can then schedule among its various processes. For instance, in the foregroundbackground queue example, the foreground queue can be given 80 percent of the CPU time for RR scheduling among its processes, while the background queue receives 20 percent of the CPU to give to its processes on an FCFS basis. Normally, when the multilevel queue scheduling algorithm is used, processes are permanently assigned to a queue when they enter the system. If there are separate queues for foreground and background processes, for example, processes do not move from one queue to the other, since processes do not change their foreground or background nature. This setup has the advantage of low scheduling overhead, but it is inexible"
Justify with an example how some CPUs and kernels even support multiple page sizes,"Some CPUs and kernels even support multiple page sizes .For instance, Solaris uses page sizes of 8 KB and 4 MB, depending on the data stored by the pages","When we use a paging scheme, we have no external fragmentation: any free frame can be allocated to a process that needs it. However, we may have some internal fragmentation. Notice that frames are allocated as units. If the memory requirements of a process do not happen to coincide with page boundaries, the last frame allocated may not be completely full. For example, if page size is 2,048 bytes, a process of 72,766 bytes will need 35 pages plus 1,086 bytes. It will be allocated 36 frames, resulting in internal fragmentation of 2,048 1,086 = 962 bytes. In the worst case, a process would need n pages plus 1 byte. It would be allocated n + 1 frames, resulting in internal fragmentation of almost an entire frame. If process size is independent of page size, we expect internal fragmentation to average one-half page per process. This consideration suggests that small page sizes are desirable. However, overhead is involved in each page-table entry, and this overhead is reduced as the size of the pages increases. Also, disk I/O is more efcient when the amount data being transferred is larger (Chapter 10). Generally, page sizes have grown over time as processes, data sets, and main memory have become larger. Today, pages typically are between 4 KB and 8 KB in size, and some systems support even larger page sizes. Some CPUs and kernels even support multiple page sizes. For instance, Solaris uses page sizes of 8 KB and 4 MB, depending on the data stored by the pages. Researchers are now developing support for variable on-the-y page size"
Justify with an example how Certain options and features of a program may be used rarely,"Certain options and features of a program may be used rarely .For instance, the routines on U.S. government computers that balance the budget have not been used in many years","Arrays, lists, and tables are often allocated more memory than they actually need. An array may be declared 100 by 100 elements, even though it is seldom larger than 10 by 10 elements. An assembler symbol table may have room for 3,000 symbols, although the average program has less than 200 symbols. Certain options and features of a program may be used rarely. For instance, the routines on U.S. government computers that balance the budget have not been used in many years. Even in those cases where the entire program is needed, it may not all be needed at the same time"
"Justify with an example how the easiest way to split m frames among n processes is to give everyone an equal share, m/n frames (ignoring frames needed by the operating system for the moment)","The easiest way to split m frames among n processes is to give everyone an equal share, m/n frames (ignoring frames needed by the operating system for the moment) .For instance, if there are 93 frames and ve processes, each process will get 18 frames","Whereas the minimum number of frames per process is dened by the architecture, the maximum number is dened by the amount of available physical memory. In between, we are still left with signicant choice in frame allocation. The easiest way to split m frames among n processes is to give everyone an equal share, m/n frames (ignoring frames needed by the operating system for the moment). For instance, if there are 93 frames and ve processes, each process will get 18 frames. The three leftover frames can be used as a free-frame buffer pool. This scheme is called equal allocation. An alternative is to recognize that various processes will need differing amounts of memory. Consider a system with a 1-KB frame size. If a small student process of 10 KB and an interactive database of 127 KB are the only two processes running in a system with 62 free frames, it does not make much sense to give each process 31 frames. The student process does not need more than 10 frames, so the other 21 are, strictly speaking, wasted"
"Justify with an example how in practice, however, the operating system may have other constraints on the service order for requests","In practice, however, the operating system may have other constraints on the service order for requests .For instance, demand paging may take priority over application I/O, and writes are more urgent than reads if the cache is running out of free pages","For modern disks, the rotational latency can be nearly as large as the average seek time. It is difcult for the operating system to schedule for improved rotational latency, though, because modern disks do not disclose the physical location of logical blocks. Disk manufacturers have been alleviating this problem by implementing disk-scheduling algorithms in the controller hardware built into the disk drive. If the operating system sends a batch of requests to the controller, the controller can queue them and then schedule them to improve both the seek time and the rotational latency. If I/O performance were the only consideration, the operating system would gladly turn over the responsibility of disk scheduling to the disk hardware. In practice, however, the operating system may have other constraints on the service order for requests. For instance, demand paging may take priority over application I/O, and writes are more urgent than reads if the cache is running out of free pages. Also, it may be desirable to guarantee the order of a set of disk writes to make the le system robust in the face of system crashes. Consider what could happen if the operating system allocated a disk page to a le and the application wrote data into that page before the operating system had a chance to ush the le system metadata back to disk. To accommodate such requirements, an operating system may choose to do its own disk scheduling and to spoon-feed the requests to the disk controller, one by one, for some types of I/O"
Justify with an example how the operating system can treat each partition as though it were a separate disk,"The operating system can treat each partition as though it were a separate disk .For instance, one partition can hold a copy of the operating systems executable code, while another holds user les","Most hard disks are low-level-formatted at the factory as a part of the manufacturing process. This formatting enables the manufacturer to test the disk and to initialize the mapping from logical block numbers to defect-free sectors on the disk. For many hard disks, when the disk controller is instructed to low-level-format the disk, it can also be told how many bytes of data space to leave between the header and trailer of all sectors. It is usually possible to choose among a few sizes, such as 256, 512, and 1,024 bytes. Formatting a disk with a larger sector size means that fewer sectors can t on each track; but it also means that fewer headers and trailers are written on each track and more space is available for user data. Some operating systems can handle only a sector size of 512 bytes. Before it can use a disk to hold les, the operating system still needs to record its own data structures on the disk. It does so in two steps. The rst step is to partition the disk into one or more groups of cylinders. The operating system can treat each partition as though it were a separate disk. For instance, one partition can hold a copy of the operating systems executable code, while another holds user les. The second step is logical formatting, or creation of a le system. In this step, the operating system stores the initial le-system data structures onto the disk. These data structures may include maps of free and allocated space and an initial empty directory. To increase efciency, most le systems group blocks together into larger chunks, frequently called clusters. Disk I/O is done via blocks, but le system I/O is done via clusters, effectively assuring that I/O has more sequential-access and fewer random-access characteristics"
Justify with an example how a hot spare is not used for data but is congured to be used as a replacement in case of disk failure,"A hot spare is not used for data but is congured to be used as a replacement in case of disk failure .For instance, a hot spare can be used to rebuild a mirrored pair should one of the disks in the pair fail","One other aspect of most RAID implementations is a hot spare disk or disks. A hot spare is not used for data but is congured to be used as a replacement in case of disk failure. For instance, a hot spare can be used to rebuild a mirrored pair should one of the disks in the pair fail. In this way, the RAID level can be reestablished automatically, without waiting for the failed disk to be replaced. Allocating more than one hot spare allows more than one failure to be repaired without human intervention"
"Justify with an example how when a le is named, it becomes independent of the process, the user, and even the system that created it","When a le is named, it becomes independent of the process, the user, and even the system that created it .For instance, one user might create the le example.c, and another user might edit that le by specifying its name","An executable le is a series of code sections that the loader can bring into memory and execute. A le is named, for the convenience of its human users, and is referred to by its name. A name is usually a string of characters, such as example.c. Some systems differentiate between uppercase and lowercase characters in names, whereas other systems do not. When a le is named, it becomes independent of the process, the user, and even the system that created it. For instance, one user might create the le example.c, and another user might edit that le by specifying its name. The les owner might write the le to a USB disk, send it as an e-mail attachment, or copy it across a network, and it could still be called example.c on the destination system. A les attributes vary from one operating system to another but typically consist of these: Identier. This unique tag, usually a number, identies the le within the le system; it is the non-human-readable name for the le"
Justify with an example how these primitive operations can then be combined to perform other le operations,"These primitive operations can then be combined to perform other le operations .For instance, we can create a copy of a le or copy the le to another I/O device, such as a printer or a displayby creating a new le and then reading from the old and writing to the new","Truncating a le. The user may want to erase the contents of a le but keep its attributes. Rather than forcing the user to delete the le and then recreate it, this function allows all attributes to remain unchanged except for le lengthbut lets the le be reset to length zero and its le space released. These six basic operations comprise the minimal set of required le operations. Other common operations include appending new information to the end of an existing le and renaming an existing le. These primitive operations can then be combined to perform other le operations. For instance, we can create a copy of a le or copy the le to another I/O device, such as a printer or a displayby creating a new le and then reading from the old and writing to the new. We also want to have operations that allow a user to get and set the various attributes of a le. For example, we may want to have operations that allow a user to determine the status of a le, such as the les length, and to set le attributes, such as the les owner. Most of the le operations mentioned involve searching the directory for the entry associated with the named le. To avoid this constant searching, many systems require that an open() system call be made before a le is rst used. The operating system keeps a table, called the open-le table, containing information about all open les. When a le operation is requested, the le is specied via an index into this table, so no searching is required. When the le is no longer being actively used, it is closed by the process, and the operating system removes its entry from the open-le table. create() and delete() are system calls that work with closed rather than open les"
Justify with an example how stored in this table is information regarding the processs use of the le,"Stored in this table is information regarding the processs use of the le .For instance, the current le pointer for each le is found here","This mode is checked against the les permissions. If the request mode is allowed, the le is opened for the process. The open() system call typically returns a pointer to the entry in the open-le table. This pointer, not the actual le name, is used in all I/O operations, avoiding any further searching and simplifying the system-call interface. The implementation of the open() and close() operations is more complicated in an environment where several processes may open the le simultaneously. This may occur in a system where several different applications open the same le at the same time. Typically, the operating system uses two levels of internal tables: a per-process table and a system-wide table. The perprocess table tracks all les that a process has open. Stored in this table is information regarding the processs use of the le. For instance, the current le pointer for each le is found here. Access rights to the le and accounting information can also be included. Each entry in the per-process table in turn points to a system-wide open-le table. The system-wide table contains process-independent information, such as the location of the le on disk, access dates, and le size. Once a le has been opened by one process, the system-wide table includes an entry for the le. When another process executes an open() call, a new entry is simply added to the processs open-le table pointing to the appropriate entry in the system-wide table. Typically, the open-le table also has an open count associated with each le to indicate how many processes have the le open"
Justify with an example how additional syntax is needed to specify the volume of a le,"Additional syntax is needed to specify the volume of a le .For instance, in Windows a volume is specied by a letter followed by a colon","For example, if user A wishes to access her own test le named test.txt, she can simply refer to test.txt. To access the le named test.txt of user B (with directory-entry name userb), however, she might have to refer to /userb/test.txt. Every system has its own syntax for naming les in directories other than the users own. Additional syntax is needed to specify the volume of a le. For instance, in Windows a volume is specied by a letter followed by a colon. Thus, a le specication might be C:\userb\test. Some systems go even further and separate the volume, directory name, and le name parts of the specication. In VMS, for instance, the le login.com might be specied as: u:[sst.jdeck]login.com;1, where u is the name of the volume, sst is the name of the directory, jdeck is the name of the subdirectory, and 1 is the version number. Other systemssuch as UNIX and Linuxsimply treat the volume name as part of the directory name. The rst name given is that of the volume, and the rest is the directory and le. For instance, /u/pbg/test might specify volume u, directory pbg, and le test. A special instance of this situation occurs with the system les. Programs provided as part of the systemloaders, assemblers, compilers, utility routines, libraries, and so onare generally dened as les. When the appropriate commands are given to the operating system, these les are read by the loader and executed. Many command interpreters simply treat such a command as the name of a le to load and execute. In the directory system as we dened it above, this le name would be searched for in the current UFD. One solution would be to copy the system les into each UFD. However, copying all the system les would waste an enormous amount of space. (If the system les require 5 MB, then supporting 12 users would require 5 12 = 60 MB just for copies of the system les.) The standard solution is to complicate the search procedure slightly. A special user directory is dened to contain the system les (for example, user 0). Whenever a le name is given to be loaded, the operating system rst searches the local UFD. If the le is found, it is used. If it is not found, the system automatically searches the special user directory that contains the system les"
"Justify with an example how the rst name given is that of the volume, and the rest is the directory and le","The rst name given is that of the volume, and the rest is the directory and le .For instance, /u/pbg/test might specify volume u, directory pbg, and le test","For example, if user A wishes to access her own test le named test.txt, she can simply refer to test.txt. To access the le named test.txt of user B (with directory-entry name userb), however, she might have to refer to /userb/test.txt. Every system has its own syntax for naming les in directories other than the users own. Additional syntax is needed to specify the volume of a le. For instance, in Windows a volume is specied by a letter followed by a colon. Thus, a le specication might be C:\userb\test. Some systems go even further and separate the volume, directory name, and le name parts of the specication. In VMS, for instance, the le login.com might be specied as: u:[sst.jdeck]login.com;1, where u is the name of the volume, sst is the name of the directory, jdeck is the name of the subdirectory, and 1 is the version number. Other systemssuch as UNIX and Linuxsimply treat the volume name as part of the directory name. The rst name given is that of the volume, and the rest is the directory and le. For instance, /u/pbg/test might specify volume u, directory pbg, and le test. A special instance of this situation occurs with the system les. Programs provided as part of the systemloaders, assemblers, compilers, utility routines, libraries, and so onare generally dened as les. When the appropriate commands are given to the operating system, these les are read by the loader and executed. Many command interpreters simply treat such a command as the name of a le to load and execute. In the directory system as we dened it above, this le name would be searched for in the current UFD. One solution would be to copy the system les into each UFD. However, copying all the system les would waste an enormous amount of space. (If the system les require 5 MB, then supporting 12 users would require 5 12 = 60 MB just for copies of the system les.) The standard solution is to complicate the search procedure slightly. A special user directory is dened to contain the system les (for example, user 0). Whenever a le name is given to be loaded, the operating system rst searches the local UFD. If the le is found, it is used. If it is not found, the system automatically searches the special user directory that contains the system les"
Justify with an example how protection is provided at only the lower level,"Protection is provided at only the lower level .For instance, copying a le may be implemented simply by a sequence of read requests","Other operations, such as renaming, copying, and editing the le, may also be controlled. For many systems, however, these higher-level functions may be implemented by a system program that makes lower-level system calls. Protection is provided at only the lower level. For instance, copying a le may be implemented simply by a sequence of read requests. In this case, a user with read access can also cause the le to be copied, printed, and so on. Many protection mechanisms have been proposed. Each has advantages and disadvantages and must be appropriate for its intended application. A small computer system that is used by only a few members of a research group, for example, may not need the same types of protection as a large corporate computer that is used for research, nance, and personnel operations. We discuss some approaches to protection in the following sections and present a more complete treatment in Chapter 14"
Justify with an example how the allocation and free-spacemanagement algorithms dictate what types of problems the checker can nd and how successful it will be in xing them,"The allocation and free-spacemanagement algorithms dictate what types of problems the checker can nd and how successful it will be in xing them .For instance, if linked allocation is used and there is a link from any block to its next block, then the entire le can be reconstructed from the data blocks, and the directory structure can be recreated","At the start of any metadata change, a status bit is set to indicate that the metadata is in ux. If all updates to the metadata complete successfully, the le system can clear that bit. If, however, the status bit remains set, a consistency checker is run. The consistency checkera systems program such as fsck in UNIX compares the data in the directory structure with the data blocks on disk and tries to x any inconsistencies it nds. The allocation and free-spacemanagement algorithms dictate what types of problems the checker can nd and how successful it will be in xing them. For instance, if linked allocation is used and there is a link from any block to its next block, then the entire le can be reconstructed from the data blocks, and the directory structure can be recreated. In contrast, the loss of a directory entry on an indexed allocation system can be disastrous, because the data blocks have no knowledge of one another. For this reason, UNIX caches directory entries for reads; but any write that results in space allocation, or other metadata changes, is done synchronously, before the corresponding data blocks are written. Of course, problems can still occur if a synchronous write is interrupted by a crash"
"Justify with an example how to minimize the copying needed, we can use information from each les directory entry","To minimize the copying needed, we can use information from each les directory entry .For instance, if the backup program knows when the last backup of a le was done, and the les last write date in the directory indicates that the le has not changed since that date, then the le does not need to be copied again","Another alternative to consistency checking is employed by Network Appliances WAFL le system and the Solaris ZFS le system. These systems never overwrite blocks with new data. Rather, a transaction writes all data and metadata changes to new blocks. When the transaction is complete, the metadata structures that pointed to the old versions of these blocks are updated to point to the new blocks. The le system can then remove the old pointers and the old blocks and make them available for reuse. If the old pointers and blocks are kept, a snapshot is created; the snapshot is a view of the le system before the last update took place. This solution should require no consistency checking if the pointer update is done atomically. WAFL does have a consistency checker, however, so some failure scenarios can still cause metadata corruption. (See Section 12.9 for details of the WAFL le system.) ZFS takes an even more innovative approach to disk consistency. It never overwrites blocks, just like WAFL. However, ZFS goes further and provides checksumming of all metadata and data blocks. This solution (when combined with RAID) assures that data are always correct. ZFS therefore has no consistency checker. (More details on ZFS are found in Section 10.7.6.) Magnetic disks sometimes fail, and care must be taken to ensure that the data lost in such a failure are not lost forever. To this end, system programs can be used to back up data from disk to another storage device, such as a magnetic tape or other hard disk. Recovery from the loss of an individual le, or of an entire disk, may then be a matter of restoring the data from backup. To minimize the copying needed, we can use information from each les directory entry. For instance, if the backup program knows when the last backup of a le was done, and the les last write date in the directory indicates that the le has not changed since that date, then the le does not need to be copied again. A typical backup schedule may then be as follows: Day 1. Copy to a backup medium all les from the disk. This is called a full backup. Day 2. Copy to another medium all les changed since day 1. This is an incremental backup"
Justify with an example how some le systems allow disk storage to be allocated at different levels of granularity,"Some le systems allow disk storage to be allocated at different levels of granularity .For instance, a le system could allocate 4 KB of disk space as a single 4-KB block or as eight 512-byte blocks","Suggest a scheme to ensure that the pointer is never lost as a result of memory failure. Some le systems allow disk storage to be allocated at different levels of granularity. For instance, a le system could allocate 4 KB of disk space as a single 4-KB block or as eight 512-byte blocks. How could we take advantage of this exibility to improve performance? What modications would have to be made to the free-space management scheme in order to support this feature? Discuss how performance optimizations for le systems might result in difculties in maintaining the consistency of the systems in the event of computer crashes. 12.15 Consider a le system on a disk that has both logical and physical block sizes of 512 bytes. Assume that the information about each le is already in memory. For each of the three allocation strategies (contiguous, linked, and indexed), answer these questions: a"
"Justify with an example how in many cases, the main job is I/O, and the processing is merely incidental","In many cases, the main job is I/O, and the processing is merely incidental .For instance, when we browse a web page or edit a le, our immediate interest is to read or enter some information, not to compute an answer","[Vahalia (1996)] (1996). I/O Systems The two main jobs of a computer are I/O and processing. In many cases, the main job is I/O, and the processing is merely incidental. For instance, when we browse a web page or edit a le, our immediate interest is to read or enter some information, not to compute an answer. The role of the operating system in computer I/O is to manage and control I/O operations and I/O devices. Although related topics appear in other chapters, here we bring together the pieces to paint a complete picture of I/O. First, we describe the basics of I/O hardware, because the nature of the hardware interface places constraints on the internal facilities of the operating system. Next, we discuss the I/O services provided by the operating system and the embodiment of these services in the application I/O interface. Then, we explain how the operating system bridges the gap between the hardware interface and the application interface. We also discuss the UNIX System V STREAMS mechanism, which enables an application to assemble pipelines of driver code dynamically. Finally, we discuss the performance aspects of I/O and the principles of operating-system design that improve I/O performance"
Justify with an example how some systems use both techniques,"Some systems use both techniques .For instance, PCs use I/O instructions to control some devices and memory-mapped I/O to control others","How can the processor give commands and data to a controller to accomplish an I/O transfer? The short answer is that the controller has one or more registers for data and control signals. The processor communicates with the controller by reading and writing bit patterns in these registers. One way in which this communication can occur is through the use of special I/O instructions that specify the transfer of a byte or word to an I/O port address. The I/O instruction triggers bus lines to select the proper device and to move bits into or out of a device register. Alternatively, the device controller can support memory-mapped I/O. In this case, the device-control registers are mapped into the address space of the processor. The CPU executes I/O requests using the standard data-transfer instructions to read and write the device-control registers at their mapped locations in physical memory. Some systems use both techniques. For instance, PCs use I/O instructions to control some devices and memory-mapped I/O to control others. Figure 13.2 shows the usual I/O port addresses for PCs. The graphics controller has I/O ports for basic control operations, but the controller has a large memory- I/O address range (hexadecimal) 00000F 20020F 2F82FF 32032F 37837F 3D03DF 3F83FF mapped region to hold screen contents. The process sends output to the screen by writing data into the memory-mapped region. The controller generates the screen image based on the contents of this memory. This technique is simple to use. Moreover, writing millions of bytes to the graphics memory is faster than issuing millions of I/O instructions. But the ease of writing to a memory-mapped I/O controller is offset by a disadvantage. Because a common type of software fault is a write through an incorrect pointer to an unintended region of memory, a memory-mapped device register is vulnerable to accidental modication. Of course, protected memory helps to reduce this risk. An I/O port typically consists of four registers, called the status, control, data-in, and data-out registers"
Justify with an example how The control register can be written by the host to start a command or to change the mode of a device,"The control register can be written by the host to start a command or to change the mode of a device .For instance, a certain bit in the control register of a serial port chooses between full-duplex and half-duplex communication, another bit enables parity checking, a third bit sets the word length to 7 or 8 bits, and other bits select one of the speeds supported by the serial port","The status register contains bits that can be read by the host. These bits indicate states, such as whether the current command has completed, whether a byte is available to be read from the data-in register, and whether a device error has occurred. The control register can be written by the host to start a command or to change the mode of a device. For instance, a certain bit in the control register of a serial port chooses between full-duplex and half-duplex communication, another bit enables parity checking, a third bit sets the word length to 7 or 8 bits, and other bits select one of the speeds supported by the serial port. The data registers are typically 1 to 4 bytes in size. Some controllers have FIFO chips that can hold several bytes of input or output data to expand the capacity of the controller beyond the size of the data register. A FIFO chip can 13.2 I/O Hardware Polling The complete protocol for interaction between the host and a controller can be intricate, but the basic handshaking notion is simple. We explain handshaking with an example. Assume that 2 bits are used to coordinate the producerconsumer relationship between the controller and the host. The controller indicates its state through the busy bit in the status register. (Recall that to set a bit means to write a 1 into the bit and to clear a bit means to write a 0 into it.) The controller sets the busy bit when it is busy working and clears the busy bit when it is ready to accept the next command. The host signals its wishes via the command-ready bit in the command register. The host sets the command-ready bit when a command is available for the controller to execute"
Justify with an example how operating systems that offer virtual memory commonly use the mapping interface for kernel services,"Operating systems that offer virtual memory commonly use the mapping interface for kernel services .For instance, to execute a program, the operating system maps the executable into memory and then transfers control to the entry address of the executable","Memory-mapped le access can be layered on top of block-device drivers. Rather than offering read and write operations, a memory-mapped interface provides access to disk storage via an array of bytes in main memory. The system call that maps a le into memory returns the virtual memory address that contains a copy of the le. The actual data transfers are performed only when needed to satisfy access to the memory image. Because the transfers are handled by the same mechanism as that used for demand-paged virtual memory access, memory-mapped I/O is efcient. Memory mapping is also convenient for programmersaccess to a memory-mapped le is as simple as reading from and writing to memory. Operating systems that offer virtual memory commonly use the mapping interface for kernel services. For instance, to execute a program, the operating system maps the executable into memory and then transfers control to the entry address of the executable. The mapping interface is also commonly used for kernel access to swap space on disk. A keyboard is an example of a device that is accessed through a characterstream interface. The basic system calls in this interface enable an application to get() or put() one character. On top of this interface, libraries can be built that offer line-at-a-time access, with buffering and editing services (for example, when a user types a backspace, the preceding character is removed from the input stream). This style of access is convenient for input devices such as keyboards, mice, and modems that produce data for input spontaneously that is, at times that cannot necessarily be predicted by the application. This access style is also good for output devices such as printers and audio boards, which naturally t the concept of a linear stream of bytes"
Justify with an example how many other approaches to interprocess communication and network communication have been implemented,"Many other approaches to interprocess communication and network communication have been implemented .For instance, Windows provides one interface to the network interface card and a second interface to the network protocols","Think of a wall socket for electricity: any electrical appliance can be plugged in. By analogy, the system calls in the socket interface enable an application to create a socket, to connect a local socket to a remote address (which plugs this application into a socket created by another application), to listen for any remote application to plug into the local socket, and to send and receive packets over the connection. To support the implementation of servers, the socket interface also provides a function called select() that manages a set of sockets. A call to select() returns information about which sockets have a packet waiting to be received and which sockets have room to accept a packet to be sent. The use of select() eliminates the polling and busy waiting that would otherwise be necessary for network I/O. These functions encapsulate the essential behaviors of networks, greatly facilitating the creation of distributed applications that can use any underlying network hardware and protocol stack. Many other approaches to interprocess communication and network communication have been implemented. For instance, Windows provides one interface to the network interface card and a second interface to the network protocols. In UNIX, which has a long history as a proving ground for network technology, we nd half-duplex pipes, full-duplex FIFOs, full-duplex STREAMS, message queues, and sockets. Information on UNIX networking is given in Section A.9. Most computers have hardware clocks and timers that provide three basic functions: Give the current time"
Justify with an example how operating systems can often compensate effectively for transient failures,"Operating systems can often compensate effectively for transient failures .For instance, a disk read() failure results in a read() retry, and a network send() error results in a resend(), if the protocol so species","Some devices, such as tape drives and printers, cannot usefully multiplex the I/O requests of multiple concurrent applications. Spooling is one way operating systems can coordinate concurrent output. Another way to deal with concurrent device access is to provide explicit facilities for coordination. Some operating systems (including VMS) provide support for exclusive device access by enabling a process to allocate an idle device and to deallocate that device when it is no longer needed. Other operating systems enforce a limit of one open le handle to such a device. Many operating systems provide functions that enable processes to coordinate exclusive access among themselves. For instance, Windows provides system calls to wait until a device object becomes available. It also has a parameter to the OpenFile() system call that declares the types of access to be permitted to other concurrent threads. On these systems, it is up to the applications to avoid deadlock. An operating system that uses protected memory can guard against many kinds of hardware and application errors, so that a complete system failure is not the usual result of each minor mechanical malfunction. Devices and I/O transfers can fail in many ways, either for transient reasons, as when a network becomes overloaded, or for permanent reasons, as when a disk controller becomes defective. Operating systems can often compensate effectively for transient failures. For instance, a disk read() failure results in a read() retry, and a network send() error results in a resend(), if the protocol so species. Unfortunately, if an important component experiences a permanent failure, the operating system is unlikely to recover"
"Justify with an example how by contrast, some hardware can provide highly detailed error information, although many current operating systems are not designed to convey this information to the application","By contrast, some hardware can provide highly detailed error information, although many current operating systems are not designed to convey this information to the application .For instance, a failure of a SCSI device is reported by the SCSI protocol in three levels of detail: a sense key that identies the general nature of the failure, such as a hardware error or an illegal request; an additional sense code that states the category of failure, such as a bad command parameter or a self-test failure; and an additional sense-code qualier that gives even more detail, such as which command parameter was in error or which hardware subsystem failed its self-test","Unfortunately, if an important component experiences a permanent failure, the operating system is unlikely to recover. As a general rule, an I/O system call will return one bit of information about the status of the call, signifying either success or failure. In the UNIX operating system, an additional integer variable named errno is used to return an error codeone of about a hundred valuesindicating the general nature of the failure (for example, argument out of range, bad pointer, or le not open). By contrast, some hardware can provide highly detailed error information, although many current operating systems are not designed to convey this information to the application. For instance, a failure of a SCSI device is reported by the SCSI protocol in three levels of detail: a sense key that identies the general nature of the failure, such as a hardware error or an illegal request; an additional sense code that states the category of failure, such as a bad command parameter or a self-test failure; and an additional sense-code qualier that gives even more detail, such as which command parameter was in error or which hardware subsystem failed its self-test. Further, many SCSI devices maintain internal pages of error-log information that can be requested by the hostbut seldom are. Errors are closely related to the issue of protection. A user process may accidentally or purposely attempt to disrupt the normal operation of a system by attempting to issue illegal I/O instructions. We can use various mechanisms to ensure that such disruptions cannot take place in the system"
"Justify with an example how the disadvantages of a hardware implementation include the difculty and expense of making further improvements or of xing bugs, the increased development time (months rather than days), and the decreased exibility","The disadvantages of a hardware implementation include the difculty and expense of making further improvements or of xing bugs, the increased development time (months rather than days), and the decreased exibility .For instance, a hardware RAID controller may not provide any means for the kernel to inuence the order or location of individual block reads and writes, even if the kernel has special information about the workload that would enable it to improve the I/O performance.","The highest performance may be obtained through a specialized implementation in hardware, either in the device or in the controller. The disadvantages of a hardware implementation include the difculty and expense of making further improvements or of xing bugs, the increased development time (months rather than days), and the decreased exibility. For instance, a hardware RAID controller may not provide any means for the kernel to inuence the order or location of individual block reads and writes, even if the kernel has special information about the workload that would enable it to improve the I/O performance. 13.8 Summary The basic hardware elements involved in I/O are buses, device controllers, and the devices themselves. The work of moving data between devices and main memory is performed by the CPU as programmed I/O or is ofoaded to a DMA controller. The kernel module that controls a device is a device driver. The system-call interface provided to applications is designed to handle several basic categories of hardware, including block devices, character devices, memory-mapped les, network sockets, and programmed interval timers. The system calls usually block the processes that issue them, but nonblocking and asynchronous calls are used by the kernel itself and by applications that must not sleep while waiting for an I/O operation to complete"
Justify with an example how this mechanism is used when an otherwise privileged facility needs to be made available to the general user population,"This mechanism is used when an otherwise privileged facility needs to be made available to the general user population .For instance, it might be desirable to allow users to access a network without letting them write their own networking programs","Other methods are used to change domains in operating systems in which userIDs are used for domain denition, because almost all systems need to provide such a mechanism. This mechanism is used when an otherwise privileged facility needs to be made available to the general user population. For instance, it might be desirable to allow users to access a network without letting them write their own networking programs. In such a case, on a UNIX system, the setuid bit on a networking program would be set, causing the userID to change when the program was run. The userID would change to that of a user with network access privilege (such as root, the most powerful userID). One problem with this method is that if a user manages to create a le with userID root and with its setuid bit on, that user can become root and do anything and everything on the system. The setuid mechanism is discussed further in Appendix A. An alternative to this method used in some other operating systems is to place privileged programs in a special directory. The operating system is designed to change the userID of any program run from this directory, either to the equivalent of root or to the userID of the owner of the directory. This eliminates one security problem, which occurs when intruders create programs to manipulate the setuid feature and hide the programs in the system for later use (using obscure le or directory names). This method is less exible than that used in UNIX, however"
"Justify with an example how in these instances, special techniques must be used to allow users access to privileged facilities","In these instances, special techniques must be used to allow users access to privileged facilities .For instance, a daemon process may be started at boot time and run as a special userID","An alternative to this method used in some other operating systems is to place privileged programs in a special directory. The operating system is designed to change the userID of any program run from this directory, either to the equivalent of root or to the userID of the owner of the directory. This eliminates one security problem, which occurs when intruders create programs to manipulate the setuid feature and hide the programs in the system for later use (using obscure le or directory names). This method is less exible than that used in UNIX, however. Even more restrictive, and thus more protective, are systems that simply do not allow a change of userID. In these instances, special techniques must be used to allow users access to privileged facilities. For instance, a daemon process may be started at boot time and run as a special userID. Users then run a separate program, which sends requests to this process whenever they need to use the facility. This method is used by the TOPS-20 operating system. In any of these systems, great care must be taken in writing privileged programs. Any oversight can result in a total lack of protection on the system"
Justify with an example how this type of security breach (or trap door) was shown in the movie War Games,"This type of security breach (or trap door) was shown in the movie War Games .For instance, the code might check for a specic user ID or password, and it might circumvent normal security procedures","In 2010, it was estimated that 90 percent of spam was being delivered by this method. This theft of service is not even considered a crime in most countries! Spyware is a micro example of a macro problem: violation of the principle of least privilege. Under most circumstances, a user of an operating system does not need to install network daemons. Such daemons are installed via two mistakes. First, a user may run with more privileges than necessary (for example, as the administrator), allowing programs that she runs to have more access to the system than is necessary. This is a case of human errora common security weakness. Second, an operating system may allow by default more privileges than a normal user needs. This is a case of poor operating-system design decisions. An operating system (and, indeed, software in general) should allow ne-grained control of access and security, but it must also be easy to manage and understand. Inconvenient or inadequate security measures are bound to be circumvented, causing an overall weakening of the security they were designed to implement. The designer of a program or system might leave a hole in the software that only she is capable of using. This type of security breach (or trap door) was shown in the movie War Games. For instance, the code might check for a specic user ID or password, and it might circumvent normal security procedures. Programmers have been arrested for embezzling from banks by including rounding errors in their code and having the occasional half-cent credited to their accounts. This account crediting can add up to a large amount of money, considering the number of transactions that a large bank executes"
"Justify with an example how the solution, as implemented on some systems, is to record a password history for each user","The solution, as implemented on some systems, is to record a password history for each user .For instance, the system could record the last N passwords and not allow their reuse","Passwords can be either generated by the system or selected by a user. System-generated passwords may be difcult to remember, and thus users may write them down. As mentioned, however, user-selected passwords are often easy to guess (the users name or favorite car, for example). Some systems will check a proposed password for ease of guessing or cracking before accepting it. Some systems also age passwords, forcing users to change their passwords at regular intervals (every three months, for instance). This method is not foolproof either, because users can easily toggle between two passwords. The solution, as implemented on some systems, is to record a password history for each user. For instance, the system could record the last N passwords and not allow their reuse. Several variants on these simple password schemes can be used. For example, the password can be changed more frequently. At the extreme, the password is changed from session to session. A new password is selected (either by the system or by the user) at the end of each session, and that password must be used for the next session. In such a case, even if a password is used by an unauthorized person, that person can use it only once. When the legitimate user tries to use a now-invalid password at the next session, he discovers the security violation. Steps can then be taken to repair the breached security"
Justify with an example how government considers a system to be only as secure as its most far-reaching connection,"government considers a system to be only as secure as its most far-reaching connection .For instance, a top-secret system may be accessed only from within a building also considered top-secret","Networked computers are much more susceptible to security attacks than are standalone systems. Rather than attacks from a known set of access points, such as directly connected terminals, we face attacks from an unknown and large set of access pointsa potentially severe security problem. To a lesser extent, systems connected to telephone lines via modems are also more exposed. In fact, the U.S. government considers a system to be only as secure as its most far-reaching connection. For instance, a top-secret system may be accessed only from within a building also considered top-secret. The system loses its topsecret rating if any form of communication can occur outside that environment. Some government facilities take extreme security precautions. The connectors that plug a terminal into the secure computer are locked in a safe in the ofce when the terminal is not in use. A person must have proper ID to gain access to the building and her ofce, must know a physical lock combination, and must know authentication information for the computer itself to gain access to the computeran example of multifactor authentication"
"Justify with an example how with ssh, the user must know appropriate commands on the remote system","With ssh, the user must know appropriate commands on the remote system .For instance, a user on a Windows machine who connects remotely to a UNIX machine must switch to UNIX commands for the duration of the ssh session. (In networking, a session is a complete round of communication, frequently beginning with a login to authenticate and ending with a logoff to terminate the communication.) Obviously, users would nd it more convenient not to be required to use a different set of commands","There are also various commands to change transfer modes (for binary or ASCII les) and to determine connection status. An important point about ssh and FTP is that they require the user to change paradigms. FTP requires the user to know a command set entirely different from the normal operating-system commands. With ssh, the user must know appropriate commands on the remote system. For instance, a user on a Windows machine who connects remotely to a UNIX machine must switch to UNIX commands for the duration of the ssh session. (In networking, a session is a complete round of communication, frequently beginning with a login to authenticate and ending with a logoff to terminate the communication.) Obviously, users would nd it more convenient not to be required to use a different set of commands. Distributed operating systems are designed to address this problem. In a distributed operating system, users access remote resources in the same way they access local resources. Data and process migration from one site to another is under the control of the distributed operating system"
"Justify with an example how the parts of an IP address progress from the most specic to the most general, with periods separating the elds","The parts of an IP address progress from the most specic to the most general, with periods separating the elds .For instance, bob.cs.brown.edu refers to host bob in the Department of Computer Science at Brown University within the top-level domain edu. (Other top-level domains include com for commercial sites and org for organizations, as well as a domain for each country connected to the network, for systems specied by country rather than organization type.) Generally, the system resolves addresses by examining the host-name components in reverse order","Names are convenient for humans to use, but computers prefer numbers for speed and simplicity. For this reason, there must be a mechanism to resolve the host name into a host-id that describes the destination system to the networking hardware. This mechanism is similar to the name-to-address binding that occurs during program compilation, linking, loading, and execution (Chapter 8). In the case of host names, two possibilities exist. First, every host may have a data le containing the names and addresses of all the other hosts reachable on the network (similar to binding at compile time). The problem with this model is that adding or removing a host from the network requires updating the data les on all the hosts. The alternative is to distribute the information among systems on the network. The network must then use a protocol to distribute and retrieve the information. This scheme is like execution-time binding. The rst method was the one originally used on the Internet. As the Internet grew, however, it became untenable. The second method, the domain-name system (DNS), is the one now in use. DNS species the naming structure of the hosts, as well as name-to-address resolution. Hosts on the Internet are logically addressed with multipart names known as IP addresses. The parts of an IP address progress from the most specic to the most general, with periods separating the elds. For instance, bob.cs.brown.edu refers to host bob in the Department of Computer Science at Brown University within the top-level domain edu. (Other top-level domains include com for commercial sites and org for organizations, as well as a domain for each country connected to the network, for systems specied by country rather than organization type.) Generally, the system resolves addresses by examining the host-name components in reverse order. Each component has a name serversimply a process on a systemthat accepts a name and returns the address of the name server responsible for that name. As the nal step, the name server for the host in question is contacted, and a host-id is returned. For example, a request made by a process on system A to communicate with bob.cs.brown.edu would result in the following steps: 1. The system library or the kernel on system A issues a request to the name server for the edu domain, asking for the address of the name server for brown.edu. The name server for the edu domain must be at a known address, so that it can be queried"
"Justify with an example how under the domain-name service, each name-server site is responsible for updating the host information for that domain","Under the domain-name service, each name-server site is responsible for updating the host information for that domain .For instance, any host changes at Brown University are the responsibility of the name server for brown.edu and need not be reported anywhere else","Before the domain-name service was introduced, all hosts on the Internet needed to have copies of a le that contained the names and addresses of each host on the network. All changes to this le had to be registered at one site (host SRI-NIC), and periodically all hosts had to copy the updated le from SRI-NIC to be able to contact new systems or nd hosts whose addresses had changed. Under the domain-name service, each name-server site is responsible for updating the host information for that domain. For instance, any host changes at Brown University are the responsibility of the name server for brown.edu and need not be reported anywhere else. DNS lookups will automatically retrieve the updated information because they will contact brown.edu directly. Domains may contain autonomous subdomains to further distribute the responsibility for host-name and host-id changes. Java provides the necessary API to design a program that maps IP names to IP addresses. The program shown in Figure 17.4 is passed an IP name (such as /** * Usage: java DNSLookUp <IP name> * i.e. java DNSLookUp www.wiley.com */ public class DNSLookUp { public static void main(String[] args) { InetAddress hostAddress; } try { hostAddress = InetAddress.getByName(args[0]); System.out.println(hostAddress.getHostAddress()); } catch (UnknownHostException uhe) { System.err.println(""Unknown host: "" + args[0]); } bob.cs.brown.edu) on the command line and either outputs the IP address of the host or returns a message indicating that the host name could not be resolved"
Justify with an example how enforcing traversal checks means that the users access must be checked at each directory level,"Enforcing traversal checks means that the users access must be checked at each directory level .For instance, a user might lack permission to traverse \foo\bar, so starting at the access for \foo\bar\dir would be an error.","In normal operation, NTFS does not enforce permissions on traversal of directories in le path names. However, for compatibility with POSIX, these checks can be enabled. Traversal checks are inherently more expensive, since modern parsing of le path names uses prex matching rather than directoryby-directory parsing of path names. Prex matching is an algorithm that looks up strings in a cache and nds the entry with the longest matchfor example, an entry for \foo\bar\dir would be a match for \foo\bar\dir2\dir3\myfile. The prex-matching cache allows path-name traversal to begin much deeper in the tree, saving many steps. Enforcing traversal checks means that the users access must be checked at each directory level. For instance, a user might lack permission to traverse \foo\bar, so starting at the access for \foo\bar\dir would be an error. 19.5 File System Volume Management and Fault Tolerance FtDisk is the fault-tolerant disk driver for Windows. When installed, it provides several ways to combine multiple disk drives into one logical volume so as to improve performance, capacity, or reliability"
Justify with an example how cOM objects provide a well-dened interface to manipulate the data in the object,"COM objects provide a well-dened interface to manipulate the data in the object .For instance, COM is the infrastructure used by Microsofts object linking and embedding (OLE) technology for inserting spreadsheets into Microsoft Word documents","The Windows RPC mechanism follows the widely used distributedcomputing-environment standard for RPC messages, so programs written to use Windows RPCs are highly portable. The RPC standard is detailed. It hides many of the architectural differences among computers, such as the sizes of binary numbers and the order of bytes and bits in computer words, by specifying standard data formats for RPC messages. 19.6.2.8 Component Object Model The component object model (COM) is a mechanism for interprocess communication that was developed for Windows. COM objects provide a well-dened interface to manipulate the data in the object. For instance, COM is the infrastructure used by Microsofts object linking and embedding (OLE) technology for inserting spreadsheets into Microsoft Word documents. Many Windows services provide COM interfaces. Windows has a distributed extension called DCOM that can be used over a network utilizing RPC to provide a transparent method of developing distributed applications. In Windows, an application can use the Windows I/O API to access les from a remote computer as though they were local, provided that the remote computer is running a CIFS server such as those provided by Windows. A redirector is the client-side object that forwards I/O requests to a remote system, where they are satised by a server. For performance and security, the redirectors and servers run in kernel mode"
"Justify with an example how programming-in-thelarge, then, refers to multi-person jobs that span, say, more than half a year","Programming-in-thelarge, then, refers to multi-person jobs that span, say, more than half a year .For example: The NASA Space Shuttle software contains 40M lines of object code (this is 30 times as much as the software for the Saturn V project from the 1960s) (Boehm, 1981); The IBM OS360 operating system took 5000 man years of development effort (Brooks, 1995)","(DeRemer and Kron, 1976) make a distinction between programming-in-thelarge and programming-in-the-small. The borderline between large and small obviously is not sharp: a program of 100 lines is small, a program of 50 000 lines of code certainly is not. Programming-in-the-small generally refers to programs written by one person in a relatively short period of time. Programming-in-thelarge, then, refers to multi-person jobs that span, say, more than half a year. For example: The NASA Space Shuttle software contains 40M lines of object code (this is 30 times as much as the software for the Saturn V project from the 1960s) (Boehm, 1981); The IBM OS360 operating system took 5000 man years of development effort (Brooks, 1995). Traditional programming techniques and tools are primarily aimed at supporting programming-in-the-small. This not only holds for programming languages, but also for the tools (like flowcharts) and methods (like structured programming). These cannot be directly transferred to the development of large programs"
"Justify with an example how user manuals and training material may have to be written, and attention must be given to developing the environment in which the new system is going to be installed","User manuals and training material may have to be written, and attention must be given to developing the environment in which the new system is going to be installed .For example, a new automated library system will affect working procedures within the library","The software has to support its users effectively. Software is developed in order to support users at work. The functionality offered should fit users tasks. Users that are not satisfied with the system will try to circumvent it or, at best, voice new requirements immediately. It is not sufficient to build the system in the right way, we also have to build the right system. Effective user support means that we must carefully study users at work, in order to determine the proper functional requirements, and we must address usability and other quality aspects as well, such as reliability, responsiveness, and user-friendliness. It also means that software development entails more than delivering software. User manuals and training material may have to be written, and attention must be given to developing the environment in which the new system is going to be installed. For example, a new automated library system will affect working procedures within the library. INTRODUCTION Software engineering is a field in which members of one culture create artifacts on behalf of members of another culture"
"Justify with an example how there are numerous business, technical and political constraints that may influence a software development project","There are numerous business, technical and political constraints that may influence a software development project .For example, one may decide to use database technology X rather than Y, simply because of available expertise with that technology","In most realistic cases, it is illusive to assume that the collection of requirements voiced at the start of the project is the only factor that counts. In fact, the term requirement is a misnomer. It suggests something immutable, while in fact most requirements are negotiable. There are numerous business, technical and political constraints that may influence a software development project. For example, one may decide to use database technology X rather than Y, simply because of available expertise with that technology. In extreme cases, characteristics of available components may determine functionality offered, rather than the other way around. The above list shows that software engineering has many facets. Software engineering certainly is not the same as programming, although programming is an important ingredient of software engineering. Mathematical aspects play a role since we are concerned with the correctness of software. Sound engineering practices are needed to get useful products. Psychological and sociological aspects play a role in the communication between human and machine, organization and machine, and between humans. Finally, the development process needs to be controlled, which is a management issue"
"Justify with an example how within this temporary organization, the relationship between individuals is often asymmetrical: one person participating in the relationship has more knowledge about something than the other","Within this temporary organization, the relationship between individuals is often asymmetrical: one person participating in the relationship has more knowledge about something than the other .For example, a software developer has more knowledge about the system under construction than his manager","The test in the latter step had the form voter.getIdentifi ation()==identifi ation() instead of equals(voter.getIdentifi ation()==identifi ation()) In other words, references were compared, rather than actual values. This is one way to win the elections. Software Engineering Ethics Suppose you are testing part of a big software system. You find quite a few errors and youre certainly not ready to deliver. However, your manager is pressing you. The schedule has already slipped by quite a few weeks. Your manager in turn is pressed by his boss. The customer is eagerly awaiting delivery of the system. Your manager suggests that you should deliver the system as is, continue testing, and replace the system by a better version within the next month. How would you react to this scheme? Would you simply give in? Argue with your manager? Go to his boss? Go to the customer? The development of complex software systems involves many people: software developers, testers, technical managers, general managers, customers, etc. Within this temporary organization, the relationship between individuals is often asymmetrical: one person participating in the relationship has more knowledge about something than the other. For example, a software developer has more knowledge about the system under construction than his manager. Such an asymmetric relationship asks for trust: if the developer says that development of some component is on schedule, his manager cannot but believe this message. At least for a while. Such reliance provides opportunities for unethical behavior, such as embezzlement. This is the more so if there also is a power relationship between these individuals. It is not surprising then that people within the software engineering community have been discussing a software engineering code of ethics. Two large organizations of professionals in our field, the IEEE Computer Society and ACM, have jointly developed such a code. The short version of this code is given in figure 1.5"
Justify with an example how management activities are guided by goals and priorities set for the project,"Management activities are guided by goals and priorities set for the project .For example, management will have to submit regular reports on the status and progress of the project","4. Standards, guidelines, procedures Software projects are big projects. Usually, a lot of people are involved. A strong working discipline is therefore needed, in which each person involved follows the standards, guidelines and procedures agreed upon. Besides being stated on paper, many of these can be supported or enforced by tools. Of extreme importance are clear agreements about documentation: when is documentation to be delivered, how is the quality of the documentation to be assessed, how does one ensure that the documentation is kept up-to-date? To a large extent, these standards and procedures will be described in separate documents, such as the Configuration Control Plan or the Quality Assurance Plan. 5. Management activities Management activities are guided by goals and priorities set for the project. For example, management will have to submit regular reports on the status and progress of the project. It will also have to follow certain priorities in balancing requirements, schedule and cost. 6. Risks Potential risks have to be identified as early as possible. There will always be risks: hardware may not be delivered on time, qualified personnel may not be available when required, critical information may be lacking when it is needed, and so on. It is rather naive to suppose that a software development project runs smoothly. Even in well-established fields like construction, there is always something that goes wrong. One should diagnose the risks of a software project early on, and provide measures to deal with them; see also chapter 8"
"Justify with an example how depending on circumstances, either or both may occur in an actual project","Depending on circumstances, either or both may occur in an actual project .For example, the maintenance cost may go down because user needs are better satisfied","It is even feasible not to carry over the software product from the prototyping phases to the actual production phase, but to explicitly throw it away after the prototyping phases have come to an end. This is known as throwaway prototyping. It is not necessary to do so, though. The prototype may evolve to the final product. The user starts by formulating the raw requirements, on the basis of which a first version of the system is produced. The user starts to work with this system, which leads to new, or changed, requirements. The next version is then developed. After a number of such iterations, the user is satisfied and the last version developed is the product to be delivered. This is known as evolutionary prototyping. In practice, evolutionary prototyping is used much more often than throwaway prototyping. Discarding a (partly) working system is a hurdle which is not easily taken. In agile methods, the phrase working code is often used instead of evolutionary prototype. Both throwaway and evolutionary prototyping entail advantages and disadvantages. Figure 3.4 summarizes the pattern of pros and cons that emerges in case studies that describe experiences of applying a prototyping approach. Note that some properties can be influenced in both a positive and a negative way. Depending on circumstances, either or both may occur in an actual project. For example, the maintenance cost may go down because user needs are better satisfied. On the other hand, the maintenance cost may go up because development has been done in a quick THE SOFTWARE LIFE CYCLE REVISITED Advantages - The resulting system is easier to use - User needs are better accommodated - The resulting system has fewer features - Problems are detected earlier - The design is of higher quality - The resulting system is easier to maintain - The development incurs less effort Disadvantages - The resulting system has more features - The performance of the resulting system is worse - The design is of lesser quality - The resulting system is harder to maintain - The prototyping approach requires more experienced team members Users as well as developers are generally more positive about systems developed using a prototyping approach. This positive attitude concerns both the development process and the resulting product. Users feel more involved in the development process and have fewer conflicts with the designers. The extensive user involvement results in systems which better satisfy user needs. Since users need not express all their requirements up front in a prototyping approach, there is less tendency to ask for bells and whistles. As a consequence, the end result is a leaner system whose functionality closer matches the real user requirements. If users are shown a working system at an early stage and are given the opportunity to try it out, chances are that problems are detected at an early stage as well. This prevents a waste of manpower which would otherwise be needed to redo part of the work. If users are in a position to influence and modify the design, the system features will better reflect their requirements and the system will be easier to use"
Justify with an example how it is important that the manager aligns his dealings with team members with their respective relation and task maturity,"It is important that the manager aligns his dealings with team members with their respective relation and task maturity .For example, a fresh graduate may have high task maturity and low relation maturity, and so his introduction into a skilled team may warrant some careful guidance","In chapter 8, we will identify various types of software development project and indicate which type of coordination mechanism and management style best fits those projects. It should be noted that the coordination mechanisms suggested in chapter 8 stem from internal factors, i.e. characteristics of the project on hand. As noted before, the projects environment will also exert influence on its organization. Notice that we looked from the manager to the team and its members in the above discussion. Alternatively, we may look at the relation and task maturity of individual team members. Relation maturity concerns the attitude of employees towards their job and management. Task maturity is concerned with technical competence. It is important that the manager aligns his dealings with team members with their respective relation and task maturity. For example, a fresh graduate may have high task maturity and low relation maturity, and so his introduction into a skilled team may warrant some careful guidance. Team Organization Within a team, different roles can be distinguished. There are managers, testers, designers, programmers, and so on. Depending on the size of the project, more than one role may be carried out by one person, or different people may play the same role. The responsibilities and tasks of each of these roles have to be precisely defined in the project plan"
"Justify with an example how getting to the core is achieved by a process of earning trust, responsibility and status through competition and demonstrated talent","Getting to the core is achieved by a process of earning trust, responsibility and status through competition and demonstrated talent .For example, an active user may become co-developer by suggesting quality improvements over a period of time","Usually, outer layers contain more people than inner layers. Often, the Core Team counts no more than 5-15 people. For example, Mockus et al. (2000) reports that the 15-person Core Team of Apache did over 80% of functionality coding. This type of open source project organization is a meritrocacy; i.e., roles of people are based on talent and proven quality. People in one layer may move up to the next higher layer. Getting to the core is achieved by a process of earning trust, responsibility and status through competition and demonstrated talent. For example, an active user may become co-developer by suggesting quality improvements over a period of time. Likewise, a longstanding record of quality fixes to the code may earn him or her a position in the core team. The voluntary character of open source development gives rise to some specific challenges: Motivation to remain active Disagreement between developers PEOPLE MANAGEMENT AND TEAM ORGANIZATION Communication between developers An open source community is a company without walls (Fang and Neufeld, 2006)"
"Justify with an example how also, an attribute of one entity can be related to an attribute of another entity","Also, an attribute of one entity can be related to an attribute of another entity .For example, the experience of a programmer may be related to the cost of a development project he is working on","For example, the attributes length and weight of an entity snake are related. Similarly, the number of man-months spent on a project is related to the cost of that project. Also, an attribute of one entity can be related to an attribute of another entity. For example, the experience of a programmer may be related to the cost of a development project he is working on. Value The former three constituents of the model reside in the real world. We want to formally characterize these objects by measuring attributes, i.e. assigning values to them"
"Justify with an example how note that we can sometimes measure an attribute in different units, where these units lie on different scales","Note that we can sometimes measure an attribute in different units, where these units lie on different scales .For example, we can measure temperature on an ordinal scale: it either freezes, or it doesnt","Absolute In this case we simply count the number of occurrences, as in the number of errors detected in a program. Note that we can sometimes measure an attribute in different units, where these units lie on different scales. For example, we can measure temperature on an ordinal scale: it either freezes, or it doesnt. We can also measure it on an interval scale: in degrees Fahrenheit or Celsius. Or we can measure it on a ratio scale: in degrees Kelvin. Attribute-relation model If there exists a relation between different attributes of, possibly different, entities in the real world, we may express that relation in a formal model: the attribute-relation model. This model computes (predicts) the value of an attribute in which we are interested from the values of one or more other attributes from the model. The fork at the arrow labeled formalizes 6.1. ON MEASURES AND NUMBERS in figure 6.3 indicates that we can have more than one model for the same attribute relation"
Justify with an example how external quality refers to the quality when the software is executed,"External quality refers to the quality when the software is executed .For example, the average number of statements in a method is a measure of internal quality, while the number of defects encountered during testing is a measure of external quality","The ISO quality characteristics strictly refer to a software product. Their definitions do not capture process quality issues. For example, security can partly be handled by provisions in the software and partly by proper procedures. Only the former is covered by the sub-characteristic security of the ISO scheme. Furthermore, the sub-characteristics concern quality aspects that are visible to the user. Reusability, for example, is not included in the ISO scheme. Table 6.3 Three categories of software quality factors (Source: J.A. McCall, P.K. Richards & G.F. Walters, Factors in Software Quality, RADC-TR-77-369, US Department of Commerce, 1977.) Product operation: Correctness Reliability Efficiency Integrity Usability Product revision: Maintainability Testability Flexibility Product transition: Portability Reusability Interoperability Does it do what I want? Does it do it accurately all of the time? Will it run on my hardware as well as it can? Is it secure? Can I run it? Can I fix it? Can I test it? Can I change it? Will I be able to use it on another machine? Will I be able to reuse some of the software? Will I be able to interface it with another system? The ISO characteristics and subcharacteristics, together with an extensive set of measures, make up ISOs external and internal quality model. Internal quality refers to the product itself, ultimately the source code. External quality refers to the quality when the software is executed. For example, the average number of statements in a method is a measure of internal quality, while the number of defects encountered during testing is a measure of external quality. Ultimately, the user is interested in the quality in use, defined in (ISO9126, 2001) as the users view of the quality of the software product when it is executed in a specific environment and a specific context of use. It measures the extent to which users can achieve their goals, rather than mere properties of the software (see also section 6.3)"
Justify with an example how one might then choose to offer different levels of quality,"One might then choose to offer different levels of quality .For example, a service handling video streaming may be fast with low image quality, or slow with high image quality","So for components and services, there is a requires and a provides aspect to quality. Since a component or service generally does not know the context in which it is going to be embedded, it is difficult to decide on the right quality level. One might then choose to offer different levels of quality. For example, a service handling video streaming may be fast with low image quality, or slow with high image quality. The user of that service then selects the appropriate quality of service (QoS) level. Developers tend to have a mechanistic, product-oriented view on quality, whereby quality is associated with features of the product. In this view, quality is defined by looking from the program to the user (user friendliness, acceptability, etc.). To assess the quality of systems used in organizations, we have to adopt a process-oriented view on quality as well, where quality is defined by looking from the user to the program. This leads to notions like adequacy and relevance. For example, a helpdesk staffed with skilled people may contribute considerably to the quality of a system as perceived by its users, but this quality attribute generally does not follow from a product-based view on quality"
"Justify with an example how if the software to be developed in the course of a new project cannot be compared with earlier products because of the degree of innovation involved, one is in for a big surprise","If the software to be developed in the course of a new project cannot be compared with earlier products because of the degree of innovation involved, one is in for a big surprise .For example, estimating the cost of the Space Shuttle project cannot be done through a simple extrapolation from earlier projects","Based on a sound hypothesis of the relations between the various entities involved and a (statistical) analysis of these data we may derive equations that numerically = characterize these relations. An example of such a relation is the one given above, which relates E to KLOC . The usability and reliability of such equations is obviously very much dependent upon the reliability of the data on which they are based. Also, the hypothesis that underlies the form of the equation must be sound. The findings obtained in this way reflect an average, a best possible approximation based on available data. We therefore have to be very careful in applying the results obtained. If the software to be developed in the course of a new project cannot be compared with earlier products because of the degree of innovation involved, one is in for a big surprise. For example, estimating the cost of the Space Shuttle project cannot be done through a simple extrapolation from earlier projects. We may hope, however, that the average software development project has a higher predictability as regards effort needed and the corresponding cost. The way in which we obtain quantitative relations implies further constraints on the use of these models. The model used is based on an analysis of data from earlier projects. Application of the model to new projects is possible only insofar as those new projects resemble old projects, i.e. the projects on whose data the model is based. If we have collected data on projects of a certain kind and within a particular organization, a model based on these data cannot be used without amendment for different projects in a possibly different organization. A model based on data about administrative projects in a government environment has little predictive value for the development of real-time software in the aerospace industry. This is one of the reasons why the models of, for example, Walston and Felix (1977) and Boehm (1981) (see section 7.1 for more detailed discussions of these models) yield such different results for one and the same problem description"
Justify with an example how higher-level tasks may be decomposed into subtasks,"Higher-level tasks may be decomposed into subtasks .For example, the task handle request to borrow a book may lead to the following subtasks: check member identification, check for limit on the number of books that may be borrowed, register book as being borrowed by the library member, issue a slip indicating the due back date","Task analysis Employees working in some domain perform a number of tasks, such as handling requests to borrow a book, cataloging new books, ordering books, etc. Higher-level tasks may be decomposed into subtasks. For example, the task handle request to borrow a book may lead to the following subtasks: check member identification, check for limit on the number of books that may be borrowed, register book as being borrowed by the library member, issue a slip indicating the due back date. Task analysis is a technique to obtain a hierarchy of tasks and subtasks to be carried out by people working in the domain. Any of the other techniques discussed may be used to get the necessary information to draw this hierarchy. There are no clear-cut rules as to when to stop decomposing tasks. A major heuristic is that at some point users tend to refuse to decompose tasks any further. For instance, when being asked how the member identification is checked, the library employee may say Well, I simply check his id. At this point, further decomposition is meaningless"
Justify with an example how entities are linked through relationships,"Entities are linked through relationships .For example, the relationship borrow involves the entities book copy and library member","Both entities and attribute values have a type. As modelers, we tend to view a type as a set of properties shared by its instances. As implementors, we tend to view a type as a set of values with a number of associated operations. For the attribute number of books on loan, the set of values could be the set 0 .. 10 with operations such as increment and decrement. For the entity type book copy, candidate operations would be borrow, return, and so on. Entities are linked through relationships. For example, the relationship borrow involves the entities book copy and library member. Most often, a relationship is binary, i.e. it links two entities. A relationship is denoted by a diamond linked to the entities involved. Entity--relationship models impose restrictions on the cardinality of relationships"
Justify with an example how present-day ERM has a lot in common with object-oriented analysis techniques,"Present-day ERM has a lot in common with object-oriented analysis techniques .For example, subtype--supertype relations between entity types are included in many ERM-techniques","Present-day ERM has a lot in common with object-oriented analysis techniques. For example, subtype--supertype relations between entity types are included in many ERM-techniques. Conversely, the class diagram of UML (see section 10.3.1) includes many elements from ERM. Finite State Machines At any one point in time, our library is in one of a (vast) number of possible states"
"Justify with an example how it is, however, sometimes useful to be able to distinguish between these organizational properties","It is, however, sometimes useful to be able to distinguish between these organizational properties .For example, the part-of relation is generally considered to be transitive, whereas the member-of relation is not","In many modeling methods, the part-of relation subsumes the member-of relation. The member-of relation is used to model the relationship between a set and its members. It is, however, sometimes useful to be able to distinguish between these organizational properties. For example, the part-of relation is generally considered to be transitive, whereas the member-of relation is not. If Book is a member of Library, and Library is a member of PublicInstitutions, we do not want to infer that Book is a member of PublicInstitutions. The Unified Modeling Language The Unified Modeling Language has its roots in the object-oriented analysis and design methods of the 1980s. Several key players in this field (Grady Booch, John Rumbaugh and Ivar Jacobson) came to work for Rational, and started to unify their methods and notations. This resulted in the first versions of UML. At a later stage, OMG --- the Object Management Group, an open consortium of companies --- took over. They now control the activities around UML, and adopted it as one of their standards. The current version is known as UML 2. UML is by far the most widely used notation for both requirements engineering and design"
"Justify with an example how in an aggregation, objects can be part of more than one other object","In an aggregation, objects can be part of more than one other object .For example, if our library maintains lists of required readings for certain courses, then a given book may be a part of more than one required reading list","An association such as Member-of also has class properties. For example, this association has attributes, e.g. MemberId, and operations, such as BecomeMember and CeaseToBeMember. Alternatively, we may say that class Membership has association properties. In UML, this model element is termed association class. It can be depicted as a class symbol attached by a dashed line to an association path, as in figure 10.10c. We may even promote an association clas to a full class, as in figuUML10.10d. Notice that the multiplicities have moved. A membership (of a client) can be to one or more libraries, whereas the membership (of the library) relates to zero or more clients. The part-of relation is called aggregation or composition in UML. In an aggregation, objects can be part of more than one other object. For example, if our library maintains lists of required readings for certain courses, then a given book may be a part of more than one required reading list. Aggregation is denoted with an open filed diamond as association role adornment. Composition is a strong notion of aggregation, in which the part object may belong to only one whole object. With composition, the parts are expected to live and die with the whole. If a table is composed of four legs and a tabletop, the table owns these parts. They cannot be part of another table at the same time. Composition is denoted by a solid filled diamond as an association role adornment, as in figure 10.11a. Figure 10.11a shows a Book with parts title, author, and isbn. A book has one title and one ISBN, so these parts have multiplicity 1. We assume here that a book may have up to three authors, so that part has multiplicity of 1..3. At the whole end of composition, the multiplicity is either 1 or 0..1. This part-of relationship is a relationship between a class and the classes of its attributes. An alternative notation for this part-of relation therefore consists of the top two compartments of the diagram for a class, as in figure 10.11b. Next to generalization and association, there are many other ways in which elements of a class diagram may depend on each other. For example, one class may call operations from another class, create instances of another class, and so on. Such a) MODELING Library Is-member-of 1..* Library Client: Clientinfo [*] b) Library Is-member-of 1..* Client Membership MemberId 1..* Library * MemberId association class, (d) association class as a full class dependencies are depicted with a dashed arrow, labeled with the type of dependency"
"Justify with an example how next to generalization and association, there are many other ways in which elements of a class diagram may depend on each other","Next to generalization and association, there are many other ways in which elements of a class diagram may depend on each other .For example, one class may call operations from another class, create instances of another class, and so on","The part-of relation is called aggregation or composition in UML. In an aggregation, objects can be part of more than one other object. For example, if our library maintains lists of required readings for certain courses, then a given book may be a part of more than one required reading list. Aggregation is denoted with an open filed diamond as association role adornment. Composition is a strong notion of aggregation, in which the part object may belong to only one whole object. With composition, the parts are expected to live and die with the whole. If a table is composed of four legs and a tabletop, the table owns these parts. They cannot be part of another table at the same time. Composition is denoted by a solid filled diamond as an association role adornment, as in figure 10.11a. Figure 10.11a shows a Book with parts title, author, and isbn. A book has one title and one ISBN, so these parts have multiplicity 1. We assume here that a book may have up to three authors, so that part has multiplicity of 1..3. At the whole end of composition, the multiplicity is either 1 or 0..1. This part-of relationship is a relationship between a class and the classes of its attributes. An alternative notation for this part-of relation therefore consists of the top two compartments of the diagram for a class, as in figure 10.11b. Next to generalization and association, there are many other ways in which elements of a class diagram may depend on each other. For example, one class may call operations from another class, create instances of another class, and so on. Such a) MODELING Library Is-member-of 1..* Library Client: Clientinfo [*] b) Library Is-member-of 1..* Client Membership MemberId 1..* Library * MemberId association class, (d) association class as a full class dependencies are depicted with a dashed arrow, labeled with the type of dependency. If all dependencies are included in a class diagram, it soon becomes very cluttered"
"Justify with an example how an idiom is a low-level pattern, specific to some programming language","An idiom is a low-level pattern, specific to some programming language .For example, the Counted Pointer idiom (Buschmann et al., 1996, pp 353--358) can be used to handle references to objects created dynamically in C++","Design patterns are collections of a few modules (or, in object-oriented circles, classes) which are often used in combination, and which together provide a useful abstraction. A design pattern is a recurring solution to a standard problem. The prototypical example of a pattern is the MVC (Model--View--Controller) pattern known from Smalltalk. We may view design patterns as micro-architectures. Design patterns are further discussed in section 12.5. Two further notions often used in this context are (application) framework and idiom. An application framework is a semi-finished system which needs to be instantiated to obtain a complete system. It describes the architecture of a family of similar systems. It is thus tied to a particular application domain. The best known examples are frameworks for building user interfaces. An idiom is a low-level pattern, specific to some programming language. For example, the Counted Pointer idiom (Buschmann et al., 1996, pp 353--358) can be used to handle references to objects created dynamically in C++. It keeps a reference counter which is incremented or decremented when references to an object are added or removed. Memory occupied by an object is freed if no references to that object remain, i.e. when the counter becomes zero. Frameworks and idioms thus offer solutions that are more concrete and language-specific than the architectural styles and design patterns we will discuss. The work in the area of software architecture and design patterns has been strongly influenced by the ideas of the architect Christopher Alexander, as formulated in his books The Timeless Way of Building and A Pattern Language. The term pattern derives from Alexanders work, and the format used to describe software architectural styles and design patterns is shaped after the format Alexander used to describe his patterns, like alcove, office connection or public outdoor room. In software engineering, we often draw a parallel with other engineering disciplines, in particular civil engineering"
"Justify with an example how conversely, an architectural style constrains both the elements and their interrelationships","Conversely, an architectural style constrains both the elements and their interrelationships .For example, the Tudor style describes how a certain type of house looks and also prescribes how its design should look","Architecture is a (formal) arrangement of architectural elements. An architectural style abstracts from the specifics of an architecture. The decomposition of our library system might for instance result in an architecture consisting of one main program and four subroutines, sharing three data stores. If we abstract from these specifics, we obtain its architectural style, in which we concentrate on the types of its elements and their interconnections. Viewed in this way, an architectural style describes a certain codification of elements and their arrangement. Conversely, an architectural style constrains both the elements and their interrelationships. For example, the Tudor style describes how a certain type of house looks and also prescribes how its design should look. In a similar vein we may characterize a software architectural style such as, say, the pipes-and-filter style. Different engineering principles apply to different architectural styles. This often goes hand in hand with the types of materials used. Cottage-style houses and highrise apartment-buildings differ in the materials used and the engineering principles applied. A software design based on abstract data types (= material) emphasizes separation of concerns by encapsulating secrets (= engineering principle). A design based on pipes and filters emphasizes bundling of functionality in independent processes"
Justify with an example how certain characteristics of the requirements will guide the designer in his choice of a particular style,"Certain characteristics of the requirements will guide the designer in his choice of a particular style .For example, if the problem consists of a series of independent transformations, a pipes-and-filter type of architecture suggests itself","A controller governs the time sequence of other events. A top-level control module and a scheduler are examples hereof. manager Prentice-Hall) patterns. We will use this framework to describe a number of well-known and classic architectural styles. The framework has the following entries:   Problem A description of the type of problem this style addresses. Certain characteristics of the requirements will guide the designer in his choice of a particular style. For example, if the problem consists of a series of independent transformations, a pipes-and-filter type of architecture suggests itself. Context A designer will be constrained in the use of a style by certain characteristics of the environment. Or, to put it the other way round, a style imposes certain requirements on the environment. For example, the pipes-andfilter style usually relies on operating system support for data transfer between filters"
"Justify with an example how in computationally complex applications, such as speech recognition, an internal representation is built and acted upon by different computational elements","In computationally complex applications, such as speech recognition, an internal representation is built and acted upon by different computational elements .For example, one computational element may filter noise, another one builds up phonemes, etc","Modern compilers are often structured in a similar way. Such a compiler maintains a central representation of the program to be translated. A rudimentary version of that representation results from the first, lexical, phase: a sequence of tokens rather than a sequence of character glyphs. Subsequent phases, such as syntax and semantic analysis, further enrich this structure into, for example, an abstract syntax tree. In the end, code is generated from this representation. Other tools, such as symbolic debuggers, pretty-printing programs, or static analysis tools, may also employ the internal representation built by the compiler. The resulting architectural style again is that of a repository: one memory component and a number of computational elements that act on that repository. Unlike the database variant, the order of invocation of the elements matters in the case of a compiler. Also, different computational elements enrich the internal representation, rather than merely update it. The repository architectural style can also be found in certain AI applications. In computationally complex applications, such as speech recognition, an internal representation is built and acted upon by different computational elements. For example, one computational element may filter noise, another one builds up phonemes, etc. The internal representation in this type of system is called a blackboard and the architecture is sometimes referred to as a blackboard architecture. A major difference with traditional database systems is that the invocation of computational elements in a blackboard architecture is triggered by the current state of the blackboard, rather than by (external) inputs. Elements from a blackboard architecture enrich and refine the state representation until a solution to the problem is found"
Justify with an example how a sensitivity point is a property of the architecture that is critical for a certain quality attribute,"A sensitivity point is a property of the architecture that is critical for a certain quality attribute .For example, the possibility to undo user actions critically affects the usability of our library system, and this property therefore is a sensitivity point with respect to usability","In step 6, the scenarios are discussed one at a time. For each scenario, the architect walks the stakeholders through the architecture, explaining how the architecture supports that scenario. This may trigger a further discussion of the architectural approaches chosen. The end result is a documented list of sensitivity points, tradeoff points, risks and nonrisks, relating the architectural decisions made to the relevant quality attributes. A sensitivity point is a property of the architecture that is critical for a certain quality attribute. For example, the possibility to undo user actions critically affects the usability of our library system, and this property therefore is a sensitivity point with respect to usability. At the same time, this decision also is a sensitivity point with respect to performance. If a decision is a sensitivity point for more than one quality attribute, it is called a tradeoff point. If performance is of utmost importance, the decision to include an undo facility may be a risk. If this decision is not critical, it is a nonrisk. The utility tree is based on the main drivers used during the design of the architecture. Its construction is done in consultation with the main decision makers"
Justify with an example how resolving one problem may very well result in an entirely different problem elsewhere,"Resolving one problem may very well result in an entirely different problem elsewhere .For example, the choice of a particular dynamic data structure may solve the problem of an unknown input size and at the same time introduce an efficiency problem","Solutions to wicked problems are not true or false. At best, they are good or bad. The software design process is not analytic. It does not consist of a sequence of decisions each of which brings us somewhat closer to that one, optimal solution. Software design involves making a large number of trade-offs, such as those between speed and robustness. As a consequence, there is a number of acceptable solutions, rather than one best solution. Every wicked problem is a symptom of another problem. Resolving one problem may very well result in an entirely different problem elsewhere. For example, the choice of a particular dynamic data structure may solve the problem of an unknown input size and at the same time introduce an efficiency problem. A corollary of this is that small changes in requirements may have large consequences in the design or implementation. Elsewhere, we described this by saying that software is not continuous"
Justify with an example how note that it is always possible to optimize the actual implementation by keeping redundant information in the state as it is maintained by the object,"Note that it is always possible to optimize the actual implementation by keeping redundant information in the state as it is maintained by the object .For example, we may decide to include the number of books on loan in the state as implemented, rather than computing it when required","The major services provided by an object are those that relate to its life cycle. For example, a copy of a book is acquired, is borrowed and returned zero or more times, and finally it goes out of circulation. A person becomes a member of the library and may borrow and return books, reserve titles, change address, pay fines, and so on, until he finally ceases to be a member. From the problem statement: employee operates station station has bar code reader bar code reader reads book copy bar code reader reads identification card Tacit knowledge: library owns computer library owns stations computer communicates with station library employs employee client is member of library client has identification card These services concern the state of an object: they read and write the objects attributes. Services that provide information about the state of an object may or may not involve some type of computation. Note that it is always possible to optimize the actual implementation by keeping redundant information in the state as it is maintained by the object. For example, we may decide to include the number of books on loan in the state as implemented, rather than computing it when required. This need not concern us at this stage though. Whether services are actually implemented by computational means or by a simple lookup procedure is invisible to the object that requests the information. Further insight into which services are required can be obtained by investigating usage scenarios. We may prepare typical dialogs between components of the system in both normal and exceptional situations. For example, we may consider the situation in which a client successfully borrows a book, one in which the clients identification card is no longer valid, one in which he still has to pay an outstanding fine, and so on. A sequence diagram for the normal situation of borrowing a book is shown in figure 12.28. A number of events take place when this interaction takes place. These events will be handled by operations of the objects involved"
Justify with an example how we may prepare typical dialogs between components of the system in both normal and exceptional situations,"We may prepare typical dialogs between components of the system in both normal and exceptional situations .For example, we may consider the situation in which a client successfully borrows a book, one in which the clients identification card is no longer valid, one in which he still has to pay an outstanding fine, and so on","From the problem statement: employee operates station station has bar code reader bar code reader reads book copy bar code reader reads identification card Tacit knowledge: library owns computer library owns stations computer communicates with station library employs employee client is member of library client has identification card These services concern the state of an object: they read and write the objects attributes. Services that provide information about the state of an object may or may not involve some type of computation. Note that it is always possible to optimize the actual implementation by keeping redundant information in the state as it is maintained by the object. For example, we may decide to include the number of books on loan in the state as implemented, rather than computing it when required. This need not concern us at this stage though. Whether services are actually implemented by computational means or by a simple lookup procedure is invisible to the object that requests the information. Further insight into which services are required can be obtained by investigating usage scenarios. We may prepare typical dialogs between components of the system in both normal and exceptional situations. For example, we may consider the situation in which a client successfully borrows a book, one in which the clients identification card is no longer valid, one in which he still has to pay an outstanding fine, and so on. A sequence diagram for the normal situation of borrowing a book is shown in figure 12.28. A number of events take place when this interaction takes place. These events will be handled by operations of the objects involved. Services are but one way through which objects may be related. The relations which give systems a truly object-oriented flavor are those which result from whole--part and generalization--specialization classifications"
"Justify with an example how through the inheritance mechanism, changes can often be realized by adding another specialized object rather than through tinkering with the code","Through the inheritance mechanism, changes can often be realized by adding another specialized object rather than through tinkering with the code .For example, if we wish to extend our system dealing with furniture by adding another type of chair, say armchair, we do so by defining a new object ArmChair, together with its own set of attributes, as another specialization of Chair","The object-oriented approach provides for a smoother transition from requirements analysis to design to code. In our discussion of the object-oriented approach it is often difficult to strictly separate UoD modeling aspects from design aspects. The object hierarchy that results from this process can be directly mapped onto the class hierarchy of the implementation (provided the implementation language is object-oriented too). The attributes of objects become encapsulated by services provided by the objects in the implementation. The object-oriented approach leads to more flexible systems that are easier to adapt and change. Because the real-world objects have a direct counterpart in the implementation, it becomes easy to link change requests to the corresponding program modules. Through the inheritance mechanism, changes can often be realized by adding another specialized object rather than through tinkering with the code. For example, if we wish to extend our system dealing with furniture by adding another type of chair, say armchair, we do so by defining a new object ArmChair, together with its own set of attributes, as another specialization of Chair. The object-oriented approach promotes reuse by focusing on the identification of real-world objects from the application domain. In contrast, more traditional approaches focus on identifying functions. In an evolving world, the objects tend to be stable, while the functions tend to change. For instance, in an office environment the functions performed are likely to change with time, but there will always be letters, folders, and so on. Thus, an object-oriented design is less susceptible to changes in the world being modeled"
"Justify with an example how error-based testing techniques focus on error-prone points, based on knowledge of the typical errors that people make","Error-based techniques focus on error-prone points, based on knowledge of the typical errors that people make .For example, off-by-1 errors are often made at boundary values such as 0 or the maximum number of elements in a list, and we may specifically aim our testing effort at these boundary points","Fault-based testing Fault-based techniques focus on detecting faults. The fault detecting ability of the test set then determines its adequacy. For example, we may artificially seed a number of faults in a program, and then require that a test set reveal at least, say, 95% of these artificial faults.Error-based techniques focus on error-prone points, based on knowledge of the typical errors that people make. For example, off-by-1 errors are often made at boundary values such as 0 or the maximum number of elements in a list, and we may specifically aim our testing effort at these boundary points. Alternatively, we may classify test techniques based on the source of information used to derive test cases: Black-box testing, also called functional or specification-based testing. In black-box testing, test cases are derived from the specification of the software, i.e. we do not consider implementation details"
Justify with an example how test adequacy criteria are closely linked to test techniques,"Test adequacy criteria are closely linked to test techniques .For example, coveragebased test techniques keep track of which statements, branches, and so on, are executed, and this gives us an easy handle to determine whether a coverage-based adequacy criterion has been met or not","A test adequacy criterion thus specifies requirements for testing. It can be used in different ways: as stopping rule, as measurement, or as test case generator. If a test adequacy criterion is used as a stopping rule, it tells us when sufficient testing has been done. If statement coverage is the criterion, we may stop testing if all statements have been executed by the tests done so far. In this view, a test set is either good or bad; the criterion is either met, or it isnt. If we relax this requirement a bit and use, say, the percentage of statements executed as a test quality criterion, then the test adequacy criterion is used as a measurement. Formally, it is a mapping from the test set to the interval ; . Note that the stopping rule view is in fact a special case of the measurement view. Finally, the test adequacy criterion can be used in the test selection process. If a 100% statement coverage has not been achieved yet, an additional test case is selected that covers one or more statements yet untested. This generative view is used in many test tools. Test adequacy criteria are closely linked to test techniques. For example, coveragebased test techniques keep track of which statements, branches, and so on, are executed, and this gives us an easy handle to determine whether a coverage-based adequacy criterion has been met or not. The same test technique, however, does not help us in assessing whether all error-prone points in a program have been tested. In a sense, a given test adequacy criterion and the corresponding test technique are opposite sides of the same coin"
"Justify with an example how put in other words: if some assembly of components is adequately tested, this does not imply that the individual components have been adequately tested as well","Put in other words: if some assembly of components is adequately tested, this does not imply that the individual components have been adequately tested as well .For example, a sorting routine may well be adequately tested in an environment where the size of the array is always less than ten","General multiple change property Whereas the previous property states that semantic closeness is not sufficient to imply that two programs can be tested in the same way, this property states that syntactic closeness is not sufficient either. Programs are said to be syntactically close if they have the same structure and the same dataflow characteristics. This is the case, for instance, when some of the relational or arithmetic operators in those programs differ. Though the shape of these programs is the same, testing them on the same data may well cause different paths through the flow graph being executed. Antidecomposition property This property states that if a component is adequately tested in one environment, this does not imply that it is adequately tested for some other environment. Put in other words: if some assembly of components is adequately tested, this does not imply that the individual components have been adequately tested as well. For example, a sorting routine may well be adequately tested in an environment where the size of the array is always less than ten. If we move that routine to an environment which requires much larger arrays to be sorted, it must be tested anew in that environment.     SOFTWARE TESTING Anticomposition property This property reflects just the opposite: even if components have been adequately tested in isolation, we still have to test their composition in order to ascertain that their interfaces and interactions work properly"
"Justify with an example how at the design level, the evolution of system through successive releases may provide valuable information about bad smells","At the design level, the evolution of system through successive releases may provide valuable information about bad smells .For example, if certain classes often change, or classes get introduced in one version, disappear in the next, and then reappear again, such merits closer inspection","Bad smells Bloaters Object-Oriented Abusers Change Preventers Dispensables Encapsulators Couplers Others Long Method, Large Class, Primitive Obsession, Long Parameter List, Data Clumps Switch Statements, Temporary Field, Refused Bequest, Alternative Classes with Different Interfaces, Parallel Inheritance Hierarchies Divergent Change, Shotgun Surgery Lazy Class, Data Class, Duplicate Code, Speculative Generality Message Chains, Middle Man Feature Envy, Inapprorpiate Intimacy Incomplete Library Class, Comments The first category, the Bloaters denote situations in which something has grown too large to handle effectively. The Primitive Obsession is placed there, because the functionality to handle the primitives has to be placed in some other class, which may then grow too large. The Object-Oriented Abusers denote situations where the possibilities of object orientation are not fully exploited. The Change Preventers hinder further evolution of the software. The Dispensables represent things that can be removed. The Encapsulators deal with data communication. The two smells in this category are opposite: decreasing one will increase the other. The Couplers represent situations where coupling is too high. The Others category finally contains the smells that do not fit another category. Bad smells not only occur at the code level. At the design level, the evolution of system through successive releases may provide valuable information about bad smells. For example, if certain classes often change, or classes get introduced in one version, disappear in the next, and then reappear again, such merits closer inspection. Fowler (1999) states that no set of metrics rivals informed human intuition. On the other hand, several of the metrics defined in section 12.1 do relate to a number of the bad smells listed above. For example, a high value for McCabes cyclomatic complexity could indicate the Switch Statement bad smell, while a high value for the Coupling Between Object Classes (CBO) metric could indicate a Feature Envy bad smell. Metrics thus may augment human intuition in the search for bad smells"
Justify with an example how a programming plan is a program fragment that corresponds to a stereotypical action,"A programming plan is a program fragment that corresponds to a stereotypical action .For example, to compute the sum of a series of numbers, a programmer uses the running total loop plan","Common to these theories is that expert programmers may draw on a vast number of knowledge chunks. These knowledge chunks are called in when software is developed. SOFTWARE MAINTENANCE Within the realm of programming, it is postulated that experts know of programming plans or beacons. A programming plan is a program fragment that corresponds to a stereotypical action. For example, to compute the sum of a series of numbers, a programmer uses the running total loop plan. In this plan, some counter is initialized to zero and incremented with the next value of a series in the body of a loop. A beacon is a key feature that typically indicates the presence of a particular structure or operation. Beacons seem to be very diagnostic of program meaning. For example, the kernel idea or central operation in a sorting program is a swap operation. If we are presented with a program that contains a swap operation, our immediate reaction would then be that it concerns some sorting program. This type of program comprehension process occurs when studying existing software. Meaningful units are isolated from the flat source text. Knowledge from human memory is called in during this process. The more knowledge the reader has about programming or the application domain, the more successful this process will be. The better the source code maps onto knowledge already available to the reader, the more effective this process will be"
Justify with an example how tools to gain insight into the static structure of programs,"Tools to gain insight into the static structure of programs .For example, tools that generate tables of contents and cross-reference listings help to trace the use of program elements","More advanced tools print procedure names in a larger font or generate page headers which contain the name of the component, its version number, creation date, and the like. Tools to gain insight into the static structure of programs. For example, tools that generate tables of contents and cross-reference listings help to trace the use of program elements. Browsers provide powerful interactive capabilities for inspecting the static structure of programs. Hypertext systems provide mechanisms to extend the traditional flat organization of text by their capabilities for linking non-sequential chunks of information. If system-related information is kept in a hypertext form, this opens up new possibilities for interactive, dynamic inspection of that information. Code analyzers may be used to identify potential trouble spots by computing software complexity metrics, highlighting dead code, or indicating questionable coding practices or bad smells. Finally, tools may generate a graphical image of a program text in the form of a control graph or a calling hierarchy. Tools may analyze the surface structure of large systems, e.g. by considering variable names, and cluster parts that seem to be highly related. The result of this clustering provides a first guess at a restructuring for the system. Tools that inspect the version history of a system (see also section 14.4)"
"Justify with an example how conversely, proper managerial attention to maintenance work goes a large way towards alleviating the morale problem","Conversely, proper managerial attention to maintenance work goes a large way towards alleviating the morale problem .For example, an organization may decide to hire new people into development only and explicitly consider a transfer to maintenance as a promotion. (Most organizations do exactly the opposite.)   Loss of knowledge about the system (with respect to both its design and the application domain knowledge incorporated) when the system is transferred from development to maintenance","By concentrating on the systems to be maintained, a higher level of productivity is achieved. Maintenance work requires specific skills of which a more optimal use can be made in a separate organization. If people are involved in both development and maintenance, more staff have to be allocated to maintenance and the familiarity with any particular system is spread more thinly. On the other hand, the strict separation of development and maintenance has certain disadvantages as well: Demotivation of personnel because of status differences, with consequential degradation of quality and productivity. Managerial attitudes and traditional career paths are the main causes for these motivational problems. Conversely, proper managerial attention to maintenance work goes a large way towards alleviating the morale problem. For example, an organization may decide to hire new people into development only and explicitly consider a transfer to maintenance as a promotion. (Most organizations do exactly the opposite.)   Loss of knowledge about the system (with respect to both its design and the application domain knowledge incorporated) when the system is transferred from development to maintenance. Various strategies can mitigate against this loss. For example, a future maintainer of a system may spend some time with the development team, a developer may stay with maintenance until the maintainers have become sufficiently acquainted with the system, or a designer may instruct the maintainers about the design of a system. Coordination costs between development and maintenance, especially when the new system replaces an existing one"
Justify with an example how various strategies can mitigate against this loss,"Various strategies can mitigate against this loss .For example, a future maintainer of a system may spend some time with the development team, a developer may stay with maintenance until the maintainers have become sufficiently acquainted with the system, or a designer may instruct the maintainers about the design of a system","By concentrating on the systems to be maintained, a higher level of productivity is achieved. Maintenance work requires specific skills of which a more optimal use can be made in a separate organization. If people are involved in both development and maintenance, more staff have to be allocated to maintenance and the familiarity with any particular system is spread more thinly. On the other hand, the strict separation of development and maintenance has certain disadvantages as well: Demotivation of personnel because of status differences, with consequential degradation of quality and productivity. Managerial attitudes and traditional career paths are the main causes for these motivational problems. Conversely, SOFTWARE MAINTENANCE proper managerial attention to maintenance work goes a large way towards alleviating the morale problem. For example, an organization may decide to hire new people into development only and explicitly consider a transfer to maintenance as a promotion. (Most organizations do exactly the opposite.)   Loss of knowledge about the system (with respect to both its design and the application domain knowledge incorporated) when the system is transferred from development to maintenance. Various strategies can mitigate against this loss. For example, a future maintainer of a system may spend some time with the development team, a developer may stay with maintenance until the maintainers have become sufficiently acquainted with the system, or a designer may instruct the maintainers about the design of a system. Coordination costs between development and maintenance, especially when the new system replaces an existing one"
"Justify with an example how the production of the service creates the set of benefits, whose consumption cannot be postponed","The production of the service creates the set of benefits, whose consumption cannot be postponed .For example, a restaurant service -- preparing a meal and serving the customer -- by and large has to be produced while the customer is receiving the service"," SOFTWARE MAINTENANCE Services are produced and consumed simultaneously, whereas production and consumption of products can be separated. For example, a car can be produced first, sold a few months later, and then be consumed over a period of several years. For services, production and consumption has to take place in parallel. The production of the service creates the set of benefits, whose consumption cannot be postponed. For example, a restaurant service -- preparing a meal and serving the customer -- by and large has to be produced while the customer is receiving the service. As a consequence, customers participate in and affect the transaction, customers may affect each other, employees affect the service outcome, and centralization and mass production are difficult. Services are perishable, products are not. Services cannot be saved or stored"
Justify with an example how this may arise if the (internal) service designs and standards do not match the service requirements as perceived by the service provider,"This may arise if the (internal) service designs and standards do not match the service requirements as perceived by the service provider .For example, the customer expects a quick restart of the system, while the standard procedure of the maintenance organization is focused on analyzing the reason for the crash","Gap 2 The service specification differs from the expected service as perceived by the service provider. This may arise if the (internal) service designs and standards do not match the service requirements as perceived by the service provider. For example, the customer expects a quick restart of the system, while the standard procedure of the maintenance organization is focused on analyzing the reason for the crash. The maintenance activities as specified in the service level agreement have to be planned. This includes the planning of the activities themselves, the transfer of the results to the customer, the planning of releases, the estimation of resources needed, the scheduling of maintenance activities, and the identification of possible risks. Explicitly basing the planning of maintenance activities on the commitments as agreed with the customer helps to close this gap"
"Justify with an example how this is often caused by deficiencies in human resource policies, failures to match demand and supply, and customers not fulfilling their role","This is often caused by deficiencies in human resource policies, failures to match demand and supply, and customers not fulfilling their role .For example, customers may bypass the helpdesk by phoning the maintainer of their system directly, thereby hindering a proper incident management process","The maintenance activities as specified in the service level agreement have to be planned. This includes the planning of the activities themselves, the transfer of the results to the customer, the planning of releases, the estimation of resources needed, the scheduling of maintenance activities, and the identification of possible risks. Explicitly basing the planning of maintenance activities on the commitments as agreed with the customer helps to close this gap. Gap 3 The actual service delivery differs from the specified services. This is often caused by deficiencies in human resource policies, failures to match demand and supply, and customers not fulfilling their role. For example, customers may bypass the helpdesk by phoning the maintainer of their system directly, thereby hindering a proper incident management process. The service level agreement states which maintenance activities are to be carried out, and how fast, reliably, etc. this should be done. In order to be able to report on the performance of the maintenance organization in this respect, information about the actual maintenance activities must be gathered. This information can be used to monitor maintenance activities and take corrective actions if necessary"
"Justify with an example how obviously, classifying actual CASE products according to this framework is not always easy","Obviously, classifying actual CASE products according to this framework is not always easy .For example, many environments that span the complete life cycle evolved from workbenches that supported either front-end activities (analysis and global design) or back-end activities (implementation and test)","The essence of integrated and process-centered environments is the sharing of information between the tools that make up the environment. Integrated environments focus on the resulting product. The heart of an integrated environment is a data repository, containing a wealth of information on the product to be developed, from requirements up to running code. Process-centered environments focus on sharing a description of the software development process. Obviously, classifying actual CASE products according to this framework is not always easy. For example, many environments that span the complete life cycle evolved from workbenches that supported either front-end activities (analysis and global design) or back-end activities (implementation and test). These environments tend to contain tools specifically geared at supporting tasks from the corresponding part of the life cycle, augmented by a more general support for the other phases (such as for editing, text processing, or database access). The framework of figure 15.1 classifies CASE products according to the parts of the life cycle they support. Figure 15.2 lists a number of dimensions along which CASE products can be classified. Using all of these dimensions to classify a CASE product yields a faceted classification scheme, which provides more information and is more flexible than the one-dimensional framework of figure 15.1"
"Justify with an example how not surprisingly, developments in process-centered environments are closely tied to developments in process modeling, and vice versa","Not surprisingly, developments in process-centered environments are closely tied to developments in process modeling, and vice versa .For example, the kinds of description used in process modeling (state transition diagrams, Petri nets, and the like) are also the formalisms used in PSEEs","Process-Centered Environments In a process-centered software engineering environment (PSEE), a description of the software development process is shared by the tools that make up the environment. Not surprisingly, developments in process-centered environments are closely tied to developments in process modeling, and vice versa. For example, the kinds of description used in process modeling (state transition diagrams, Petri nets, and the like) are also the formalisms used in PSEEs. Process modeling is discussed in section 3.6. Like an integrated environment, a process-centered environment may cover the complete life cycle. Like an IPSE, a PSEE tends to be geared towards supporting tasks from a specific part of the software development life cycle. Since back-end activities (implementation and testing) are somewhat easier to structure and formalize, work in process modeling and PSEEs has concentrated on modeling and supporting back-end activities, consequently"
"Justify with an example how i f i t i s p o ssib le to g rap h ic ally represent the causing process with a d irec tio n al movement, the re su ltin g event or s ta te should be shown in a locatio n that i s in the same d irection","I f i t i s p o ssib le to g rap h ic ally represent the causing process with a d irec tio n al movement, the re su ltin g event or s ta te should be shown in a locatio n that i s in the same d irection .For example, in an e lectro n ic commerce system, buying an object may be represented by dragging that o bject to a shopping cart","Complex systems often need a represen tation o f complex processes, where sev eral flows o f a c tiv ity influence each other. Examples o f th is type o f work situ atio n are the team monitoring a complex chemical process and the cockpit crew fly in g an intercontinen tal passenger airplan e. In such situ a tio n s, users need to understand complex r e la tio n s over time. The represen tation o f the relevant processes and th e ir r e la tio n s over time i s f a r from t r i v ia l . Representing in an understandable way what i s going on and how the r e la tio n s change over time i s only part o f the question. Frequently, such complex processes are safe ty c r it i c a l, which means that the human supervisor needs to make the rig h t decision very soon a f t e r some abnormal phenomenon occurs, so immediate d etection o f an event as well as immediate understanding o f the to ta l complex o f s ta te s and process d e ta ils i s needed. Experts in theater direction turn out to have knowledge of ju s t th is type of situ atio n . This type o f in te rface may be compared with a theater show, where an optimal d irection o f the action helps to make the audience aware o f the complex o f inten tion s o f the author and the c ast (Laurel, 1990, 1993). Consequently, theater sciences are another source fo r designing in te rfac e s to complex processes. Another type o f a r t i s t i c e x p e rtise that turns out to be very relevant fo r in te rface design is cinematography. Film design has resu lted in system atic knowledge o f the represen tation o f dynamics and processes over time (May and Barnard, 1995). For example, there are sp e c ial mechanisms to represent the suggestion o f c au sa lity between processes and events. I f i t i s p o ssib le to g rap h ic ally represent the causing process with a d irec tio n al movement, the re su ltin g event or s ta te should be shown in a locatio n that i s in the same d irection . For example, in an e lectro n ic commerce system, buying an object may be represented by dragging that o bject to a shopping cart. I f the d irection o f th is movement is to the righ t o f the screen, the re su ltin g change in the balance should a lso be shown to the righ t. In the same way there are laws fo r representing continuity in time. In a movie, the represen tatio n o f a continuing meeting between two partners can best be achieved by ensuring that the camera viewpoints do not c ro ss the lin e that connects the location poin ts o f the two partners. As soon as th is lin e i s crossed, the audience w ill in terpret th is as a jump in time. This type o f e x p ertise helps the design o f animated represen tatio ns o f processes and so on"
Justify with an example how only in case o f problems is atten tio n needed,"Only in case o f problems is atten tio n needed .For example, i f the location to be pointed to on the screen i s in an awkward po sitio n , i f a key i s not functioning properly, or i f the room i s so noisy that the person cannot properly hear h is own spoken command","The whole s e r ie s o f phases takes a frac tio n o f a second. It takes more time when a problem occurs because o f an unexpected or d isto rte d stim ulus. It takes le s s time when the type o f stim ulus i s fam iliar. So we may tra in our computer users to perceive important sig n a ls quickly and we may design our sig n als fo r easy and quick d etection and discrim ination. P sychologists and ergonomists know when a sig n al i s easy to detect, what color combinations are slow to be detected, and what sounds are easy to discrim inate. The output o f human beings i s movement. People make gestu res, manipulate to o ls, speak, or use a combination of these. For computer use, manipulation o f keys, mouse or touch-screen, and speaking into microphones are common examples o f output. According to modern psychology, a l l those types o f output are monitored by a cen tral processin g mechanism in the human. This cen tral executive decides on the meaning o f the output (say yes, move the mouse to a c ertain location, press the return key) but leaves the actu al execution to motor processes that, in normal cases, are running unattended , i. e. the actual execution i s not consciously controlled. Only in case o f problems is atten tio n needed. For example, i f the location to be pointed to on the screen i s in an awkward po sitio n , i f a key i s not functioning properly, or i f the room i s so noisy that the person cannot properly hear h is own spoken command. So we should design fo r human movements and human measures. It pays to ask an ergonomist about the most ergonomic design o f buttons and d ia ls . The cen tral executive unit o f human information processing is modeled as an instance that performs productions o f the form where the condition in most cases re la te s action i s a command to the motor system, with a ttr ib u te s derived from working memory. The cen tral executive unit has a very lim ited capacity. F ir s t o f a l l , only a very small number o f processes can be performed simultaneously. Secondly, the knowledge that i s needed in te stin g the condition as well as the knowledge that i s processed on behalf o f the motor output has to be av aila b le in working memory. Most o f the time, we may consider the lim itatio n s to re s u lt in the execution o f one process a t a time and, consequently, in causing competing processes to be scheduled fo r sequen tial execution based on perceived p rio rity . For example, when a d river approaches a crossroad s, the ta lk with h is passenger w ill be temporarily interrupted and only resumed when the driving decisio n s have been made. The amount o f av a ila b le resources has to be taken into account when designing systems. For example, humans cannot cope with several erro r messages each o f which req uires an immediate decision, e sp e c ia lly i f each req uires complex e rro r diagn o sis to be performed before reaction i s fe a sib le"
"Justify with an example how most o f the time, we may consider the lim itatio n s to re s u lt in the execution o f one process a t a time and, consequently, in causing competing processes to be scheduled fo r sequen tial execution based on perceived p rio rity","Most o f the time, we may consider the lim itatio n s to re s u lt in the execution o f one process a t a time and, consequently, in causing competing processes to be scheduled fo r sequen tial execution based on perceived p rio rity .For example, when a d river approaches a crossroad s, the ta lk with h is passenger w ill be temporarily interrupted and only resumed when the driving decisio n s have been made","The output o f human beings i s movement. People make gestu res, manipulate to o ls, speak, or use a combination of these. For computer use, manipulation o f keys, mouse or touch-screen, and speaking into microphones are common examples o f output. According to modern psychology, a l l those types o f output are monitored by a cen tral processin g mechanism in the human. This cen tral executive decides on the meaning o f the output (say yes, move the mouse to a c ertain location, press the return key) but leaves the actu al execution to motor processes that, in normal cases, are running unattended , i. e. the actual execution i s not consciously controlled. Only in case o f problems is atten tio n needed. For example, i f the location to be pointed to on the screen i s in an awkward po sitio n , i f a key i s not functioning properly, or i f the room i s so noisy that the person cannot properly hear h is own spoken command. So we should design fo r human movements and human measures. It pays to ask an ergonomist about the most ergonomic design o f buttons and d ia ls . The cen tral executive unit o f human information processing is modeled as an instance that performs productions o f the form where the condition in most cases re la te s action i s a command to the motor system, with a ttr ib u te s derived from working memory. The cen tral executive unit has a very lim ited capacity. F ir s t o f a l l , only a very small number o f processes can be performed simultaneously. Secondly, the knowledge that i s needed in te stin g the condition as well as the knowledge that i s processed on behalf o f the motor output has to be av aila b le in working memory. Most o f the time, we may consider the lim itatio n s to re s u lt in the execution o f one process a t a time and, consequently, in causing competing processes to be scheduled fo r sequen tial execution based on perceived p rio rity . For example, when a d river approaches a crossroad s, the ta lk with h is passenger w ill be temporarily interrupted and only resumed when the driving decisio n s have been made. The amount o f av a ila b le resources has to be taken into account when designing systems. For example, humans cannot cope with several erro r messages each o f which req uires an immediate decision, e sp e c ia lly i f each req uires complex e rro r diagn o sis to be performed before reaction i s fe a sib le . Working memory is another relevant concept in the model. Modern psychology presumes there i s only one memory structure, long-term memory, that contains knowledge that i s permanently stored. Any stimulus that reaches the cen tral executive unit leads to the a c tiv atio n o f an element in long-term memory"
Justify with an example how the amount of available resources has to be taken into account when designing systems,"The amount o f av a ila b le resources has to be taken into account when designing systems .For example, humans cannot cope with several erro r messages each o f which req uires an immediate decision, e sp e c ia lly i f each req uires complex e rro r diagn o sis to be performed before reaction i s fe a sib le . Working memory is another relevant concept in the model","The output o f human beings i s movement. People make gestu res, manipulate to o ls, speak, or use a combination of these. For computer use, manipulation o f keys, mouse or touch-screen, and speaking into microphones are common examples o f output. According to modern psychology, a l l those types o f output are monitored by a cen tral processin g mechanism in the human. This cen tral executive decides on the meaning o f the output (say yes, move the mouse to a c ertain location, press the return key) but leaves the actu al execution to motor processes that, in normal cases, are running unattended , i. e. the actual execution i s not consciously controlled. Only in case o f problems is atten tio n needed. For example, i f the location to be pointed to on the screen i s in an awkward po sitio n , i f a key i s not functioning properly, or i f the room i s so noisy that the person cannot properly hear h is own spoken command. So we should design fo r human movements and human measures. It pays to ask an ergonomist about the most ergonomic design o f buttons and d ia ls . The cen tral executive unit o f human information processing is modeled as an instance that performs productions o f the form where the condition in most cases re la te s action i s a command to the motor system, with a ttr ib u te s derived from working memory. The cen tral executive unit has a very lim ited capacity. F ir s t o f a l l , only a very small number o f processes can be performed simultaneously. Secondly, the knowledge that i s needed in te stin g the condition as well as the knowledge that i s processed on behalf o f the motor output has to be av aila b le in working memory. Most o f the time, we may consider the lim itatio n s to re s u lt in the execution o f one process a t a time and, consequently, in causing competing processes to be scheduled fo r sequen tial execution based on perceived p rio rity . For example, when a d river approaches a crossroad s, the ta lk with h is passenger w ill be temporarily interrupted and only resumed when the driving decisio n s have been made. The amount o f av a ila b le resources has to be taken into account when designing systems. For example, humans cannot cope with several erro r messages each o f which req uires an immediate decision, e sp e c ia lly i f each req uires complex e rro r diagn o sis to be performed before reaction i s fe a sib le . Working memory is another relevant concept in the model. Modern psychology presumes there i s only one memory structure, long-term memory, that contains knowledge that i s permanently stored. Any stimulus that reaches the cen tral executive unit leads to the a c tiv atio n o f an element in long-term memory"
"Justify with an example how the model often shows alte rn a tiv e ways to perform a c ertain task, r o le - s p e c ific and situ a tio n - sp e c ific methods and procedures, and a v arie ty of alte rn ativ e assignments of subtasks to people","The model often shows alte rn a tiv e ways to perform a c ertain task, r o le - s p e c ific and situ a tio n - sp e c ific methods and procedures, and a v arie ty of alte rn ativ e assignments of subtasks to people .For example, the jo in t problem-solving approach to the bank counter, sketched out above, cannot be applied to the d rive-in counter o f the bank","The general framework fo r our approach to user in te rfac e design i s depicted in Figure 16.6. It i s a refinement of Figure 16. 5, emphasizing the s p e c ia ltie s involved in carrying out d iffe re n t a c t iv it ie s . Task model 1 i s based on knowledge o f sin g le users (psychological v ariab le s, task -re late d v ariab le s, knowledge, and s k i l l s ) and on complex phenomena in the task situ atio n (ro le s, o f f i c i a l and actual procedures, v ariatio n in s tr a te g ie s , and v ariatio n in the ap p licatio n o f procedures). The in tegration o f th is insigh t in a model often does not provide a sin g le (or a sin g le best) decomposition o f tasks and a unique stru ctu re o f re latio n sh ip s between people, a c t iv i t ie s , and environments. The model often shows alte rn a tiv e ways to perform a c ertain task, r o le - s p e c ific and situ a tio n - sp e c ific methods and procedures, and a v arie ty of alte rn ativ e assignments of subtasks to people. For example, the jo in t problem-solving approach to the bank counter, sketched out above, cannot be applied to the d rive-in counter o f the bank. The d rive-in counter req u ires a d iffe re n t approach and a d iffe re n t user in terface. From th is, and because o f c lie n t requirements, compromises often have to be made in defining task model 2, the new task situ a tio n fo r which the technology has to be designed. This process includes the in terp retatio n of problems in the current task situ atio n , n egotiation with the c lie n t regarding h is conditions, and the resources a v a ila b le fo r design (including both fin an cial impacts and time co n strain ts). Ultimately, decisio n s have to be made about complex aspects, such as re-arran gin g the balance o f power and the p o s s ib il it i e s fo r u sers in various ro le s to ex e rcise control"
Justify with an example how uncontrolled indexing is mostly done by extracting terms from the entity to be indexed,"Uncontrolled indexing is mostly done by extracting terms from the entity to be indexed .For example, the terms that occur most frequently can be taken as index terms","The retrieval problem for software components is very similar to that for textual sources in an ordinary library. Quite a number of classification, or indexing, techniques have been developed for the latter type of problem. Figure 17. 2 identifies the main indexing techniques. Figure 17.2. Main indexing techniques indexing keywords / uncontrolled \ facets An indexing scheme is either controlled or uncontrolled. In a controlled indexing scheme, classifiers are chosen from a finite set of terms. This set of terms may be predefined and immutable. It may also change over time, though only in a controlled way. With controlled indexing, a list of synonyms is often provided to make both searching and indexing more flexible. In an uncontrolled indexing scheme, there is no restriction on the number of terms. Uncontrolled indexing is mostly done by extracting terms from the entity to be indexed. For example, the terms that occur most frequently can be taken as index terms. An advantage of uncontrolled indexing is that it can be done automatically. A disadvantage is that semantic knowledge is lost. In controlled indexing, one option is simply to use a list of keywords. This list is not ordered and there are no relations between the keywords. An advantage of this scheme is that it is easy to extend the set of index terms. In a classification scheme, on the other hand, the set of index terms is structured in some way. One way of doing so is through some enumerated hierarchical structure, as in Figures 17. 1 and 17. 2. The power of a hierarchical scheme is its structure. This same structure, however, is also a weakness"
"Justify with an example how a faceted classification scheme uses a number of different characteristics, or facets, to describe each component","A faceted classification scheme uses a number of different characteristics, or facets, to describe each component .For example, components in a UNIX environment could be classified according to the action they embody, the object they manipulate, the data structure used, and the system they are part of","Figure 17.3. An alternative component hierarchy structures 0 -0 1 -1 sets stacks queues lists trees graphs This phenomenon holds for component hierarchies in general. If you do not know how the hierarchy is organized, there is little chance that you will be able to find the component you were looking for. Strictly enumerative schemes use a predefined hierarchy and force you to search for a node that best fits the component to be classified. Though cross-references to other nodes can be included, the resulting network soon becomes fairly complicated. Facetted classification has certain advantages over the enumerative classification used in the examples of Figures 17. 1 and 17. 3. A faceted classification scheme uses a number of different characteristics, or facets, to describe each component. For example, components in a UNIX environment could be classified according to the action they embody, the object they manipulate, the data structure used, and the system they are part of. Classifying a component is then a matter of choosing an n-tuple which best fits that component. The essence of an indexing technique is to capture the relevant information of the entities to be classified. This requires knowledge of the kind of questions users will pose, as well as knowledge of the users search behavior. This is difficult, which makes the development of an indexing language a far from trivial undertaking. Librarians know this. Software engineers responsible for a library of reusable components should know this too. Any user of the Internet will have experienced that finding something that exactly fits your needs is a very difficult task"
"Justify with an example how In the world of engineering, the conventions for components are chosen such that they can be used for constructing systems with certain properties","In the world of engineering, the conventions for components are chosen such that they can be used for constructing systems with certain properties .For example, a racing car requires parts that are lightweight and aerodynamic in order to obtain an overall system that is fast","18.2. COMPONENT MODELS AND COMPONENTS In the introduction to this chapter, we made an analogy with LEGO and Meccano and noticed that composing building blocks is feasible only if they conform to the same set of conventions. In the world of engineering, the conventions for components are chosen such that they can be used for constructing systems with certain properties. For example, a racing car requires parts that are lightweight and aerodynamic in order to obtain an overall system that is fast. An army tank requires parts that are tough in order to make a robust system. Software components encapsulate functionality in a form that conforms to a set of conventions. These conventions ensure composability and determine the properties of systems that can be built using a particular type of components. Rather than physical properties, such as weight and shape, software components are required to have properties such as computational efficiency, resource efficiency, and reliability. These characteristics are captured in the following definition"
"Justify with an example how for this reason, it is important that component producers build a strategy for performing maintenance and take corresponding actions to ensure the realization of this strategy","For this reason, it is important that component producers build a strategy for performing maintenance and take corresponding actions to ensure the realization of this strategy .For example, component producers might decide to provide maintenance support; it is then important that they can reproduce the context in which the error manifested.","Maintenance. A specific aspect of maintenance in component-based systems is the relation between a component and the systems it is used in. If a bug in a component is fixed, the question is to which systems a new version of the component should be delivered. Who will be responsible for the update: the component producer or each of its consumers? There is also the question of who is responsible for component maintenance: is this a responsibility of the component producer or the producer of the system this component is part of? Do component producers have the obligation to fix bugs and support updates in the systems that make use of their components? Can they provide support in return for additional payment? Even more difficult problems are related to blame analysis. The issue is related to a manifestation of a fault and the origin of the fault itself. A fault might be detected in one component, but the cause of that fault might be in another component. For example, due to a high frequency of input in component A, component A requires more CPU time. As a consequence, component B does not complete its execution during the interval assumed by component C. Component C then issues a time-out error and a user of component C gets the impression that an answer from component C was not delivered. A first analysis shows that the problem is in component C, then B, then A, and finally in the input to A. The question is: who performs this analysis if the producers of components A, B, and C are different? Such situations can be regulated by contracts between the producers and consumers of the components, but this requires additional effort and, in many cases, it is not possible at all. The above example shows that maintenance activities can be much more extensive than expected. For this reason, it is important that component producers build a strategy for performing maintenance and take corresponding actions to ensure the realization of this strategy. For example, component producers might decide to provide maintenance support; it is then important that they can reproduce the context in which the error manifested. 18.4. ARCHITECTURAL APPROACHES IN COMPONENT-BASED DEVELOPMENT Industrial practice has established several approaches to using component-based development. These approaches, while similar in using component technology, have quite different processes and different solutions at the architectural level. In this section, we look at three approaches, all component-based, but with quite different assumptions, goals and, consequently, processes"
Justify with an example how The variables part of a BPEL4WS process definition is used to store state information related to the workflow,"The variables part of a BPEL4WS process definition is used to store state information related to the workflow .For example, the news service may store the healthcare information received from, say, the drugstore service, examine its contents and invoke the hospital service if the information received is of low quality","Information on partner links is also embedded in the WSDL definition of services. It resembles the information given in Figure 19. 9. The variables part of a BPEL4WS process definition is used to store state information related to the workflow. For example, the news service may store the healthcare information received from, say, the drugstore service, examine its contents and invoke the hospital service if the information received is of low quality. Each variable has a type, which has to be given upon definition of that variable. In a real news service interaction, there will be many requests for information, and many receipts, that co-exist, i.e. there will be many instances of the news service. Within a specific interaction, there thus has to be a way of connecting the right reply to a given request. This is similar to ordinary business transactions, where many orders may be alive concurrently. It is customary to identify particular orders by a specific token, say a purchase order number, which is used during the whole workflow. It is used when the order is shipped, when it is being paid, when enquiries are made, and so on. In service interactions, similar tokens are used as part of the messages being exchanged. Messages are correlated to relate operations within a service instance, for example to connect a news reply to the corresponding request"
Justify with an example how sense of urgency Multi-site development may result in differences in the perceived sense of urgency of handling requests,"Sense of urgency Multi-site development may result in differences in the perceived sense of urgency of handling requests .For example, a developer at one site may ask for clarification of some requirement in an email to a colleague at another site","Team members do not only coordinate work through an input - process - output model. There is more to coordination of work than the formal exchange of messages. A team builds up a shared mental model of the work to be done. Team members have to know what is to be done, what the other team members know, and the goals of colleagues. By studying what designers do, (Curtis et al., 1988) found that performance is improved when team members have a shared mental model. Building such a shared model is a lot easier when the team is collocated. Sense of urgency Multi-site development may result in differences in the perceived sense of urgency of handling requests. For example, a developer at one site may ask for clarification of some requirement in an email to a colleague at another site. The person receiving the email may not read his email for a while, or postpone an immediate answer. The developer in turn may be sitting idle, waiting for a reply. Direct contact with colleagues at the same site makes it easier to convey the urgency of a help request. Asynchronous communication such as sending emails lowers the perceived sense of urgency. The lack of a sense of urgency induces delays. Accurate status information In a global setting, it is difficult to exert effective control. For instance, if a team at one site exceeds its plan, that team can easily blame management at a remote site that has no idea of the complexity of our subsystem"
"Justify with an example how in order to be able to adequately control a project, we need quantitative data which is collected while the project is being executed","In order to be able to adequately control a project, we need quantitative data which is collected while the project is being executed .For instance, data about errors discovered during unit testing may help us in estimating further test effort needed","Continuous assessment of the project with respect to these control aspects is of the utmost importance and will from time to time lead to adjustments in time, cost, organization, information, or quality, or some combination thereof. Project management is a very dynamic activity. In order to be able to adequately control a project, we need quantitative data which is collected while the project is being executed. For instance, data about errors discovered during unit testing may help us in estimating further test effort needed. Data about the time and effort spent up to a specific point will guide us in re-estimating the schedule and cost. To measure is to know. These data are also valuable in a post-mortem evaluation of the project. In a postmortem evaluation we assess the present project in order to improve our performance on projects yet to come: what have we done wrong, what have we learned, what needs to be done differently on the next project? Unfortunately, in practice very little hard data is ever gathered, let alone retained for later use. Most software development organizations have little insight into what they are doing. They tend to operate in a somewhat chaotic way, especially when facing a crisis. By identifying key factors that affect the controllability of the software development process, we may find ways to improve on it. This topic is further treated in chapter 6, where we discuss the Software Capability Maturity Model"
Justify with an example how different versions of components of a system may also exist during development,"Different versions of components of a system may also exist during development .For instance, if a change request has been approved, a programmer may be implementing that change by rewriting one or more components","In the course of a software development project, quite a few documents are produced. These documents are also changed from time to time. Errors have to be corrected, change requests have to be taken care of, etc. Thus, at each point in time during a project, different versions of the same document may exist in parallel. Often too, a software system itself is not monolithic. Software systems exist in different versions or configurations. Different versions come about when changes are implemented after the system has been delivered to the customer. From time to time, the customer is then confronted with a new release. Different versions of components of a system may also exist during development. For instance, if a change request has been approved, a programmer may be implementing that change by rewriting one or more components. Another programmer, however, may still be using the previous version of those same components. Different configurations also come about if a set of components may be assembled into a system in more than one way. Take, for example, the system called ACK, the Amsterdam Compiler Kit (Tanenbaum et al., 1983). ACK consists of a set of programs to develop compilers for ALGOL-like languages. Important components of ACK are: front ends for languages such as Pascal, C, or Modula-2. A front end for language X will translate programs in that language into the universal intermediate code EM; different EM-optimizers; back ends, which translate EM-code to assembler-code for a variety of real machines"
Justify with an example how sCM tools may support users in selecting tasks and performing those tasks in the appropriate context,"SCM tools may support users in selecting tasks and performing those tasks in the appropriate context .For instance, the tool may assist in assigning the handling of a change request to a certain developer, and automatically provide her with a workspace with the components that need to be changed","Controlling. SCM tools may be used for traceability purposes. If sufficient information is stored, we may trace defects to requirements, analyze the impact of changes, and the like. Process. SCM tools may support users in selecting tasks and performing those tasks in the appropriate context. For instance, the tool may assist in assigning the handling of a change request to a certain developer, and automatically provide her with a workspace with the components that need to be changed. Team. SCM tools may support collaboration, for example by generating a workspace for a group of collaborating developers, by noticing conflicts between developers, and the like"
"Justify with an example how in general, meeting criteria at one level is not sufficient for meeting criteria at the next level","In general, meeting criteria at one level is not sufficient for meeting criteria at the next level .For instance, satisfaction is partly determined by internal and external quality measures, but also includes the users attitude towards the product","Quality in use is modeled in four characteristics: effectiveness, productivity, safety, and satisfaction. The definitions for these quality in use characteristics are given in table 6.7. Theoretically, internal quality, external quality and quality in use are linked together: internal quality indicates external quality, which in turn indicates quality in use. In general, meeting criteria at one level is not sufficient for meeting criteria at the next level. For instance, satisfaction is partly determined by internal and external quality measures, but also includes the users attitude towards the product. The latter has to be measured separately. Note that internal quality and external quality can be measured directly. Quality in use can in general only be measured indirectly. ON MANAGING SOFTWARE QUALITY Table 6.4 Quality characteristics and sub-characteristics of the external and internal quality model of ISO 9126 Characteristic Functionality Suitability Accuracy Interoperability Security Functionality compliance Maturity Fault tolerance Recoverability Reliability compliance Usability Understandability Learnability Operability Attractiveness Usability compliance Time behavior Resource utilization Efficiency compliance Analyzability Changeability Stability Testability Maintainability compliance Adaptability Installability Co-existence Replaceability Portability compliance Portability Table 6.5 Quality characteristics of the external and internal quality model of ISO 9126 (Source: ISO Standard 9126: Software Quality Characteristics and Metrics"
Justify with an example how this nominal cost estimate is tuned by correcting it for a number of factors that influence productivity (so-called cost drivers),"This nominal cost estimate is tuned by correcting it for a number of factors that influence productivity (so-called cost drivers) .For instance, if one of the factors used is experience of the programming team, this could incur a correction to the nominal cost estimate of 1.50, 1.20, 1.00, 0.80 and 0.60 for a very low, low, average, high and very high level of expertise, respectively. software size and effort","These historical data can be used to produce estimates for new projects. In doing 7.1. ALGORITHMIC MODELS so, we predict the expected cost on account of measurable properties of the project at hand. Just as the cost of laying out a garden might be a weighted combination of a number of relevant attributes (size of the garden, size of the grass area, yes/no for a pond), so we would like to estimate the cost of a software development project. In this section, we discuss efforts to get at algorithmic models to estimate software cost. In the introduction to this chapter, we noticed that programming effort is strongly correlated with program size. There exist various (non-linear) models which express this correlation. A general form is E = (a + bKLOC )f (x1 ; : : : ; xn ) Here, KLOC again denotes the size of the software (lines of code/1000), while E denotes the effort in man-months. a, b and are constants, and f x1 ; : : : ; xn is a correction which depends on the values of the entities x1 ; : : : ; xn . In general, the base formula ) E = a + bKLOC is obtained through a regression analysis of available project data. Thus, the primary cost driver is software size, measured in lines of code. This nominal cost estimate is tuned by correcting it for a number of factors that influence productivity (so-called cost drivers). For instance, if one of the factors used is experience of the programming team, this could incur a correction to the nominal cost estimate of 1.50, 1.20, 1.00, 0.80 and 0.60 for a very low, low, average, high and very high level of expertise, respectively. software size and effort. For reasons mentioned before, it is difficult to compare these models. It is interesting to note, though, that the value of fluctuates around the value 1 in most models"
"Justify with an example how end users tend to also ascribe to business requirements, at least at an early stage","However, end users tend to also ascribe to business requirements, at least at an early stage .For instance, when John is asked whether fines are a welcome addition to the subsidy the library gets from the government, a likely answer is yes","This situation is graphically depicted in the graph in figure 9.7. The graph contains nodes of types issue, position and argument, and directed links of type response-to, taken-by and supports. Capturing this type of information in an automated system offers possibilities to store, trace and manipulate the very diverse types of information being gathered during the requirements engineering phase. An early system along these lines is gIBIS, a system designed to capture early design decisions. Two viewpoints in particular are important during requirements engineering: the business viewpoint and the personal viewpoint. The business viewpoint is usually propagated by management stakeholders, while the personal viewpoint is usually propagated by end users. However, end users tend to also ascribe to business requirements, at least at an early stage. For instance, when John is asked whether fines are a welcome addition to the subsidy the library gets from the government, a likely answer is yes. This requirement is viewed as a requirement of the business, not a personal requirement of John. Only when he is confronted with the consequences, will he realize that this is after all not what he wants. And a request to change the system will follow. 9.1.4 Prioritizing Requirements Our task is not to provide every button and pull-down menu enhancement that our customers ask for, but to invent a completely new way of working -- one that will thrill REQUIREMENTS ENGINEERING and amaze them"
Justify with an example how abstract classes typically occur in hierarchies of data types,"Abstract classes typically occur in hierarchies of data types .For instance, we may have an abstract class List, with subclasses like LinkedList and ArrayList. (b) a simple class diagram The abstract class List may have abstract operations as well, such as get, that can only be made concrete at the subclass level","So it is wise to only include important dependencies. Many types of dependencies need not be modeled by hand, but can be derived from the source code, and tools exist that do so. An abstract class is a class that cannot be instantiated directly. Only its (concrete) clients can. Abstract classes typically occur in hierarchies of data types. For instance, we may have an abstract class List, with subclasses like LinkedList and ArrayList. (b) a simple class diagram The abstract class List may have abstract operations as well, such as get, that can only be made concrete at the subclass level. At the level of List, we then merely state that each of its subclasses will provide an implementation of get. In our library example, we could have designated Publication as an abstract class. Abstract classes are indicated by printing their name in italics"
"Justify with an example how often, different scenarios are variations on the same theme","Often, different scenarios are variations on the same theme .For instance, one scenario may describe the ordinary borrowing of a book, another one may describe borrowing a book when there are still outstanding fines, and so on","The Use Case One possible requirements elicitation technique is scenario-based analysis; see also chapter 9. A scenario is a story which tells how a specific task instance is executed. Often, different scenarios are variations on the same theme. For instance, one scenario may describe the ordinary borrowing of a book, another one may describe borrowing a book when there are still outstanding fines, and so on. A set of scenarios having the same user goal, in this case borrowing, is called a use case. A use case can be documented in various ways: as narrative text, formally using pre- and postconditions, for example, or graphically as in a state transition diagram"
Justify with an example how some diagrams give a static view of the system,"Some diagrams give a static view of the system .For instance, a class diagram shows how a system is statically organized into classes","CRC Cards, a simple notation to document collaborative design decisions. UML evolved from earlier object-oriented analysis and design methods. Concepts used in UML, such as object, attribute, class, relationship, originate in the field of object orientation. UML 2 offers 13 diagram types. These fall into two classes. Some diagrams give a static view of the system. For instance, a class diagram shows how a system is statically organized into classes. Other diagrams give a dynamic view. For instance, a sequence diagram shows the time ordering of message exchanges between instance of classes. Further Reading Entity--relationship modeling was pioneered by Chen (Chen, 1976). Many texts on database modeling include an elaborate discussion of ERM; see for example (Batini et al., 1992). Statecharts are described in (Harel, 1988). CRC cards are described in (Beck and Cunningham, 1989)"
"Justify with an example how a priori, it is often not at all clear if and why one design decision is more important than another","A priori, it is often not at all clear if and why one design decision is more important than another .For instance, we may decide to separate the user interface from the processing part and store data about books in a flat file in our library system","The latter definition reflects, among others, the insight that there may be more than one structure that is of interest. In house construction, we also use different drawings: one for the electrical wiring, one for the water supply, etc. These drawings reflect different structures which are all part of the same overall architecture. We generally observe the architecture through one of these more specific views. The same holds for the software architecture. This is further elaborated in section 11.3. In the software architecture, the global structure of the system has been decided upon. This global structure captures the early, major design decisions. Whether a design decision is major or not really can only be ascertained with hindsight, when we try to change the system. Only then will it show which decisions were really important. A priori, it is often not at all clear if and why one design decision is more important than another (Fowler, 2003). For instance, we may decide to separate the user interface from the processing part and store data about books in a flat file in our library system. Both decisions could be important, but need not be. Separating the user interface from the processing part is generally considered good design. If, at a later stage, changes occur in either part, we will be glad to have made this decision. If no such changes occur, the decision was not all that important, after all. Deciding to use flat files to store data in our library system may turn out to have been important if our library grows and we are forced to switch to database storage of data. But again, if no such change occurs, the decision wasnt that important either. Viewed this way, the architectural design process is about making the important design decisions. Next, these important design decisions need to be documented"
Justify with an example how a module exhibits procedural cohesion if it consists of a number of elements that have to be executed in some given order,"a module exhibits procedural cohesion if it consists of a number of elements that have to be executed in some given order .For instance, a module may have to first read some datum, then search a table, and finally print a result","Temporal cohesion A typical example of this type of cohesion is an initialization module. The various elements of it are independent but they are activated at about the same point in time. Procedural cohesion A module exhibits procedural cohesion if it consists of a number of elements that have to be executed in some given order. For instance, a module may have to first read some datum, then search a table, and finally print a result. Communicational cohesion This type of cohesion occurs if the elements of a module operate on the same (external) data. For instance, a module may read some data from a disk, perform certain computations on those data, and print the result"
Justify with an example how communicational cohesion occurs if the elements of a module operate on the same (external) data,"communicational cohesion occurs if the elements of a module operate on the same (external) data .For instance, a module may read some data from a disk, perform certain computations on those data, and print the result","Procedural cohesion A module exhibits procedural cohesion if it consists of a number of elements that have to be executed in some given order. For instance, a module may have to first read some datum, then search a table, and finally print a result. Communicational cohesion This type of cohesion occurs if the elements of a module operate on the same (external) data. For instance, a module may read some data from a disk, perform certain computations on those data, and print the result. Sequential cohesion Sequential cohesion occurs if the module consists of a sequence of elements where the output of one element serves as input to the next element"
"Justify with an example how in an evolving world, the objects tend to be stable, while the functions tend to change","In an evolving world, the objects tend to be stable, while the functions tend to change .For instance, in an office environment the functions performed are likely to change with time, but there will always be letters, folders, and so on","The object-oriented approach leads to more flexible systems that are easier to adapt and change. Because the real-world objects have a direct counterpart in the implementation, it becomes easy to link change requests to the corresponding program modules. Through the inheritance mechanism, changes can often be realized by adding another specialized object rather than through tinkering with the code. For example, if we wish to extend our system dealing with furniture by adding another type of chair, say armchair, we do so by defining a new object ArmChair, together with its own set of attributes, as another specialization of Chair. The object-oriented approach promotes reuse by focusing on the identification of real-world objects from the application domain. In contrast, more traditional approaches focus on identifying functions. In an evolving world, the objects tend to be stable, while the functions tend to change. For instance, in an office environment the functions performed are likely to change with time, but there will always be letters, folders, and so on. Thus, an object-oriented design is less susceptible to changes in the world being modeled.  The inheritance mechanism adds to reusability. New objects can be created as specializations of existing objects, inheriting attributes from the existing objects. At the implementation level, this kind of reuse is accomplished through code sharing. The increasing availability of class libraries contributes to this type of code reuse"
Justify with an example how keeping software alive incurs other costs too,"Keeping software alive incurs other costs too .For instance, new users must be trained, and the helpdesk needs to be staffed","In many organizations, the definition of software maintenance does not follow the IEEE definition. Some organizations for instance define change efforts larger than, say, three months, as development rather than maintenance. This blurs the picture even further. In practice also, people find it difficult to distinguish between adaptive and perfective maintenance. What remains then is a distinction between correcting fault and the rest. The latter mostly caters for 75% or more of the maintenance effort. The maintenance categories from (Lientz and Swanson, 1980) refer to the software only. Keeping software alive incurs other costs too, though. For instance, new users must be trained, and the helpdesk needs to be staffed. Nowadays, it is not uncommon that these supporting costs account for around 25% of the cost of keeping a system deployed. Another way to look at the distribution of maintenance cost and prevailing types of maintenance tasks is along the time dimension. We may distinguish the following maintenance life cycle stages:     During the introductory stage of a new system, most of the effort is spent on user support. Users have to be trained, and they will often contact the helpdesk for clarification"
"Justify with an example how if people do both maintenance work and development, some control can be exercised by specifically allocating certain periods of time as maintenance periods","If people do both maintenance work and development, some control can be exercised by specifically allocating certain periods of time as maintenance periods .For instance, the first week of each calendar month may be set aside for maintenance","The major advantages are:   Clear accountability: we may clearly separate the cost and effort involved in maintenance activities from investments in new developments. If personnel are involved in both types of work, they have some freedom in charging their time. It is then more difficult to measure and predict the real cost of software maintenance. Intermittent demands of maintenance make it difficult to predict and control progress of new system development. If people do both maintenance work and development, some control can be exercised by specifically allocating certain periods of time as maintenance periods. For instance, the first week of each calendar month may be set aside for maintenance. But even then, maintenance problems are rather unpredictable and some need immediate attention. Many a schedule slippage is due to the maintenance drain. A separation of maintenance and development facilitates and motivates the maintenance organization to conduct a meaningful acceptance test before the system is taken into production. If such an acceptance test is not conducted explicitly, maintenance may be confronted with low-quality software or systems which still need a finishing touch which the development team has left undone for lack of time"
Justify with an example how it is important to be able to adapt the precise form of reports and documentation to the requirements of the user,"It is important to be able to adapt the precise form of reports and documentation to the requirements of the user .For instance, internal standards of some organization may enforce certain report formats","Managing information. A prime example is managing requirements. A simple way is to store them in a plain text document. More advanced tools allow for maintaining relations between requirements, tracing requirements to design documents, detecting and handling conflicts, and the like. Generating reports and documentation. It is important to be able to adapt the precise form of reports and documentation to the requirements of the user. For instance, internal standards of some organization may enforce certain report formats. It should be possible to configure the tools to adhere to these standards. Further tools of an AWB may support, amongst others, prototyping, the generation of user interfaces, or the generation of executable code. Post et al. (1998) found that users perceive two types of (Upper-CASE) tool: those that are good at supporting analysis and design tasks and those that are good at code generation and prototyping"
Justify with an example how the service consumer may also take other considerations into account when choosing a particular service,"The service consumer may also take other considerations into account when choosing a particular service .For instance, depending on demand load, complexity of the question, and other parameters, a service at a particular location may be selected","The service consumer may also take other considerations into account when choosing a particular service. For instance, depending on demand load, complexity of the question, and other parameters, a service at a particular location may be selected. The dynamism of service orientation thus offers a way of optimizing use of computer resources. Dynamic discovery can also be used to increase the robustness and fault tolerance of applications"
"Justify with an example how if a collection of services is to be integrated into a service-oriented system, there are certain global rules or constraints that such a conglomerate has to obey","If a collection of services is to be integrated into a service-oriented system, there are certain global rules or constraints that such a conglomerate has to obey .For instance, if a complex insurance service consists of several smaller services, we may require that a transaction is completed entirely","19.3. WEB SERVICES Web services are an implementation way of realizing services. Web services use a standardized way to integrate services across the Internet. The main open standards used to realize Web services are: applications In the context of Web services, XML is used to structure messages. In particular, SOAP messages, WSDL documents, and UDDI descriptions are all encoded as XML documents. These open standards achieve interoperability between two services. What they do not achieve is integration of a collection of services. If a collection of services is to be integrated into a service-oriented system, there are certain global rules or constraints that such a conglomerate has to obey. For instance, if a complex insurance service consists of several smaller services, we may require that a transaction is completed entirely. If this cannot be achieved, parts that have been realized have to be undone. Also, we may wish to be able to roll back to earlier points in the process. This requires a language to express the flow of process steps. One such language is the Business Process Execution Language for Web Services (BPEL4WS). This type of language is used at the coordination layer of the SOA (Figure 19.3)"
"Justify with an example how accurate status information In a global setting, it is difficult to exert effective control","Accurate status information In a global setting, it is difficult to exert effective control .For instance, if a team at one site exceeds its plan, that team can easily blame management at a remote site that has no idea of the complexity of our subsystem","Sense of urgency Multi-site development may result in differences in the perceived sense of urgency of handling requests. For example, a developer at one site may ask for clarification of some requirement in an email to a colleague at another site. The person receiving the email may not read his email for a while, or postpone an immediate answer. The developer in turn may be sitting idle, waiting for a reply. Direct contact with colleagues at the same site makes it easier to convey the urgency of a help request. Asynchronous communication such as sending emails lowers the perceived sense of urgency. The lack of a sense of urgency induces delays. Accurate status information In a global setting, it is difficult to exert effective control. For instance, if a team at one site exceeds its plan, that team can easily blame management at a remote site that has no idea of the complexity of our subsystem. Tracking status is essential in a global software development project. If code is developed at different sites and has to be integrated at a third site, management needs to have accurate status information"
"Justify with an example how if different sites are responsible for different life cycle phases, this may incur delays","If different sites are responsible for different life cycle phases, this may incur delays .For instance, the development site may decide not to ship code to the testing site until all the components have been developed, and the site responsible for testing will have to wait for the code to be shipped","Reducing the need or communication, be it formal or informal, is usually achieved through organizational means. Typically, people that have to interact a lot are located at the same site. This not only reduces the need for communication, but also makes the coordination of work a lot easier. For instance, experts in a certain area, such as user interfaces, are put together at the same site. User interfaces for all the systems of an enterprise are then developed at that site. Alternatively, the gross structure of the system, the architecture, can be used to divide work amongst sites. This can be seen as a variation of Conways Law (Conway, 1968), which states that the structure of a product mirrors the organizational structure of the people who designed it. If three groups are involved in the development of a system, that system will have three major subsystems. This way of decomposing work is the programming-in-the-large equivalent of Parnas advice to consider a module as a responsibility assignment rather than a subprogram (Parnas, 1972). A third way is to split up tasks according to life cycle phases: design is done at one site, development at a second, testing at a third. Each of these organizational means has advantages and disadvantages. Each may work well, but problems may arise if a lot of coordination is required that crosses the boundaries of the division. Many projects require more than one functional area. A system needs a user interface, a database, security protection, and so on. If each site has a specific expertise, many projects will require a lot of cross-site coordination. If different sites are responsible for different subsystems, problems may arise with tasks that involve more than one subsystem, such as integration testing. If different sites are responsible for different life cycle phases, this may incur delays. For instance, the development site may decide not to ship code to the testing site until all the components have been developed, and the site responsible for testing will have to wait for the code to be shipped. Division of work amongst sites is not only guided by objective arguments. For instance, if different sites develop different components, a political battle may ensue as to who is going to develop which component. A component whose requirements are volatile, or one that critically depends on hardware that has not been acquired yet, may easily lead to problems and had thus better be the responsibility of someone else. On the other hand, a high-visibility component may be attractive to develop. This way, politics enters the picture when it comes to division of labor"
Justify with an example how division of work amongst sites is not only guided by objective arguments,"Division of work amongst sites is not only guided by objective arguments .For instance, if different sites develop different components, a political battle may ensue as to who is going to develop which component","Each of these organizational means has advantages and disadvantages. Each may work well, but problems may arise if a lot of coordination is required that crosses the boundaries of the division. Many projects require more than one functional area. A system needs a user interface, a database, security protection, and so on. If each site has a specific expertise, many projects will require a lot of cross-site coordination. If different sites are responsible for different subsystems, problems may arise with tasks that involve more than one subsystem, such as integration testing. If different sites are responsible for different life cycle phases, this may incur delays. For instance, the development site may decide not to ship code to the testing site until all the components have been developed, and the site responsible for testing will have to wait for the code to be shipped. Division of work amongst sites is not only guided by objective arguments. For instance, if different sites develop different components, a political battle may ensue as to who is going to develop which component. A component whose requirements are volatile, or one that critically depends on hardware that has not been acquired yet, may easily lead to problems and had thus better be the responsibility of someone else. On the other hand, a high-visibility component may be attractive to develop. This way, politics enters the picture when it comes to division of labor. The three main ways of coordinating work in global software development are architecture, plans, and processes (Herbsleb and Grinter, 1999). The architecture of a system establishes a division of responsibilities into independent building blocks. The design and implementation of the building blocks may be assigned to different sites. Plans describe when milestones are reached and who does what"
"Justify with an example how if such assumption is true, the partition is perfect and so is the test set","If such assumption is true, the partition is perfect and so is the test set .Such assumption will in general not hold however (see also section 13.1.2)","The weak point in this procedure is the underlying assumption that the program behaves equivalently on all data from a given class. If such assumption is true, the partition is perfect and so is the test set. Such assumption will in general not hold however (see also section 13.1.2). Fault-Based Test Techniques In coverage-based testing techniques, we consider the structure of the problem or its solution, and the assumption is that a more comprehensive covering is better"
Justify with an example how you do not need to contact us for permission unless youre reproducing a significant portion of the code,"You do not need to contact us for permission unless youre reproducing a significant portion of the code .For example, writing a program that uses several chunks of code from this book does not require permission","| Using Code Examples We have a web page for this book, where we list errata, share more stories, and post additional material. This material is available at http://effectivedevops.net. This book is here to help you get your job done. In general, if example code is offered with this book, you may use it in your programs and documentation. You do not need to contact us for permission unless youre reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. Selling or distributing a CD-ROM of examples from OReilly books does require permission. Answering a question by citing this book and quoting example code does not require permission. Incorporating a signifi cant amount of example code from this book into your products documentation does require permission. We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: Effective DevOps by Jennifer Davis and Katherine Daniels (OReilly). Copyright 2016 Jennifer Davis and Katherine Dan iels, 978-1-491-92630-7"
"Justify with an example how an attribution usually includes the title, author, publisher, and ISBN","An attribution usually includes the title, author, publisher, and ISBN .For example: Effective DevOps by Jennifer Davis and Katherine Daniels (OReilly)Copyright 2016 Jennifer Davis and Katherine Dan iels, 978-1-491-92630-7","This book is here to help you get your job done. In general, if example code is offered with this book, you may use it in your programs and documentation. You do not need to contact us for permission unless youre reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. Selling or distributing a CD-ROM of examples from OReilly books does require permission. Answering a question by citing this book and quoting example code does not require permission. Incorporating a signifi cant amount of example code from this book into your products documentation does require permission. We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: Effective DevOps by Jennifer Davis and Katherine Daniels (OReilly). Copyright 2016 Jennifer Davis and Katherine Dan iels, 978-1-491-92630-7. If you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at permissions@oreilly.com"
"Justify with an example how depending on the application type, different engineering concerns may be important","Depending on the application type, different engineering concerns may be important .For example, databases may have strict guarantees in terms of consistency","Depending on the application type, different engineering concerns may be important. For example, databases may have strict guarantees in terms of consistency. If a trans action occurs, it must be reflected in the data. Application deployment is a critical aspect to engineering quality software. Continuous Integration Continuous integration (CI) is the process of integrating new code written by devel opers with a mainline or master branch frequently throughout the day. This is in contrast to having developers working on independent feature branches for weeks or months at a time, merging their code back to the master branch only when it is com pletely finished. Long periods of time in between merges means that much more has been changed, increasing the likelihood of some of those changes being breaking ones. With bigger changesets, it is much more difficult to isolate and identify what caused something to break. With small, frequently merged changesets, finding the specific change that caused a regression is much easier. The goal is to avoid the kinds of integration problems that come from large, infrequent merges"
"Justify with an example how any team within the organization should be consideredincluding security, QA, support, and legalin order to be most effective","Any team within the organization should be consideredincluding security, QA, support, and legalin order to be most effective .For example, effective devops processes between legal and sales allow for automated contract creation based on a consistent sales catalog. Any two or more teams can benefit from devops principles, and it is important not to limit the potential reach of these ideas, nor to replace one group of silos with another","Devops Only Involves Developers and System Administrators While the name is a portmanteau of development (or developers) and operations, this is more of a signal of the origin of the movement than a strict definition of it. While the devopsdays conference tagline is the conference that brings development and operations together, the concepts and ideas of devops include all roles within an organization. There is no one definitive list of which teams or individuals should be involved or how, just as there is no one-size-fits-all way to do devops. Ideas that help development and operations teams communicate better and work more efficiently together can be applied throughout a company. Any team within the organization should be consideredincluding security, QA, support, and legalin order to be most effective. For example, effective devops processes between legal and sales allow for automated contract creation based on a consistent sales catalog. Any two or more teams can benefit from devops principles, and it is important not to limit the potential reach of these ideas, nor to replace one group of silos with another. In Part III, we will discuss considerations for effectively engaging teams"
"Justify with an example how cutting down on interrupting not only increases understanding, but also helps peo ple to feel that they are being heard, increasing trust and empathy","Cutting down on interrupting not only increases understanding, but also helps peo ple to feel that they are being heard, increasing trust and empathy .For example, studies have shown that when women phrase things the same way as men, they are perceived as more harsh, abrasive, or aggressive, while men are praised for how straightforward and take-charge they are","This sort of interrupt culture is an example of communication that is competitive, rather than collaborative, and offers much less chance for trust to build up between individuals and teams. Com munication happens to influence, but rarely to understand, and there is not much in the way of social capital. Cutting down on interrupting not only increases understanding, but also helps peo ple to feel that they are being heard, increasing trust and empathy. For example, studies have shown that when women phrase things the same way as men, they are perceived as more harsh, abrasive, or aggressive, while men are praised for how straightforward and take-charge they are. On the other side, | women are often judged negatively for softening their language by apologizing or using hedging words like just. If they interrupt as much as their male colleagues they are often deemed unlikeable, but without interrupting, depending on the office culture, it can be hard to ever get their opinions heard. These sorts of contexts can have an enormous impact on how successful our communications are and should be kept in mind, especially when working to improve a teams diversity and inclusivity. Empathy and Trust Effective communication, in addition to being crucial for distributing information, is key to building a foundation of trust and empathy between individuals, and that foundation is what enables devops to really work. This goes back to the root of the devops compact that we introduced earlier in the book. In order to continue working toward the same shared goals, we need to be able to empathize with and trust each other"
"Justify with an example how there are specific expectations based on the culture of the team, organization, and industry of what a role entails","There are specific expectations based on the culture of the team, organization, and industry of what a role entails .For example, manager, architect, lead, and project manager all have connotations within a culture that influence and affect peoples per ception of competence","| The first step toward resolution is clarifying roles and responsibilities. If someones role is sufficiently vague, or if their actual responsibilities have changed over time in response to an evolving work environment, there could be a relatively simple discon nect or miscommunication regarding what is expected of them. Once these expecta tions have been clarified, they should be assessed for how realistic they are: does the individual have the knowledge and resources necessary to complete their goals? If more training or education is needed, it should be provided and the employee should be given time to incorporate their learnings. If someone doesnt have the time or workplace resources required to get everything done, that should be addressed as well. Comparing workloads between different employees at similar levels with similar roles can often reveal if work needs to be rebalanced. Expectations of a Role When it comes to work, a role is a function composed of a particular set of repeated tasks. There are specific expectations based on the culture of the team, organization, and industry of what a role entails. For example, manager, architect, lead, and project manager all have connotations within a culture that influence and affect peoples per ception of competence. If someone is an architect, some organizations might not expect them to concern themselves with code, but not every organization defines an architect role in this way. When joining a new team, it is critical to understand indi viduals expectations of the role within the culture. Over time, within the same team and organization, role expectations may vary. If reports that someone isnt performing well come from people other than the indi vidual concerned, such as teammates or managers, work should be undertaken to fig ure out how accurate these statements are. This is an area where unconscious biases can sometimes sneak in, coloring our views of people in ways we might not expect"
Justify with an example how making sure that the teams values are understood can go a long way toward preventing or resolving interpersonal conflicts,"Making sure that the teams values are understood can go a long way toward preventing or resolving interpersonal conflicts .For example, a conflict could arise between two members working together on a project with a rapidly approaching deadline","Team Culture The culture of a team can greatly impact the effectiveness of the teams work and the strength of the ties between team members. Rather than talking about culture in terms of culture fit and if your teammates are people youd want to go grab a beer with, it is much more important to focus on culture as the values that a team shares and how those values are expressed in practice. Shared values, when clearly communicated, can be a strong binding force among team members. Making sure that the teams values are understood can go a long way toward preventing or resolving interpersonal conflicts. For example, a conflict could arise between two members working together on a project with a rapidly approaching deadline. One might feel that they should go ahead and ship what they have despite it not being fully tested or feature-complete, as they value following through on promises and making deadlines, while the other might want to wait, valu ing only shipping work that meets a certain standard of quality. Who is right in this sort of situation depends largely on which of these values the team overall has deci ded is more important. It is important that the teams values not be in conflict with either overall organiza tional or company-wide values or with the individual values of team members. This is an area where the notion of cultural fit often arises. As we will discuss in Part V, this concept is not without its problems: it can too often be used to describe common activities, such as drinking beer or being fans of a certain sports team, rather than common goals and values"
Justify with an example how a corollary to this rule is that different kinds of groups tend to emerge based on the perceived sources of these external pressures or conflicts,"A corollary to this rule is that different kinds of groups tend to emerge based on the perceived sources of these external pressures or conflicts .For example, developers might view operations engineers as the source of their problems when the issue might be unrealistic deadlines and expectations being set by upper management","accentuates and maintains group boundaries, drawing people together who might normally have nothing to do with each otherthe enemy of my enemy is my friend. A corollary to this rule is that different kinds of groups tend to emerge based on the perceived sources of these external pressures or conflicts. For example, developers might view operations engineers as the source of their problems when the issue might be unrealistic deadlines and expectations being set by upper management. In these cases, the perceived in-groups and out-groups tend to be very strong, indeed shaping the social environment. When applied in a workplace environment, the intergroup conflict that arises between different groups or teams within the organization can lead to rival interests, with different groups seen as being in constant competition with each other. We want to help members of our own group, or team, at the expense of other groups, and group memberships can become very strong parts of our workplace identities. People tend to form attitudes that stigmatize the out-group membersone example being the Bastard Operator from Hell caricature of a system administrator who refers to any and all nontechnical computer users as lusers, the implication being that they are also losers. Naturally, these kinds of biases and intergroup conflicts dont lend themselves to a cohesive organization as a whole"
"Justify with an example how while it may seem like opt-in creates a barrier to entry that might discourage people from joining, opt-out has the issue of requiring people to admit that they dont want to do something, or provide specific reasons for doing so","While it may seem like opt-in creates a barrier to entry that might discourage people from joining, opt-out has the issue of requiring people to admit that they dont want to do something, or provide specific reasons for doing so .For example, many compa nies view drinking alcohol as the default after-work activity, and startups especially are prone to peer pressure when it comes to drinking, where not going to a bar after work labels someone as different or not a team player","In terms of making sure an environment is as inclusive as possible, also think about what office activities, especially social or extracurricular ones, are opt-in versus optout. An opt-in activity is one that employees are not a part of unless they choose to join, whereas an opt-out activity is one that all employees are expected to participate in by default unless they explicitly opt out of doing so. While it may seem like opt-in creates a barrier to entry that might discourage people from joining, opt-out has the issue of requiring people to admit that they dont want to do something, or provide specific reasons for doing so. For example, many compa nies view drinking alcohol as the default after-work activity, and startups especially are prone to peer pressure when it comes to drinking, where not going to a bar after work labels someone as different or not a team player. A new employee is likely to feel uncomfortable having to explain reasons for opting out of this to new coworkers they dont know very well, which is then likely to make them feel excluded. In this example, an office kitchenette stocked with a variety of alcoholic and nonalcoholic drinks, with no mandatory times when everyone is expected to partake, is a much more inclusive setup. | Stereotype Threat Stereotype threat is what happens when people find themselves in a position where they are at risk of confirming a negative stereotype about themselves and the group they are a part of. It has been shown in over 300 different studies to decrease individ uals performance, especially when they expect discriminations based on their group membership or identity. For example, take the stereotype that women are worse at math than men"
"Justify with an example how it has been shown in over 300 different studies to decrease individ uals performance, especially when they expect discriminations based on their group membership or identity","It has been shown in over 300 different studies to decrease individ uals performance, especially when they expect discriminations based on their group membership or identity .For example, take the stereotype that women are worse at math than men","While it may seem like opt-in creates a barrier to entry that might discourage people from joining, opt-out has the issue of requiring people to admit that they dont want to do something, or provide specific reasons for doing so. For example, many compa nies view drinking alcohol as the default after-work activity, and startups especially are prone to peer pressure when it comes to drinking, where not going to a bar after work labels someone as different or not a team player. A new employee is likely to feel uncomfortable having to explain reasons for opting out of this to new coworkers they dont know very well, which is then likely to make them feel excluded. In this example, an office kitchenette stocked with a variety of alcoholic and nonalcoholic drinks, with no mandatory times when everyone is expected to partake, is a much more inclusive setup. | Stereotype Threat Stereotype threat is what happens when people find themselves in a position where they are at risk of confirming a negative stereotype about themselves and the group they are a part of. It has been shown in over 300 different studies to decrease individ uals performance, especially when they expect discriminations based on their group membership or identity. For example, take the stereotype that women are worse at math than men. Women who are exposed to this stereotype will perform more poorly on math exams than those who arent, as well as displaying more stress responses such as elevated heart rate and increased cortisol levels. Long-term exposure to stereotype threat can have the same negative long-term effects on mental and physical health that chronic stress does"
"Justify with an example how when noncooperative behav ior is collectively punished, cooperative behavior ends up becoming self-enforcing","When noncooperative behav ior is collectively punished, cooperative behavior ends up becoming self-enforcing .For example, if every person on a team points out or doesnt tolerate someone inter rupting others, that team starts to collectively learn that interrupting isnt an effective way to get your voice heard, and interruptions will tend to decrease over time","Ostrom and other game theory researchers have noted that the ability to sanction behavior has a substantial effect on overall cooperation. When noncooperative behav ior is collectively punished, cooperative behavior ends up becoming self-enforcing. For example, if every person on a team points out or doesnt tolerate someone inter rupting others, that team starts to collectively learn that interrupting isnt an effective way to get your voice heard, and interruptions will tend to decrease over time. But if some people allow interruptions, this self-enforcing behavior will not be seen. 13 Garrett Hardin, The Tragedy of the Commons, Science, December 13, 1968"
Justify with an example how fostering opportuni ties for people from different teams to pair with each other to work on projects can start building these same bonds in a few hours rather than a few weeks,"Fostering opportuni ties for people from different teams to pair with each other to work on projects can start building these same bonds in a few hours rather than a few weeks .For example, you could set up an opt-in system where engineers get paired up to work through a backlog of bugs or small ticket items, whether this be for internal products or open source projects that the company either uses or maintains. Rotations outside engineering As we have mentioned previously, the principles described in this book can be applied beyond just developers and operations engineers to create and maintain an even stronger company and industry culture","When this is done after the beginning of someones tenure in a particular role, it is often called a rotation. Some organizations or teams offer companies the ability to do senior rotations once a year, planned enough in advance that their absence for a few weeks will not be overly disruptive. Senior rotations might also be a bit more flexible when it comes to which teams people might choose to work with. Because they are now well established in their own team and the teams they regularly work with, they might take this opportunity to work on a rather different teamsuch as an opera tions engineer working on a mobile development or frontend engineering teamin order to explore different areas and technologies that they might otherwise gain exposure to. Working as a member of another team has the same overall benefits of a designation program, but tends to build an even deeper foundation of empathy and understand ing as well as bringing about much more overlap between different group member ships. In organizations where it is harder to get buy-in for a program of this size, there are other ways to achieve similar results at a smaller scale. Fostering opportuni ties for people from different teams to pair with each other to work on projects can start building these same bonds in a few hours rather than a few weeks. For example, you could set up an opt-in system where engineers get paired up to work through a backlog of bugs or small ticket items, whether this be for internal products or open source projects that the company either uses or maintains. Rotations outside engineering As we have mentioned previously, the principles described in this book can be applied beyond just developers and operations engineers to create and maintain an even stronger company and industry culture. Many tech companies, especially start ups, tend to value their engineers very highly, but too often this comes at the expense of nonengineering teams. While engineers get branded engineering hoodies and allexpenses-paid trips to conferences, other departments might reasonably start to feel that they are undervalued and underappreciated"
"Justify with an example how while some people might be more resistant to change at an individual level, and some people and teams might not see eye to eye as a result of a previously less open and more blameful culture, efforts can be made at all levels to move past blameful ness, to clear up confusion that arises from evolving roles and responsibilities, and to create a more open and collaborative culture going forward","While some people might be more resistant to change at an individual level, and some people and teams might not see eye to eye as a result of a previously less open and more blameful culture, efforts can be made at all levels to move past blameful ness, to clear up confusion that arises from evolving roles and responsibilities, and to create a more open and collaborative culture going forward .For example, the CIO went out and purchased small trinkets called DevOps Doer Mementos and has handed them out to people in the organization that are taking steps toward creating that kind of devops culture. Some parts of the organization seem to be changing faster than others, but overall there is a feeling of steady progress, even if it can be slow at times","It can certainly be frustrating to feel like different people or teams in an organization are moving in different directions or even working in opposition to one another, but in fact being able to recognize and discuss these differences is key to being able to work through them. Especially in a larger organization, differing expectations and viewpoints are to be expected, and a team of executive leaders that are able to have conversations about what success looks like and steer their different teams and areas toward a common culture, like the leadership at the USPTO, is a necessary step toward successful cultural change. While some people might be more resistant to change at an individual level, and some people and teams might not see eye to eye as a result of a previously less open and more blameful culture, efforts can be made at all levels to move past blameful ness, to clear up confusion that arises from evolving roles and responsibilities, and to create a more open and collaborative culture going forward. For example, the CIO went out and purchased small trinkets called DevOps Doer Mementos and has handed them out to people in the organization that are taking steps toward creating that kind of devops culture. Some parts of the organization seem to be changing faster than others, but overall there is a feeling of steady progress, even if it can be slow at times. Support and buyin from management and leadership in the organization, combined with more grassroots efforts from the teams involved in their day-to-day work, is a combination that is working well for Donbeck and her organization as a whole, and one that other large organizations could learn from"
"Justify with an example how as an organization starts moving toward a culture of effective devops, there may be people who are vocally opposed to these changes as their way of resist ing them","As an organization starts moving toward a culture of effective devops, there may be people who are vocally opposed to these changes as their way of resist ing them .For example, suppose an organization is making progress on moving away from an infrequent and manual deploy process toward a more automated continuous delivery one","People Are Blaming Mistakes on Devops Significant changes are never without their difficulties, and there are always some people who are much more resistant to change than others. One thing that might happen during transitional periods within an organization is that people who are opposed to the ongoing changes, for whatever reason, will blame them for any issues or mistakes. As an organization starts moving toward a culture of effective devops, there may be people who are vocally opposed to these changes as their way of resist ing them. For example, suppose an organization is making progress on moving away from an infrequent and manual deploy process toward a more automated continuous delivery one. The new automated deployment tools are not perfect right from the beginning; as with every piece of software, there are bugs found that have to be worked out. Peo ple who are resistant to these changes may blame these new issues on the new tools, on devops itself, or on the people who are supporting these changes. They might say, Everything was working well enough before or We wouldnt be having these kinds of issues if we had just left things the way they were. They see devops itself as the problem, rather than realizing that every new tool or process will have issues along the way and take time to get used to. Its important that there be top-down support from management for new devops ini tiatives if they are to succeed. If leaders within the organization are able to be swayed by a few very loud complainers, it will be difficult for there to be any lasting change"
Justify with an example how use quantitative measure ments as informative trends to encourage the behaviors you want to see,"Use quantitative measure ments as informative trends to encourage the behaviors you want to see .For example, unless you have the skill to qualitatively exam ine code, dont assume that more is better. Additional terminology related to version control includes: Commit A commit is a collection of actions comprising total number of changes made to files under version control","Some tools lack collaborative features but have been used long enough in your envi ronment that there is a very high level of institutional knowledge around them. In | these cases, identify the impact of not migrating to a different toolfor example, hir ing capability or time spent on merging different branchesand then try to compare that with the impact of losing so much institutional knowledge. With sufficient pro cess, collaboration can still be implemented with less collaborative tools, but it will not be as easy. Lines of code is not an accurate measure of value. There are differ ent types of developers, some that refactor hundreds of confusing lines into tens of lines of simple-to-read abstractions that can be built upon by others in the team. Others focus their attention on finding the bugs hidden within code. Use quantitative measure ments as informative trends to encourage the behaviors you want to see. For example, unless you have the skill to qualitatively exam ine code, dont assume that more is better. Additional terminology related to version control includes: Commit A commit is a collection of actions comprising total number of changes made to files under version control"
Justify with an example how an urgent issue is one that requires a fast (or sometimes immediate) response,"An urgent issue is one that requires a fast (or sometimes immediate) response .For example, your site being completely down such that you are currently losing money or customers is much more urgent than a purely informational blog site being unreachable","When reasoning about alerting, you need to consider several factors: Impact Not all systems have the same impact. Something that is widespread, affecting multiple systems or a large group of customers, has a much higher impact than something that affects only a small subset of systems or people. Some incidents arent customer facing at all, or might affect systems that have enough redun dancy so as to not have much impact that way. To avoid alert fatigue, as we will discuss in more detail later, alerting should be restricted to incidents that have the most impact. Urgency Similar to impact, not all issues are equally urgent. An urgent issue is one that requires a fast (or sometimes immediate) response. For example, your site being completely down such that you are currently losing money or customers is much more urgent than a purely informational blog site being unreachable. Different stakeholders will likely have different opinions about what is urgent, so its important to consider all the stakeholders when configuring your monitoring and alerting. Interested party Primarily, the parties interested in an incident are those affected by it; this could be your customers (or a subset of them) or groups of employees in the case of internal service incidents. Interested parties could also be taken to mean those responsible for responding to an incident. For example, if only DBAs can deal with a particular kind of database issue, it would make sense to alert them, rather than alerting an operations team whose only action would be to call the DBAs"
Justify with an example how consistency can also help you avoid the sorts of logistical nightmares that can crop up without enough process or standardization,"Consistency can also help you avoid the sorts of logistical nightmares that can crop up without enough process or standardization .For example, if each team uses a dif ferent issue tracker or ticketing system, you will have less visibility throughout the organization, more duplication of effort, and a great deal of time spent trying to navi gate and interoperate these various systems. Exceptions to Standardization There are exceptions to standardization","Tools can be used to: Improve communication Set boundaries Repair understanding within the scope of the devops compact Organizations need to standardize tools to balance the challenges and costs of sup porting tools that perform the same function. How do we then balance strengthening the organization through standardization, allowing flexibility at the team level, and empowering the individual to be agile and responsive by choosing her own tools? Consistent Processes for Tool Analysis Standardization of tools bridges old to new as the technologies being used at a com pany change. With consistent processes for evaluating, choosing, and retiring tools, organizations will: decide upon a tool that meets most peoples needs; ensure necessary features that were present in an old tool are also features of the new one; and ensure that employees are properly trained to be able to effectively use a new piece of hardware or software Without consistent processes to build the necessary bridges, employees will be resist ant to new tools or technologies. Consistent selection processes can minimize risk by making sure that both current and new needs will be met, as well as simply providing reassurance for people who are more resistant to changes in their environments. Consistency can also help you avoid the sorts of logistical nightmares that can crop up without enough process or standardization. For example, if each team uses a dif ferent issue tracker or ticketing system, you will have less visibility throughout the organization, more duplication of effort, and a great deal of time spent trying to navi gate and interoperate these various systems. Exceptions to Standardization There are exceptions to standardization. If a team needs some isolation or unique requirements, there isnt a reason to force them to use the same tooling as everyone else"
"Justify with an example how while flexibility is certainly important, in some areas it might make sense to have cer tain tools that are non-negotiable within a team or organization","While flexibility is certainly important, in some areas it might make sense to have cer tain tools that are non-negotiable within a team or organization .For example, if there are certain tools that enable you to maintain SOX, PCI, or some other kind of compli ance, it is reasonable to insist that everyone who works within that scope use those tools","Consider having a structured way in which people can give feedback about tools they work with that tries to identify how frequently they encounter issues and what those specific issues are, and remember that those who complain the loudest arent neces sarily the majority opinion. While flexibility is certainly important, in some areas it might make sense to have cer tain tools that are non-negotiable within a team or organization. For example, if there are certain tools that enable you to maintain SOX, PCI, or some other kind of compli ance, it is reasonable to insist that everyone who works within that scope use those tools. Youll probably want to keep these mandatory tools to a minimum, but there are certainly areas where it makes sense to have them. | Weve Decided to Adopt (or Retire) Technology X, but People Are Resisting Using It (or Giving It Up) How open people are to using a new tool in their work may depend a great deal on the process by which that particular tool was selected. If you have a situation where a top-down decision was made, perhaps by a manager who has much less experience with a given tool or workflow than their individual contributor reports, there might be very valid reasons why people dont want to use the new tool. Research into what problems youre trying to solve and working with people who will be using this tool most frequently as described earlier can go a long way toward avoiding this kind of situation"
Justify with an example how the exact number depends on the team and the type of position a candidate is interviewing for,"The exact number depends on the team and the type of position a candidate is interviewing for .For example, an entry-level developer would be requested to come to only one on-site interview, but the higher level the position a candidate is being considered for, the more interviews they are likely to have. Developing and Growing Team Members Once the interview process has been completed and a hire has been made, every employee is assigned a Career Developer","Because their organization is so large, they have staff recruiters who work full-time in-house to find qualified candidates. This has enabled them to work with the recruit ers very closely, making sure that they are very closely aligned with the team and company visions, and avoiding some of the potential recruiter missteps mentioned previously. If a team lead or hiring manager isnt satisfied with the candidates they are getting from the recruiters, it is their responsibility to work with the specified recruiter to try to resolve those issues. The interview process consists of a phone interview, which usually lasts around 30 minutes and covers a candidates work history, followed by a number of on-site inter views. The exact number depends on the team and the type of position a candidate is interviewing for. For example, an entry-level developer would be requested to come to only one on-site interview, but the higher level the position a candidate is being considered for, the more interviews they are likely to have. Developing and Growing Team Members Once the interview process has been completed and a hire has been made, every employee is assigned a Career Developer. Career Developers act as mentors to the employees assigned to them, which is usually a number around four; the company has found over time that no Career Developer has been very effective with more than seven mentees, as they all have other work assignments and responsibilities as well"
"Justify with an example how when people start to burn out from giving too much of their time or knowledge, they react in dysfunc tional ways that harm relationships","When people start to burn out from giving too much of their time or knowledge, they react in dysfunc tional ways that harm relationships .For example, they may become intolerant or sar castic to customers","New projects or team members and new management require additional communication until sufficient time and energy have been invested. When teams are stretched thin, they can take out their frustration when something isnt working as smoothly as before on whoever and whatever is new. Recognize the pain points of change. Dont blame the new people for not being psychic or treat the new technology as wasted effort. | When a team is tasked with supporting others, they may need additional support in understanding when and how to say not right now. Give people permission to allo cate time to focus on other projects and sufficient recess time. When people start to burn out from giving too much of their time or knowledge, they react in dysfunc tional ways that harm relationships. For example, they may become intolerant or sar castic to customers. When these behaviors arise, the problem is not necessarily with the individual but the system. Effective communication Interdependence within teams can be either helped or hindered by their communica tion strategies. We discussed communication in Part II, which we recommended reviewing with a focus on effective communication. In addition, when considering scaling within your environment, there are additional challenges to consider"
"Justify with an example how additionally, for each role within an organization, work quality can differ in definition","Additionally, for each role within an organization, work quality can differ in definition .For example, for the team writing code, a focus on quality code may drive them to spend more time on a release to the detriment of other teams that also need time","| Defining Quality Its important to define quality explicitly within your team and organization. Being transparent with your customers about how you define quality, and encouraging them to share their under standing of quality, allows for a stronger alignment of product outcomes, operability, performance, and learning. Providing clear quality metrics allows for individuals to hold themselves accounta ble. Additionally, for each role within an organization, work quality can differ in definition. For example, for the team writing code, a focus on quality code may drive them to spend more time on a release to the detriment of other teams that also need time. Coming to a common understanding about quality, and what matters to dif ferent roles, can help reduce unnecessary conflict in approaching problems. First described by W. Edwards Deming in the 1950s, a quality circle refers to a group of people who do the same or similar work, and are most often aligned in terms of what they view as quality work. Its important to get people on the same page in this respect, both to increase cohesion within a team (because team members are most frequently performing the same or similar work) but also because working toward this shared definition of quality work helps minimize misunderstandings, enforcing the devops compact"
"Justify with an example how we have blameless incident retros, embed SREs on development teams, and provide transpar ency whenever possible","We have blameless incident retros, embed SREs on development teams, and provide transpar ency whenever possible .For example, our engineering organization is governed by a processes repo that any engineer can contribute to, and we send out monthly newslet ters with the latest process changes","Of course you should communicate with other teams. Of course incidents should be blameless. Of course you want diverse talent. Of course. Im fortunate to work at a company that has striven to incorporate devops values into everyday engineering processes, without need of buzzwords or kick-offs. We have blameless incident retros, embed SREs on development teams, and provide transpar ency whenever possible. For example, our engineering organization is governed by a processes repo that any engineer can contribute to, and we send out monthly newslet ters with the latest process changes. I feel I can talk to almost any engineer in my company and find a sympathetic ear and willingness to help me with my current project. Because every production engineer ing team is in an on-call rotation, we all speak more or less the same language and support each others ups and downs. In fact, we are growing toward a skill set of blur The Significance of Stories red lines, where software engineers can troubleshoot Linux and SREs write systems tools and web apps"
Justify with an example how stories are a great way of sharing the cultural context around the use of tools within a specific environment,"Luckily, stories are a great way of sharing the cultural context around the use of tools within a specific environment .For example, Netflixs Chaos Monkey explicitly tests failure in production by having an application randomly crash virtual servers","| CHAPTER 17 Bridging Devops Cultures: Learning from Our Stories Stories are a big part of learning, for both the people telling the stories and the people hearing them. You might think of learning as just being about learning how to use a new tool, picking up a new programming language, or improving some other techni cal skill, but the context around how and why various tools and technologies are used can have just as much impact, if not more, as their technical details. Luckily, stories are a great way of sharing the cultural context around the use of tools within a specific environment. For example, Netflixs Chaos Monkey explicitly tests failure in production by having an application randomly crash virtual servers. The stories shared of the Chaos tools in use at Netflix illuminate values of the organiza tion including: practice at resolving failures when engineers are at their best during the day ver sus at 2 am; standard of writing software that degrades rather than fails; and expectation of failure as a mode of software operation. In this chapter, well cover various aspects of this cultural context that demonstrate the values of a team or organization, either implicitly or explicitly. Well then cover ways to encourage learning between teams and even organizations, looking at how to foster this sort of learning in your own environment"
"Justify with an example how not only will people already be familiar with the general workflows of the tools, but it will reduce the fric tion that can come from learning to use a new tool","Not only will people already be familiar with the general workflows of the tools, but it will reduce the fric tion that can come from learning to use a new tool .For example, if your teams are already using GitHubs pull requests for collaborat ing on code, they can use them to collaborate on documents speci fying the teams or organizations values as well. Looking around the industry, it is incredibly gratifying to see that we are starting to talk about sustainable work practices based on not glorifying long work hours, and instead have started sharing coping strategies and encouraging our coworkers to take vacations","Keep information visible and shared Finally, it is important that everyone be able to see the conversations that took place and what decisions were reached, especially around values that impact their daily work. In order for values to be truly shared, they cannot be hidden away or decided behind closed doors and then handed down as edicts. Without visibility, there can be no conversations, and conversations are necessary for shared under standing. In general, try to use the same classes of tools and the same general strategies you use for technical work to do this sort of communitybuilding, soft skills work. Not only will people already be familiar with the general workflows of the tools, but it will reduce the fric tion that can come from learning to use a new tool. For example, if your teams are already using GitHubs pull requests for collaborat ing on code, they can use them to collaborate on documents speci fying the teams or organizations values as well. Looking around the industry, it is incredibly gratifying to see that we are starting to talk about sustainable work practices based on not glorifying long work hours, and instead have started sharing coping strategies and encouraging our coworkers to take vacations. Pretending that stress, overwork, burnout, and other such issues dont exist wont make them go away; all that will do is make people afraid to speak up and reach out for help when they are struggling. When you consider your team and organiza tional values, be sure that you do not forget this human side of things"
"Justify with an example how other agile process models also stress human collaboration and team selforganization, but define their own framework activities and select different points of emphasis","Other agile process models also stress human collaboration and team selforganization, but define their own framework activities and select different points of emphasis .For example, ASD uses an iterative process that incorporates adaptive cycle planning, relatively rigorous requirement gathering methods, and an iterative development cycle that incorporates customer focus groups and formal technical reviews as real-time feedback mechanisms","Extreme programming (XP) is the most widely used agile process. Organized as four framework activitiesplanning, design, coding, and testingXP suggests a number of innovative and powerful techniques that allow an agile team to create frequent software releases that deliver features and functionality that have been described and then prioritized by stakeholders. Other agile process models also stress human collaboration and team selforganization, but define their own framework activities and select different points of emphasis. For example, ASD uses an iterative process that incorporates adaptive cycle planning, relatively rigorous requirement gathering methods, and an iterative development cycle that incorporates customer focus groups and formal technical reviews as real-time feedback mechanisms. Scrum emphasizes the use of a set of software process patterns that have proven effective for projects with tight time lines, changing requirements, and business criticality. Each process pattern defines a set of development tasks and allows the Scrum team to construct a process that is adapted to the needs of the project. The Dynamic Systems Development Method (DSDM) advocates the use of time-box scheduling and suggests that only enough work is required for each software increment to facilitate movement to the next increment. Crystal is a family of agile process models that can be adopted to the specific characteristics of a project. Feature Driven Development (FDD) is somewhat more formal than other agile methods, but still maintains agility by focusing the project team on the development of featuresa client-valued function that can be implemented in two weeks or less"
"Justify with an example how when a problem and its solution are examined from a number of different perspectives, it is more likely that greater insight will be achieved and that errors and omissions will be uncovered","When a problem and its solution are examined from a number of different perspectives, it is more likely that greater insight will be achieved and that errors and omissions will be uncovered .For example, a requirements model can be represented using a dataoriented viewpoint, a function-oriented viewpoint, or a behavioral viewpoint","The goal of patterns within the software community is to create a body of literature to help software developers resolve recurring problems encountered throughout all of software development. Patterns help create a shared language for communicating insight and experience about these problems and their solutions. Formally codifying these solutions and their relationships lets us successfully capture the 11/27/08 Page 101 PRINCIPLES THAT GUIDE PRACTICE body of knowledge which defines our understanding of good architectures that meet the needs of their users. Principle 7. When possible, represent the problem and its solution from a number of different perspectives. When a problem and its solution are examined from a number of different perspectives, it is more likely that greater insight will be achieved and that errors and omissions will be uncovered. For example, a requirements model can be represented using a dataoriented viewpoint, a function-oriented viewpoint, or a behavioral viewpoint (Chapters 6 and 7). Each provides a different view of the problem and its requirements. Principle 8. Remember that someone will maintain the software. Over the long term, software will be corrected as defects are uncovered, adapted as its environment changes, and enhanced as stakeholders request more capabilities. These maintenance activities can be facilitated if solid software engineering practice is applied throughout the software process"
Justify with an example how the essence of the problem is described without any consideration of how a solution will be implemented,"The essence of the problem is described without any consideration of how a solution will be implemented .For example, a video game requires that the player instruct its protagonist on what direction to proceed as she moves into a dangerous maze","Principle 4. The models that depict information, function, and behavior must be partitioned in a manner that uncovers detail in a layered (or hierarchical) fashion. Requirements modeling is the first step in software engineering problem solving. It allows you to better understand the problem and establishes a basis for the solution (design). Complex problems are difficult to solve in their entirety. For this reason, you should use a divide-and-conquer strategy. A large, complex problem is divided into subproblems until each subproblem is relatively easy to understand. This concept is called partitioning or separation of concerns, and it is a key strategy in requirements modeling. Principle 5. The analysis task should move from essential information toward implementation detail. Requirements modeling begins by describing the problem from the end-users perspective. The essence of the problem is described without any consideration of how a solution will be implemented. For example, a video game requires that the player instruct its protagonist on what direction to proceed as she moves into a dangerous maze. That is the essence of the problem. Implementation detail (normally described as part of the design model) indicates how the essence will be implemented. For the video game, voice input might be used. Alternatively, 11/27/08 CHAPTER 4 PRINCIPLES THAT GUIDE PRACTICE a keyboard command might be typed, a joystick (or mouse) might be pointed in a specific direction, or a motion-sensitive device might be waved in the air. By applying these principles, a software engineer approaches a problem systematically. But how are these principles applied in practice? This question will be answered in Chapters 5 through 7"
Justify with an example how each constituency has its own use for the model,"Each constituency has its own use for the model .For example, business stakeholders should use the model to validate requirements; designers should use the model as a basis for design; QA people should use the model to help plan acceptance tests. Keep the model as simple as it can be","uote: Problems worthy of attack, prove their worth by hitting back. Piet Hein Be certain that the requirements model provides value to all stakeholders. Each constituency has its own use for the model. For example, business stakeholders should use the model to validate requirements; designers should use the model as a basis for design; QA people should use the model to help plan acceptance tests. Keep the model as simple as it can be. Dont create additional diagrams when they add no new information. Dont use complex notational forms, when a simple list will do"
"Justify with an example how in general, a class should never have an imperative procedural name","In general, a class should never have an imperative procedural name .For example, if the developers of software for a medical imaging system defined an object with the name InvertImage or even ImageInversion, they would be making a subtle mistake","This categorization is but one of many that have been proposed in the literature.15 For example, Budd [Bud96] suggests a taxonomy of classes that includes producers (sources) and consumers (sinks) of data, data managers, view or observer classes, and helper classes. It is also important to note what classes or objects are not. In general, a class should never have an imperative procedural name [Cas89]. For example, if the developers of software for a medical imaging system defined an object with the name InvertImage or even ImageInversion, they would be making a subtle mistake. The Image obtained from the software could, of course, be a class (it is a thing that is part of the information domain). Inversion of the image is an operation that is applied to the object. It is likely that inversion would be defined as an operation for the object Image, but it would not be defined as a separate class to connote image inversion. As Cashman [Cas89] states: the intent of object-orientation is to encapsulate, but still keep separate, data and operations on the data. To illustrate how analysis classes might be defined during the early stages of modeling, consider a grammatical parse (nouns are underlined, verbs italicized) for a processing narrative16 for the SafeHome security function"
"Justify with an example how upon further investigation, it is likely that the operation program() will be divided into a number of more specific suboperations required to configure the system","Upon further investigation, it is likely that the operation program() will be divided into a number of more specific suboperations required to configure the system .For example, program() implies specifying phone numbers, configuring system characteristics (e.g., creating the sensor table, entering alarm characteristics), and entering password(s)","That arm() and disarm() are operations that apply to System class. Upon further investigation, it is likely that the operation program() will be divided into a number of more specific suboperations required to configure the system. For example, program() implies specifying phone numbers, configuring system characteristics (e.g., creating the sensor table, entering alarm characteristics), and entering password(s). But for now, we specify program() as a single operation. In addition to the grammatical parse, you can gain additional insight into other operations by considering the communication that occurs between objects. Objects communicate by passing messages to one another. Before continuing with the specification of operations, I explore this matter in a bit more detail"
Justify with an example how boundary classes are designed with the responsibility of managing the way entity objects are represented to users,"Boundary classes are designed with the responsibility of managing the way entity objects are represented to users .For example, a boundary class called CameraWindow would have the responsibility of displaying surveillance camera output for the SafeHome system. Controller classes manage a unit of work [UML03] from start to finish","Boundary classes are used to create the interface (e.g., interactive screen or printed reports) that the user sees and interacts with as the software is used. Entity objects contain information that is important to users, but they do not display themselves. Boundary classes are designed with the responsibility of managing the way entity objects are represented to users. For example, a boundary class called CameraWindow would have the responsibility of displaying surveillance camera output for the SafeHome system. Controller classes manage a unit of work [UML03] from start to finish. That is, controller classes can be designed to manage (1) the creation or update of entity objects, (2) the instantiation of boundary objects as they obtain information from entity objects, (3) complex communication between sets of objects, (4) validation of data communicated between objects or between the user and the application. In general, controller classes are not considered until the design activity has begun"
Justify with an example how the responsibilities for each class should exhibit the same level of abstraction,"the responsibilities for each class should exhibit the same level of abstraction .For example, among the operations listed for an aggregate class called CheckingAccount a reviewer notes two responsibilities: balance-the-account and check-off-clearedchecks","If system intelligence is more evenly distributed across the classes in an application, each object knows about and does only a few things (that are generally well focused), the cohesiveness of the system is improved.17 This enhances the maintainability of the software and reduces the impact of side effects due to change. To determine whether system intelligence is properly distributed, the responsibilities noted on each CRC model index card should be evaluated to determine if any class has an extraordinarily long list of responsibilities. This indicates a concentration of intelligence.18 In addition, the responsibilities for each class should exhibit the same level of abstraction. For example, among the operations listed for an aggregate class called CheckingAccount a reviewer notes two responsibilities: balance-the-account and check-off-clearedchecks. The first operation (responsibility) implies a complex mathematical and logical procedure. The second is a simple clerical activity. Since these two operations are not at the same level of abstraction, check-off-clearedchecks should be placed within the responsibilities of CheckEntry, a class that is encompassed by the aggregate class CheckingAccount. 2. Each responsibility should be stated as generally as possible. This guideline implies that general responsibilities (both attributes and operations) should reside high in the class hierarchy (because they are generic, they will apply to all subclasses)"
Justify with an example how the labeled arrows represent data objects or data object hierarchies,"The labeled arrows represent data objects or data object hierarchies .For example, user commands and data encompasses all configuration commands, all activation/deactivation commands, all miscellaneous interactions, and all data that are entered to qualify or expand a command","This means that input and output at one level must be the same as input and output at a refined level. To illustrate the use of the DFD and related notation, we again consider the SafeHome security function. A level 0 DFD for the security function is shown in system and consume information generated by the system. The labeled arrows represent data objects or data object hierarchies. For example, user commands and data encompasses all configuration commands, all activation/deactivation commands, all miscellaneous interactions, and all data that are entered to qualify or expand a command. The level 0 DFD must now be expanded into a level 1 data flow model. But how do we proceed? Following an approach suggested in Chapter 6, you should apply a That is, the data objects that flow into the system or into any transformation at one level must be the same data objects (or their constituent parts) that flow into the transformation at a more refined level"
"Justify with an example how it is important to note that some events have an explicit impact on the flow of control of the use case, while others have no direct impact on the flow of control","It is important to note that some events have an explicit impact on the flow of control of the use case, while others have no direct impact on the flow of control .For example, the event password entered does not explicitly change the flow of control of the use case, but the results of the event password compared (derived from the interaction password is compared with the valid password stored in the system) will have an explicit impact on the information and control flow of the SafeHome software","As an example of a typical event, consider the underlined use case phrase homeowner uses the keypad to key in a four-digit password. In the context of the requirements model, the object, Homeowner,7 transmits an event to the object ControlPanel. The event might be called password entered. The information In this example, we assume that each user (homeowner) that interacts with SafeHome has an identifying password and is therefore a legitimate object. 11/27/08 3:36 PM Page 196 transferred is the four digits that constitute the password, but this is not an essential part of the behavioral model. It is important to note that some events have an explicit impact on the flow of control of the use case, while others have no direct impact on the flow of control. For example, the event password entered does not explicitly change the flow of control of the use case, but the results of the event password compared (derived from the interaction password is compared with the valid password stored in the system) will have an explicit impact on the information and control flow of the SafeHome software. Once all events have been identified, they are allocated to the objects involved"
Justify with an example how a passive state is simply the current status of all of an objects attributes,"A passive state is simply the current status of all of an objects attributes .For example, The system has states that represent specific externally observable behavior; a class has states that represent its behavior as the system performs its functions. the passive state of the class Player (in the video game application discussed in well as other features of Player that are relevant to the game (e.g., an attribute that indicates magic wishes remaining)","Objects can be responsible for generating events (e.g., Homeowner generates the password entered event) or recognizing events that have occurred elsewhere (e.g., ControlPanel recognizes the binary result of the password compared event). 7.3.2 State Representations In the context of behavioral modeling, two different characterizations of states must be considered: (1) the state of each class as the system performs its function and (2) the state of the system as observed from the outside as the system performs its function.8 The state of a class takes on both passive and active characteristics [Cha93]. A passive state is simply the current status of all of an objects attributes. For example, The system has states that represent specific externally observable behavior; a class has states that represent its behavior as the system performs its functions. the passive state of the class Player (in the video game application discussed in well as other features of Player that are relevant to the game (e.g., an attribute that indicates magic wishes remaining). The active state of an object indicates the current status of the object as it undergoes a continuing transformation or processing. The class Player might have the following active states: moving, at rest, injured, being cured; trapped, lost, and so forth. An event (sometimes called a trigger) must occur to force an object to make a transition from one active state to another"
"Justify with an example how class attributes can only be accessed through messages, and the class decides whether or not to accept the message","Class attributes can only be accessed through messages, and the class decides whether or not to accept the message .For example, if a value of an actuator is set above a maximum value, then the actuator class may not accept the message, or it might use a default maximum value. 3","Consequences 1. Sensor and actuator classes have a common interface. 2. Class attributes can only be accessed through messages, and the class decides whether or not to accept the message. For example, if a value of an actuator is set above a maximum value, then the actuator class may not accept the message, or it might use a default maximum value. 3. The complexity of the system is potentially reduced because of the uniformity of interfaces for actuators and sensors"
Justify with an example how content objects can be determined directly from use cases by examining the scenario description for direct and indirect references to content,"Content objects can be determined directly from use cases by examining the scenario description for direct and indirect references to content .For example, a WebApp that supports SafeHome is established at SafeHomeAssured.com","7.5.4 Content Model for WebApps The content model contains structural elements that provide an important view of content requirements for a WebApp. These structural elements encompass content objects and all analysis classesuser-visible entities that are created or manipulated as a user interacts with the WebApp.15 Content can be developed prior to the implementation of the WebApp, while the WebApp is being built, or long after the WebApp is operational. In every case, it is pre75977_ch07.qxd 11/27/08 PART TWO MODELING incorporated via navigational reference into the overall WebApp structure. A content object might be a textual description of a product, an article describing a news event, an action photograph taken at a sporting event, a users response on a discussion forum, an animated representation of a corporate logo, a short video of a speech, or an audio overlay for a collection of presentation slides. The content objects might be stored as separate files, embedded directly into Web pages, or obtained dynamically from a database. In other words, a content object is any item of cohesive information that is to be presented to an end user. Content objects can be determined directly from use cases by examining the scenario description for direct and indirect references to content. For example, a WebApp that supports SafeHome is established at SafeHomeAssured.com. A use case, Purchasing Select SafeHome Components, describes the scenario required to purchase a SafeHome component and contains the sentence: I will be able to get descriptive and pricing information for each product component. The content model must be capable of describing the content object Component"
Justify with an example how the prototype should implement the major navigational links and represent the overall screen layout in much the same way that it will be constructed,"The prototype should implement the major navigational links and represent the overall screen layout in much the same way that it will be constructed .For example, if five major system functions are to be provided to the end user, the prototype should represent them as the user will see them upon first entering the WebApp","Because WebApp construction tools are plentiful, relatively inexpensive, and functionally powerful, it is best to create the interface prototype using such tools. The prototype should implement the major navigational links and represent the overall screen layout in much the same way that it will be constructed. For example, if five major system functions are to be provided to the end user, the prototype should represent them as the user will see them upon first entering the WebApp. Will graphical links be provided? Where will the navigation menu be displayed? What other information will the user see? Questions like these should be answered by the prototype"
Justify with an example how user-observable functionality encompasses any processing functions that are initiated directly by the user,"User-observable functionality encompasses any processing functions that are initiated directly by the user .For example, a financial WebApp might implement a variety of financial functions (e.g., a college tuition savings calculator or a retirement savings calculator)","The functional model addresses two processing elements of the WebApp, each representing a different level of procedural abstraction: (1) user-observable functionality that is delivered by the WebApp to end users, and (2) the operations contained within analysis classes that implement behaviors associated with the class. User-observable functionality encompasses any processing functions that are initiated directly by the user. For example, a financial WebApp might implement a variety of financial functions (e.g., a college tuition savings calculator or a retirement savings calculator). These functions may actually be implemented using operations within analysis classes, but from the point of view of the end user, the function (more correctly, the data provided by the function) is the visible outcome. At a lower level of procedural abstraction, the requirements model describes the processing to be performed by analysis class operations. These operations manipulate class attributes and are involved as classes collaborate with one another to accomplish some required behavior"
"Justify with an example how used design elements, inefficient or unnecessary algorithms, poorly constructed or inappropriate data structures, or any other design failure that can be corrected to yield a better design","used design elements, inefficient or unnecessary algorithms, poorly constructed or inappropriate data structures, or any other design failure that can be corrected to yield a better design .For example, a first design iteration might yield a component that exhibits low cohesion (i.e., it performs three functions that have only limited relationship to one another)","When software is refactored, the existing design is examined for redundancy, un- WebRef A variety of refactoring patterns can be found at http://c2.com/cgi/ wiki?Refactoring Patterns. used design elements, inefficient or unnecessary algorithms, poorly constructed or inappropriate data structures, or any other design failure that can be corrected to yield a better design. For example, a first design iteration might yield a component that exhibits low cohesion (i.e., it performs three functions that have only limited relationship to one another). After careful consideration, you may decide that the component should be refactored into three separate components, each exhibiting high cohesion. S AFE H OME Design Concepts The scene: Vinods cubicle, as design modeling begins"
"Justify with an example how once the service has been implemented with a method, the class should not provide another way to accomplish the same thing","Once the service has been implemented with a method, the class should not provide another way to accomplish the same thing .For example, the class VideoClip for video-editing software might have attributes start-point and end-point to indicate the start and end points of the clip (note that the raw video loaded into the system may be longer than the clip that is used)","For example, the class Scene defined for video-editing software is complete only if it contains all attributes and methods that can reasonably be associated with the creation of a video scene. Sufficiency ensures that the design class contains only those methods that are sufficient to achieve the intent of the class, no more and no less. Primitiveness. Methods associated with a design class should be focused on accomplishing one service for the class. Once the service has been implemented with a method, the class should not provide another way to accomplish the same thing. For example, the class VideoClip for video-editing software might have attributes start-point and end-point to indicate the start and end points of the clip (note that the raw video loaded into the system may be longer than the clip that is used). The methods, setStartPoint() and setEndPoint(), provide the only means for establishing start and end points for the clip. High cohesion. A cohesive design class has a small, focused set of responsibilities and single-mindedly applies attributes and methods to implement those responsibilities. For example, the class VideoClip might contain a set of methods for editing the video clip. As long as each method focuses solely on attributes associated with the video clip, cohesion is maintained"
"Justify with an example how a cohesive design class has a small, focused set of responsibilities and single-mindedly applies attributes and methods to implement those responsibilities","A cohesive design class has a small, focused set of responsibilities and single-mindedly applies attributes and methods to implement those responsibilities .For example, the class VideoClip might contain a set of methods for editing the video clip","Primitiveness. Methods associated with a design class should be focused on accomplishing one service for the class. Once the service has been implemented with a method, the class should not provide another way to accomplish the same thing. For example, the class VideoClip for video-editing software might have attributes start-point and end-point to indicate the start and end points of the clip (note that the raw video loaded into the system may be longer than the clip that is used). The methods, setStartPoint() and setEndPoint(), provide the only means for establishing start and end points for the clip. High cohesion. A cohesive design class has a small, focused set of responsibilities and single-mindedly applies attributes and methods to implement those responsibilities. For example, the class VideoClip might contain a set of methods for editing the video clip. As long as each method focuses solely on attributes associated with the video clip, cohesion is maintained. Low coupling. Within the design model, it is necessary for design classes to collaborate with one another. However, collaboration should be kept to an acceptable minimum. If a design model is highly coupled (all design classes collaborate with all other design classes), the system is difficult to implement, to test, and to maintain over time. In general, design classes within a subsystem should have only limited knowledge of other classes. This restriction, called the Law of Demeter [Lie03], suggests that a method should only send messages to methods in neighboring classes.6 A less formal way of stating the Law of Demeter is Each unit should only talk to its friends; Dont talk to strangers"
Justify with an example how this implies that an architectural description is actually a set of work products that reflect different views of the system,"This implies that an architectural description is actually a set of work products that reflect different views of the system .For example, the architect of a major office building must work with a variety of different stakeholders","9.1.3 Architectural Descriptions Each of us has a mental image of what the word architecture means. In reality, however, it means different things to different people. The implication is that different stakeholders will see an architecture from different viewpoints that are driven by different sets of concerns. This implies that an architectural description is actually a set of work products that reflect different views of the system. For example, the architect of a major office building must work with a variety of different stakeholders. The primary concern of the owner of the building (one stakeholder) is to ensure that it is aesthetically pleasing and that it provides sufficient office space and infrastructure to ensure its profitability. Therefore, the architect must develop a description using views of the building that address the owners concerns. Your effort should focus on architectural representations that will guide all other aspects of design"
"Justify with an example how in many cases, more than one pattern might be appropriate and alternative architectural styles can be designed and evaluated","In many cases, more than one pattern might be appropriate and alternative architectural styles can be designed and evaluated .For example, a layered style (appropriate for most systems) can be combined with a data-centered architecture in many database applications. uote: Maybe its in the basement","11/27/08 CHAPTER 9 FIGURE 9.4 Layered architecture User interface layer Application layer Utility layer Core layer Layered architectures. The basic structure of a layered architecture is illustrated in Figure 9.4. A number of different layers are defined, each accomplishing operations that progressively become closer to the machine instruction set. At the outer layer, components service user interface operations. At the inner layer, components perform operating system interfacing. Intermediate layers provide utility services and application software functions. These architectural styles are only a small subset of those available.2 Once requirements engineering uncovers the characteristics and constraints of the system to be built, the architectural style and/or combination of patterns that best fits those characteristics and constraints can be chosen. In many cases, more than one pattern might be appropriate and alternative architectural styles can be designed and evaluated. For example, a layered style (appropriate for most systems) can be combined with a data-centered architecture in many database applications. uote: Maybe its in the basement. Let me go upstairs and check"
Justify with an example how the requirements model defines a context in which this question must be answered,"The requirements model defines a context in which this question must be answered .For example, an e-commerce business that sells golf equipment to consumers will operate in a different context than an e-commerce business that sells high-priced industrial equipment to medium and large corporations","Ed: Good. Im on it. The requirements model also defines a context in which this question must be answered. For example, an e-commerce business that sells golf equipment to consumers will operate in a different context than an e-commerce business that sells high-priced industrial equipment to medium and large corporations. In addition, a set of limitations and constraints may affect the way in which you address the problem to be solved. Architectural patterns address an application-specific problem within a specific context and under a set of limitations and constraints. The pattern proposes an architectural solution that can serve as the basis for architectural design"
Justify with an example how the call and return architecture can reside within other more sophisticated architectures discussed earlier in this chapter,"The call and return architecture can reside within other more sophisticated architectures discussed earlier in this chapter .For example, the architecture of one or more components of a client-server architecture might be call and return","11/27/08 CHAPTER 9 ARCHITECTURAL DESIGN 9.6 A R C H I T E C T U R A L M A P P I N G U S I N G D ATA F L O W The architectural styles discussed in Section 9.3.1 represent radically different architectures. So it should come as no surprise that a comprehensive mapping that accomplishes the transition from the requirements model to a variety of architectural styles does not exist. In fact, there is no practical mapping for some architectural styles, and the designer must approach the translation of requirements to design for these styles in using the techniques discussed in Section 9.4. To illustrate one approach to architectural mapping, consider the call and return architecturean extremely common structure for many types of systems. The call and return architecture can reside within other more sophisticated architectures discussed earlier in this chapter. For example, the architecture of one or more components of a client-server architecture might be call and return. A mapping technique, called structured design [You79], is often characterized as a data flow-oriented design method because it provides a convenient transition from a data flow diagram (Chapter 7) to software architecture.7 The transition from information flow (represented as a DFD) to program structure is accomplished as part of a sixstep process: (1) the type of information flow is established, (2) flow boundaries are indicated, (3) the DFD is mapped into the program structure, (4) control hierarchy is defined, (5) the resultant structure is refined using design measures and heuristics, and (6) the architectural description is refined and elaborated"
Justify with an example how architectural component names should be drawn from the problem domain and should have meaning to all stakeholders who view the architectural model,"Architectural component names should be drawn from the problem domain and should have meaning to all stakeholders who view the architectural model .For example, the class name FloorPlan is meaningful to everyone reading it regardless of technical background","The Common Reuse Principle (CRP). Classes that arent reused together should not be grouped together [Mar00]. When one or more classes within a package changes, the release number of the package changes. All other classes or packages that rely on the package that has been changed must now update to the most recent release of the package and be tested to ensure that the new release operates without incident. If classes are not grouped cohesively, it is possible that a class with no relationship to other classes within a package is changed. This will precipitate unnecessary integration and testing. For this reason, only classes that are reused together should be included within a package. 10.2.2 Component-Level Design Guidelines In addition to the principles discussed in Section 10.2.1, a set of pragmatic design guidelines can be applied as component-level design proceeds. These guidelines apply to components, their interfaces, and the dependencies and inheritance 11/27/08 3:46 PM Page 286 characteristics that have an impact on the resultant design. Ambler [Amb02b] suggests the following guidelines: should ? What we consider when we name components? Naming conventions should be established for components that are specified as part of the architectural model and then refined and elaborated as part of the component-level model. Architectural component names should be drawn from the problem domain and should have meaning to all stakeholders who view the architectural model. For example, the class name FloorPlan is meaningful to everyone reading it regardless of technical background. On the other hand, infrastructure components or elaborated component-level classes should be named to reflect implementation-specific meaning. If a linked list is to be managed as part of the FloorPlan implementation, the operation manageList() is appropriate, even if a nontechnical person might misinterpret it.3 You can choose to use stereotypes to help identify the nature of components at the detailed design level. For example, <<infrastructure>> might be used to identify an infrastructure component, <<database>> could be used to identify a database that services one or more design classes or the entire system; <<table>> can be used to identify a table within a database. Interfaces. Interfaces provide important information about communication and collaboration (as well as helping us to achieve the OCP). However, unfettered representation of interfaces tends to complicate component diagrams. Ambler [Amb02c] recommends that (1) lollipop representation of an interface should be used in lieu of the more formal UML box and dashed arrow approach, when diagrams grow complex; (2) for consistency, interfaces should flow from the left-hand side of the component box; (3) only those interfaces that are relevant to the component under consideration should be shown, even if other interfaces are available. These recommendations are intended to simplify the visual nature of UML component diagrams"
"Justify with an example how however, as design elaboration proceeds, each attribute is defined using the UML attribute format noted","However, as design elaboration proceeds, each attribute is defined using the UML attribute format noted .For example, paperTypeweight is defined in the following manner: paperType-weight: string  A { contains 1 of 4 values - A, B, C, or D} which defines paperType-weight as a string variable initialized to the value A that can take on one of four values from the set {A,B,C, D}","Step 3c. Elaborate attributes and define data types and data structures required to implement them. In general, data structures and types used to define attributes are defined within the context of the programming language that is to be Refactoring interfaces and class definitions for PrintJob computeJob initiateJob WorkOrder getJobDescription appropriate attributes <<interface>> initiateJob buildWorkOrder ( ) ProductionJob JobQueue appropriate attributes checkPriority ( ) passJobToProduction( ) 11/27/08 Page 293 used for implementation. UML defines an attributes data type using the following syntax: name : type-expression  initial-value {property string} where name is the attribute name, type expression is the data type, initial value is the value that the attribute takes when an object is created, and property-string defines a property or characteristic of the attribute. During the first component-level design iteration, attributes are normally described by name. Referring once again to Figure 10.1, the attribute list for PrintJob lists only the names of the attributes. However, as design elaboration proceeds, each attribute is defined using the UML attribute format noted. For example, paperTypeweight is defined in the following manner: paperType-weight: string  A { contains 1 of 4 values - A, B, C, or D} which defines paperType-weight as a string variable initialized to the value A that can take on one of four values from the set {A,B,C, D}. If an attribute appears repeatedly across a number of design classes, and it has a relatively complex structure, it is best to create a separate class to accommodate the attribute"
Justify with an example how it is important to note that the behavioral model often contains information that is not immediately obvious in other design models,"It is important to note that the behavioral model often contains information that is not immediately obvious in other design models .For example, careful examination of the statechart in Figure 10.9 indicates that the dynamic behavior of the PrintJob class is contingent upon two customer approvals as costs and schedule data for the print job are derived","Referring to Figure 10.9, each state may define entry/ and exit/ actions that occur as transition into the state occurs and as transition out of the state occurs, respectively. In most cases, these actions correspond to operations that are relevant to the class that is being modeled. The do/ indicator provides a mechanism for indicating activities that 3:47 PM Page 296 occur while in the state, and the include/ indicator provides a means for elaborating the behavior by embedding more statechart detail within the definition of a state. It is important to note that the behavioral model often contains information that is not immediately obvious in other design models. For example, careful examination of the statechart in Figure 10.9 indicates that the dynamic behavior of the PrintJob class is contingent upon two customer approvals as costs and schedule data for the print job are derived. Without approvals (the guard condition ensures that the customer is authorized to approve) the print job cannot be submitted because there is no way to reach the submittingJob state. Step 6. Elaborate deployment diagrams to provide additional implementation detail"
Justify with an example how a functional architecture is a representation of the functional domain of the WebApp and describes the key functional components in the WebApp and how these components interact with each other,"A functional architecture is a representation of the functional domain of the WebApp and describes the key functional components in the WebApp and how these components interact with each other .For example, the pan and zoom functions for the SafeHomeAssured.com video surveillance capability are implemented as part of a CameraControl component","During architectural design, WebApp content and functionality are combined to create a functional architecture. A functional architecture is a representation of the functional domain of the WebApp and describes the key functional components in the WebApp and how these components interact with each other. For example, the pan and zoom functions for the SafeHomeAssured.com video surveillance capability are implemented as part of a CameraControl component. Alternatively, pan and zoom can be implemented as the operations, pan() and zoom(), which are part of a Camera class. In either case, the functionality implied by pan and zoom must be implemented as modules within SafeHomeAssured.com"
Justify with an example how an interaction mode is the current state of the interface,"An interaction mode is the current state of the interface .For example, if spell check is selected in a word-processor menu, the software 11/27/08 3:55 PM Page 314 moves to a spell-checking mode","There was absolutely nothing wrong with the users request. She wanted a system that reacted to her needs and helped her get things done. She wanted to control the computer, not have the computer control her. Most interface constraints and restrictions that are imposed by a designer are intended to simplify the mode of interaction. But for whom? As a designer, you may be tempted to introduce constraints and limitations to simplify the implementation of the interface. The result may be an interface that is easy to build, but frustrating to use. Mandel [Man97] defines a number of design principles that allow the user to maintain control: Define interaction modes in a way that does not force a user into unnecessary or undesired actions. An interaction mode is the current state of the interface. For example, if spell check is selected in a word-processor menu, the software 11/27/08 3:55 PM Page 314 moves to a spell-checking mode. There is no reason to force the user to remain in spell-checking mode if the user desires to make a small text edit along the way. The user should be able to enter and exit the mode with little or no effort. Provide for flexible interaction. Because different users have different interaction preferences, choices should be provided. For example, software might allow a user to interact via keyboard commands, mouse movement, a digitizer pen, a multitouch screen, or voice recognition commands. But every action is not amenable to every interaction mechanism. Consider, for example, the difficulty of using keyboard command (or voice input) to draw a complex shape"
"Justify with an example how because different users have different interaction preferences, choices should be provided","Because different users have different interaction preferences, choices should be provided .For example, software might allow a user to interact via keyboard commands, mouse movement, a digitizer pen, a multitouch screen, or voice recognition commands","Most interface constraints and restrictions that are imposed by a designer are intended to simplify the mode of interaction. But for whom? As a designer, you may be tempted to introduce constraints and limitations to simplify the implementation of the interface. The result may be an interface that is easy to build, but frustrating to use. Mandel [Man97] defines a number of design principles that allow the user to maintain control: Define interaction modes in a way that does not force a user into unnecessary or undesired actions. An interaction mode is the current state of the interface. For example, if spell check is selected in a word-processor menu, the software 11/27/08 3:55 PM Page 314 moves to a spell-checking mode. There is no reason to force the user to remain in spell-checking mode if the user desires to make a small text edit along the way. The user should be able to enter and exit the mode with little or no effort. Provide for flexible interaction. Because different users have different interaction preferences, choices should be provided. For example, software might allow a user to interact via keyboard commands, mouse movement, a digitizer pen, a multitouch screen, or voice recognition commands. But every action is not amenable to every interaction mechanism. Consider, for example, the difficulty of using keyboard command (or voice input) to draw a complex shape. Allow user interaction to be interruptible and undoable"
Justify with an example how the visual layout of the interface should be based on a real-world metaphor,"The visual layout of the interface should be based on a real-world metaphor .For example, a bill payment system should use a checkbook and check register metaphor to guide the user through the bill paying process","Define shortcuts that are intuitive. When mnemonics are used to accomplish a system function (e.g., alt-P to invoke the print function), the mnemonic should be tied to the action in a way that is easy to remember (e.g., first letter of the task to be invoked). The visual layout of the interface should be based on a real-world metaphor. For example, a bill payment system should use a checkbook and check register metaphor to guide the user through the bill paying process. This enables the user to rely on well-understood visual cues, rather than memorizing an arcane interaction sequence. Disclose information in a progressive fashion"
Justify with an example how the users mental model (system perception) is the image of the system that end users carry in their heads,"The users mental model (system perception) is the image of the system that end users carry in their heads .For example, if the user of a particular word processor The users mental model shapes how the user perceives the interface and whether the UI meets the users needs. were asked to describe its operation, the system perception would guide the response","Knowledgeable, frequent users. Good semantic and syntactic knowledge that often leads to the power-user syndrome; that is, individuals who look for shortcuts and abbreviated modes of interaction. The users mental model (system perception) is the image of the system that end users carry in their heads. For example, if the user of a particular word processor The users mental model shapes how the user perceives the interface and whether the UI meets the users needs. were asked to describe its operation, the system perception would guide the response. The accuracy of the description will depend upon the users profile (e.g., novices would provide a sketchy response at best) and overall familiarity with software in the application domain. A user who understands word processors fully but has worked with the specific word processor only once might actually be able to provide a more complete description of its function than the novice who has spent weeks trying to learn the system"
Justify with an example how other features of the system that would please the interior designer might also be conceived,"In addition, other features of the system that would please the interior designer might also be conceived .For example, a digital photo could be taken looking out each window in a room","Use cases. In earlier chapters you learned that the use case describes the manner in which an actor (in the context of user interface design, an actor is always a person) interacts with a system. When used as part of task analysis, the use case is developed to show how an end user performs some specific work-related task. In most instances, the use case is written in an informal style (a simple paragraph) in the first-person. For example, assume that a small software company wants to build a computer-aided design system explicitly for interior designers. To get a better understanding of how they do their work, actual interior designers are asked to describe a specific design function. When asked: How do you decide where to put furniture in a room? an interior designer writes the following informal use case: I begin by sketching the floor plan of the room, the dimensions and the location of windows and doors. Im very concerned about light as it enters the room, about the view out of the windows (if its beautiful, I want to draw attention to it), about the running length of an unobstructed wall, about the flow of movement through the room. I then look at the list of furniture my customer and I have chosentables, chairs, sofa, cabinets, the list of 11/27/08 Page 323 accentslamps, rugs, paintings, sculpture, plants, smaller pieces, and my notes on any desires my customer has for placement. I then draw each item from my lists using a template that is scaled to the floor plan. I label each item I draw and use pencil because I always move things. I consider a number of alternative placements and decide on the one I like best. Then, I draw a rendering (a 3-D picture) of the room to give my customer a feel for what itll look like. This use case provides a basic description of one important work task for the computer-aided design system. From it, you can extract tasks, objects, and the overall flow of the interaction. In addition, other features of the system that would please the interior designer might also be conceived. For example, a digital photo could be taken looking out each window in a room. When the room is rendered, the actual outside view could be represented through each window. S AFE H OME Use Cases for UI Design The scene: Vinods cubicle, as user interface design continues"
Justify with an example how each of these major tasks can be elaborated into subtasks,"other features of the system that would please the interior designer might also be conceived .For example, a digital photo could be taken looking out each window in a room","computer-based system is often used to replace a manual or semimanual activity. To understand the tasks that must be performed to accomplish the goal of the activity, you must understand the tasks that people currently perform (when using a manual approach) and then map these into a similar (but not necessarily identical) set of tasks that are implemented in the context of the user interface. Alternatively, you can study an existing specification for a computer-based solution and derive a set of user tasks that will accommodate the user model, the design model, and the system perception. Regardless of the overall approach to task analysis, you must first define and classify tasks. I have already noted that one approach is stepwise elaboration. For example, lets reconsider the computer-aided design system for interior designers discussed earlier. By observing an interior designer at work, you notice that interior design comprises a number of major activities: furniture layout (note the use case discussed earlier), fabric and material selection, wall and window coverings selection, presentation (to the customer), costing, and shopping. Each of these major tasks can be elaborated into subtasks. For example, using information contained in the use case, furniture layout can be refined into the following tasks: (1) draw a floor plan based on room dimensions, (2) place windows and doors at appropriate locations, (3a) use furniture templates to draw scaled furniture outlines on the floor plan, (3b) use accents templates to draw scaled accents on the floor plan, (4) move furniture outlines and accent outlines to get the best placement, (5) label all furniture and accent outlines, (6) draw dimensions to show location, and (7) draw a perspective-rendering view for the customer. A similar approach could be used for each of the other major tasks. Subtasks 1 to 7 can each be refined further. Subtasks 1 to 6 will be performed by manipulating information and performing actions within the user interface. On the other hand, subtask 7 can be performed automatically in software and will result in little direct user interaction.4 The design model of the interface should accommodate each of these tasks in a way that is consistent with the user model (the profile of a typical interior designer) and system perception (what the interior designer expects from an automated system)"
Justify with an example how an application object represents application-specific data that are not directly manipulated as part of screen interaction,"An application object represents application-specific data that are not directly manipulated as part of screen interaction .For example, a mailing list is used to store names for a mailing","Nouns (objects) and verbs (actions) are isolated to create a list of objects and actions. Once the objects and actions have been defined and elaborated iteratively, they are categorized by type. Target, source, and application objects are identified. A source object (e.g., a report icon) is dragged and dropped onto a target object (e.g., a printer icon). The implication of this action is to create a hard-copy report. An application object represents application-specific data that are not directly manipulated as part of screen interaction. For example, a mailing list is used to store names for a mailing. The list itself might be sorted, merged, or purged (menu-based actions), but it is not dragged and dropped via user interaction. When you are satisfied that all important objects and actions have been defined (for one design iteration), screen layout is performed. Like other interface design activities, screen layout is an interactive process in which graphical design and placement of icons, definition of descriptive screen text, specification and titling for windows, and definition of major and minor menu items are conducted. If a real-world metaphor is appropriate for the application, it is specified at this time, and the layout is organized in a manner that complements the metaphor"
"Justify with an example how low variability enables the user to establish an interaction rhythm, even if response time is relatively long","Low variability enables the user to establish an interaction rhythm, even if response time is relatively long .For example, a 1-second response to a command will often be preferable to a response that varies from 0.1 to 2.5 seconds","System response time has two important characteristics: length and variability. If system response is too long, user frustration and stress are inevitable. Variability refers to the deviation from average response time, and in many ways, it is the most important response time characteristic. Low variability enables the user to establish an interaction rhythm, even if response time is relatively long. For example, a 1-second response to a command will often be preferable to a response that varies from 0.1 to 2.5 seconds. When variability is significant, the user is always off balance, always wondering whether something different has occurred behind the scenes. Help facilities"
"Justify with an example how shape, layout) should be consistent throughout the WebApp","shape, layout) should be consistent throughout the WebApp .For example, if underlined blue text implies a navigation link, content should never incorporate blue underlined text that does not imply a link","Consistency. shape, layout) should be consistent throughout the WebApp. For example, if underlined blue text implies a navigation link, content should never incorporate blue underlined text that does not imply a link. In addition, an object, say a yellow triangle, used to Tognozzis original principles have been adapted and extended for use this book. See [Tog01] for further discussion of these principles. 11/27/08 Page 337 USER INTERFACE DESIGN indicate a caution message before the user invokes a particular function or action, should not be used for other purposes elsewhere in the WebApp. Finally, every feature of the interface should respond in a manner that is consistent with user expectations.10 Controlled autonomy"
"Justify with an example how the WebApp, but it should do so in a manner that enforces navigation conventions that have been established for the application","the WebApp, but it should do so in a manner that enforces navigation conventions that have been established for the application .For example, navigation to secure portions of the WebApp should be controlled by userID and password, and there should be no navigation mechanism that enables a user to circumvent these controls","11/27/08 Page 337 USER INTERFACE DESIGN indicate a caution message before the user invokes a particular function or action, should not be used for other purposes elsewhere in the WebApp. Finally, every feature of the interface should respond in a manner that is consistent with user expectations.10 Controlled autonomy. the WebApp, but it should do so in a manner that enforces navigation conventions that have been established for the application. For example, navigation to secure portions of the WebApp should be controlled by userID and password, and there should be no navigation mechanism that enables a user to circumvent these controls. Efficiency"
Justify with an example how each user option implies a set of follow-on user choices or actions,"Each user option implies a set of follow-on user choices or actions .For example, the buy a product option requires that the user enter a product category followed by the product name","Fitts law. The time to acquire a target is a function of the distance to and size of the target [Tog01]. Based on a study conducted in the 1950s [Fit54], Fitts law is an effective method of modeling rapid, aimed movements, where one appendage (like a hand) starts at rest at a specific start position, and moves to rest within a target area [Zha02]. If a sequence of selections or standardized inputs (with many different options within the sequence) is defined by a user task, the first selection (e.g., mouse pick) should be physically close to the next selection. For example, consider a WebApp home page interface at an e-commerce site that sells consumer electronics. Each user option implies a set of follow-on user choices or actions. For example, the buy a product option requires that the user enter a product category followed by the product name. The product category (e.g., audio equipment, televisions, DVD 10 Tognozzi [Tog01] notes that the only way to be sure that user expectations are properly understood is through comprehensive user testing (Chapter 20). 11/27/08 3:56 PM Page 338 players) appears as a pull-down menu as soon as buy a product is picked. Therefore, the next choice is immediately obvious (it is nearby) and the time to acquire it is negligible. If, on the other hand, the choice appeared on a menu that was located on the other side of the screen, the time for the user to acquire it (and then make the choice) would be far too long"
"Justify with an example how metaphor should call on images and concepts from the users experience, but it does not need to be an exact reproduction of a real-world experience","metaphor should call on images and concepts from the users experience, but it does not need to be an exact reproduction of a real-world experience .For example, an e-commerce site that implements automated bill paying for a financial institution, uses a checkbook metaphor (not surprisingly) to assist the user in specifying and scheduling bill payments","Metaphors. An interface that uses an interaction metaphor is easier to learn and easier to use, as long as the metaphor is appropriate for the application and the user. A Metaphors are an excellent idea because they mirror real-world experience. Just be sure that the metaphor you choose is well known to end users. metaphor should call on images and concepts from the users experience, but it does not need to be an exact reproduction of a real-world experience. For example, an e-commerce site that implements automated bill paying for a financial institution, uses a checkbook metaphor (not surprisingly) to assist the user in specifying and scheduling bill payments. However, when a user writes a check, he need not enter the complete payee name but can pick from a list of payees or have the system select based on the first few typed letters. The metaphor remains intact, but the user gets an assist from the WebApp. Maintain work product integrity"
Justify with an example how Aesthetics should never supersede functionality,"Aesthetics should never supersede functionality .For example, a simple button might be a better navigation option than an aesthetically pleasing, but vague image or icon whose intent is unclear. Navigation options should be obvious, even to the casual user","Navigation menus and head bars should be designed consistently and should be available on all pages that are available to the user. The design should not rely on browser functions to assist in navigation. Aesthetics should never supersede functionality. For example, a simple button might be a better navigation option than an aesthetically pleasing, but vague image or icon whose intent is unclear. Navigation options should be obvious, even to the casual user. The user should not have to search the screen to determine how to link to other content or services"
"Justify with an example how there are a number of different ways in which an application can handle concurrency, and each can be presented by a different architectural pattern","There are a number of different ways in which an application can handle concurrency, and each can be presented by a different architectural pattern .For example, one approach is to use an OperatingSystemProcessManagement pattern that provides built-in OS features that allow This implies that there will be a central foyer and hallway, that rooms will be placed to the left and right of the foyer, that the house will have two (or more) stories, that the bedrooms of the house will be upstairs, and so on","Concurrency. ulates parallelism (i.e., this occurs whenever multiple parallel tasks or components are managed by a single processor). There are a number of different ways in which an application can handle concurrency, and each can be presented by a different architectural pattern. For example, one approach is to use an OperatingSystemProcessManagement pattern that provides built-in OS features that allow This implies that there will be a central foyer and hallway, that rooms will be placed to the left and right of the foyer, that the house will have two (or more) stories, that the bedrooms of the house will be upstairs, and so on. These rules are imposed once the decision is made to use the centerhall colonial style. 11/27/08 Page 361 components to execute concurrently. The pattern also incorporates OS functionality that manages communication between processes, scheduling, and other capabilities required to achieve concurrency. Another approach might be to define a task scheduler at the application level. A TaskScheduler pattern contains a set of active objects that each contains a tick() operation [Bos00]. The scheduler periodically invokes tick() for each object, which then performs the functions it must perform before returning control back to the scheduler which then invokes the tick() operation for the next concurrent object"
Justify with an example how information contained within the content object is noted as attributes,"Information contained within the content object is noted as attributes .For example, Photograph (a .jpg image) has the attributes horizontal dimension, vertical dimension, and border style","13.6.1 Content Objects The relationship between content objects defined as part of a requirements model for the WebApp and design objects representing content is analogous to the relationship between analysis classes and design components described in earlier chapters. In the context of WebApp design, a content object is more closely aligned with content-specific information (normally defined during WebApp requirements modeling) and implementation-specific attributes that are specified as part of design. As an example, consider an analysis class, ProductComponent, developed for the SafeHome e-commerce system. The analysis class attribute, description, is represented as a design class named CompDescription composed of five content objects: MarketingDescription, Photograph, TechDescription, Schematic, and Video shown as shaded objects noted in Figure 13.3. Information contained within the content object is noted as attributes. For example, Photograph (a .jpg image) has the attributes horizontal dimension, vertical dimension, and border style. UML association and an aggregation7 may be used to represent relationships between content objects. For example, the UML association shown in Figure 13.3 indicates that one CompDescription is used for each instance of the ProductComponent class. CompDescription is composed on the five content objects shown. However, the multiplicity notation shown indicates that Schematic and Video are optional (0 occurrences are possible), one MarketingDescription and one TechDescription are required, and one or more instances of Photograph are used"
"Justify with an example how in addition to choosing the mechanics of navigation, you should also establish appropriate navigation conventions and aids","In addition to choosing the mechanics of navigation, you should also establish appropriate navigation conventions and aids .For example, icons and graphical links should look clickable by beveling the edges to give the image a three-dimensional look","Site mapsprovide an all-inclusive table of contents for navigation to all content objects and functionality contained within the WebApp. In addition to choosing the mechanics of navigation, you should also establish appropriate navigation conventions and aids. For example, icons and graphical links should look clickable by beveling the edges to give the image a three-dimensional look. Audio or visual feedback should be designed to provide the user with an indication that a navigation option has been chosen. For text-based navigation, color should be used to indicate navigation links and to provide an indication of links already traveled. These are but a few of dozens of design conventions that make navigation user-friendly. 13.9 C O M P O N E N T -L E V E L D E S I G N Modern WebApps deliver increasingly sophisticated processing functions that (1) perform localized processing to generate content and navigation capability in a dynamic fashion, (2) provide computation or data processing capability that are appropriate for the WebApps business domain, (3) provide sophisticated database query and access, and (4) establish data interfaces with external corporate systems. To achieve these (and many other) capabilities, you must design and construct program components that are identical in form to software components for traditional software"
"Justify with an example how in some situations, you have a set of prejudices that will influence your perception of quality","In some situations, you have a set of prejudices that will influence your perception of quality .For example, if you are introduced to a software product that was built by a vendor who has produced poor quality in the past, your guard will be raised and your perception of the current software product quality might be influenced negatively","Aesthetics. Theres no question that each of us has a different and very subjective vision of what is aesthetic. And yet, most of us would agree that an aesthetic entity has a certain elegance, a unique flow, and an obvious presence that are hard to quantify but are evident nonetheless. Aesthetic software has these characteristics. Perception. In some situations, you have a set of prejudices that will influence your perception of quality. For example, if you are introduced to a software product that was built by a vendor who has produced poor quality in the past, your guard will be raised and your perception of the current software product quality might be influenced negatively. Similarly, if a vendor has an excellent reputation, you may perceive quality, even when it does not really exist. Garvins quality dimensions provide you with a soft look at software quality"
"Justify with an example how once data are collected for many reviews conducted across many projects, average values for error density enable you to estimate the number of errors to be found in a new (as yet unreviewed document)","Once data are collected for many reviews conducted across many projects, average values for error density enable you to estimate the number of errors to be found in a new (as yet unreviewed document) .For example, if the average error density for a requirements model is 0.6 errors per page, and a new requirement model is 32 pages long, a rough estimate suggests that your software team will find about 19 or 20 errors during the review of the document","If reviews are conducted for a number of different types of work products (e.g., requirements model, design model, code, test cases), the percentage of errors uncovered for each review can be computed against the total number of errors found for all reviews. In addition, the error density for each work product can be computed. Once data are collected for many reviews conducted across many projects, average values for error density enable you to estimate the number of errors to be found in a new (as yet unreviewed document). For example, if the average error density for a requirements model is 0.6 errors per page, and a new requirement model is 32 pages long, a rough estimate suggests that your software team will find about 19 or 20 errors during the review of the document. If you find only 6 errors, youve done an extremely good job in developing the requirements model or your review approach was not thorough enough. Once testing has been conducted (Chapters 17 through 20), it is possible to collect additional error data, including the effort required to find and correct errors uncovered during testing and the error density of the software. The costs associated with finding and correcting an error during testing can be compared to those for reviews"
Justify with an example how audits are a type of review performed by SQA personnel with the intent of ensuring that quality guidelines are being followed for software engineering work,"Audits are a type of review performed by SQA personnel with the intent of ensuring that quality guidelines are being followed for software engineering work .For example, an audit of the review process might be conducted to ensure that reviews are being performed in a manner that will lead to the highest likelihood of uncovering errors","performed by software engineers for software engineers (Chapter 15). Their intent is to uncover errors. Audits are a type of review performed by SQA personnel with the intent of ensuring that quality guidelines are being followed for software engineering work. For example, an audit of the review process might be conducted to ensure that reviews are being performed in a manner that will lead to the highest likelihood of uncovering errors. Testing"
"Justify with an example how however, MTBF can be problematic for two reasons: (1) it projects a time span between failures, but does not provide us with a projected failure rate, and (2) MTBF can Some aspects of availability (not discussed here) have nothing to do with failure","However, MTBF can be problematic for two reasons: (1) it projects a time span between failures, but does not provide us with a projected failure rate, and (2) MTBF can Some aspects of availability (not discussed here) have nothing to do with failure .For example, scheduling downtime (for support functions) causes the software to be unavailable. be misinterpreted to mean average life span even though this is not what it implies","11/27/08 Page 443 SOFTWARE QUALITY ASSURANCE Many researchers argue that MTBF is a far more useful measure than other quality-related software metrics discussed in Chapter 23. Stated simply, an end user is concerned with failures, not with the total defect count. Because each defect contained within a program does not have the same failure rate, the total defect count provides little indication of the reliability of a system. For example, consider a program that has been in operation for 3000 processor hours without failure. Many defects in this program may remain undetected for tens of thousand of hours before they are discovered. The MTBF of such obscure errors might be 30,000 or even 60,000 processor hours. Other defects, as yet undiscovered, might have a failure rate of 4000 or 5000 hours. Even if every one of the first category of errors (those with long MTBF) is removed, the impact on software reliability is negligible. However, MTBF can be problematic for two reasons: (1) it projects a time span between failures, but does not provide us with a projected failure rate, and (2) MTBF can Some aspects of availability (not discussed here) have nothing to do with failure. For example, scheduling downtime (for support functions) causes the software to be unavailable. be misinterpreted to mean average life span even though this is not what it implies"
"Justify with an example how initially, hazards are identified and categorized by criticality and risk","Initially, hazards are identified and categorized by criticality and risk .For example, some of the hazards associated with a computer-based cruise control for an automobile might be: (1) causes uncontrolled acceleration that cannot be stopped, (2) does not respond to depression of brake pedal (by turning off), (3) does not engage when switch is activated, and (4) slowly loses or gains speed","Software safety is a software quality assurance activity that focuses on the identification and assessment of potential hazards that may affect software negatively and cause an entire system to fail. If hazards can be identified early in the software process, software design features can be specified that will either eliminate or control potential hazards. A modeling and analysis process is conducted as part of software safety. Initially, hazards are identified and categorized by criticality and risk. For example, some of the hazards associated with a computer-based cruise control for an automobile might be: (1) causes uncontrolled acceleration that cannot be stopped, (2) does not respond to depression of brake pedal (by turning off), (3) does not engage when switch is activated, and (4) slowly loses or gains speed. Once these system-level hazards are identified, analysis techniques are used to assign severity and probability of occurrence.3 To be effective, software must be analyzed in the context of the entire pre75977_ch16.qxd PART THREE QUALITY MANAGEMENT uote: I cannot imagine any condition which would cause this ship to founder. Modern shipbuilding has gone beyond that. E. I. Smith, captain of the Titanic be magnified by a software fault to produce control data that improperly positions a mechanical device. If and only if a set of external environmental conditions is met, the improper position of the mechanical device will cause a disastrous failure. Analysis techniques [Eri05] such as fault tree analysis, real-time logic, and Petri net models can be used to predict the chain of events that can cause hazards and the probability that each of the events will occur to create the chain"
Justify with an example how the specific objectives of testing should be stated in measurable terms,"The specific objectives of testing should be stated in measurable terms .For example, test effectiveness, test coverage, mean- WebRef An excellent list of testing resources can be found at www .io.com/~wazmo/ qa/. time-to-failure, the cost to find and fix defects, remaining defect density or frequency of occurrence, and test work-hours should be stated within the test plan","17.2 S T R AT E G I C I S S U E S Later in this chapter, I present a systematic strategy for software testing. But even the best strategy will fail if a series of overriding issues are not addressed. Tom Gilb [Gil95] argues that a software testing strategy will succeed when software testers: What guidelines lead to a successful software testing strategy? Specify product requirements in a quantifiable manner long before testing commences. Although the overriding objective of testing is to find errors, a good testing strategy also assesses other quality characteristics such as portability, maintainability, and usability (Chapter 14). These should be specified in a way that is measurable so that testing results are unambiguous. State testing objectives explicitly. The specific objectives of testing should be stated in measurable terms. For example, test effectiveness, test coverage, mean- WebRef An excellent list of testing resources can be found at www .io.com/~wazmo/ qa/. time-to-failure, the cost to find and fix defects, remaining defect density or frequency of occurrence, and test work-hours should be stated within the test plan"
"Justify with an example how ideally, the classes of failure are probed","Ideally, the classes of failure are probed .For example, one class of potential failure in a graphical user interface is the failure to recognize proper mouse position","You can use the attributes suggested by Bach to develop a software configuration (i.e., programs, data, and documents) that is amenable to testing. Test Characteristics. And what about the tests themselves? Kaner, Falk, and Nguyen [Kan93] suggest the following attributes of a good test: A good test has a high probability of finding an error. To achieve this goal, the is a ? What good test? tester must understand the software and attempt to develop a mental picture of how the software might fail. Ideally, the classes of failure are probed. For example, one class of potential failure in a graphical user interface is the failure to recognize proper mouse position. A set of tests would be designed to exercise the mouse in an attempt to demonstrate an error in mouse position recognition. A good test is not redundant. Testing time and resources are limited. There is no point in conducting a test that has the same purpose as another test. Every test should have a different purpose (even if it is subtly different)"
Justify with an example how apply guidelines 1 and 2 to output conditions,"Apply guidelines 1 and 2 to output conditions .For example, assume that a temperature versus pressure table is required as output from an engineering analysis program","2. If an input condition specifies a number of values, test cases should be developed that exercise the minimum and maximum numbers. Values just above and below minimum and maximum are also tested. 3. Apply guidelines 1 and 2 to output conditions. For example, assume that a temperature versus pressure table is required as output from an engineering analysis program. Test cases should be designed to create an output report that produces the maximum (and minimum) allowable number of table entries. 4. If internal program data structures have prescribed boundaries (e.g., a table has a defined limit of 100 entries), be certain to design a test case to exercise the data structure at its boundary"
"Justify with an example how in many situations, test data provided when a realtime system is in one state will result in proper processing, while the same data provided when the system is in a different state may lead to error","In many situations, test data provided when a realtime system is in one state will result in proper processing, while the same data provided when the system is in a different state may lead to error .For example, the real-time software that controls a new photocopier accepts operator interrupts (i.e., the machine operator hits control keys such as RESET or DARKEN) with no error when the machine is making copies (in the copying state)","11/27/08 6:12 PM Page 506 18.8.4 Testing for Real-Time Systems The time-dependent, asynchronous nature of many real-time applications adds a new and potentially difficult element to the testing mixtime. Not only does the testcase designer have to consider conventional test cases but also event handling (i.e., interrupt processing), the timing of the data, and the parallelism of the tasks (processes) that handle the data. In many situations, test data provided when a realtime system is in one state will result in proper processing, while the same data provided when the system is in a different state may lead to error. For example, the real-time software that controls a new photocopier accepts operator interrupts (i.e., the machine operator hits control keys such as RESET or DARKEN) with no error when the machine is making copies (in the copying state). These same operator interrupts, if input when the machine is in the jammed state, cause a display of the diagnostic code indicating the location of the jam to be lost (an error)"
Justify with an example how the description of each CRC index card to determine if a delegated responsibility is part of the collaborators definition,"the description of each CRC index card to determine if a delegated responsibility is part of the collaborators definition .For example, consider a class defined for a point-of-sale checkout system and called CreditSale","To evaluate the class model the following steps have been recommended [McG94]: 1. Revisit the CRC model and the object-relationship model. Cross-check to ensure that all collaborations implied by the requirements model are properly reflected in the both. 2. Inspect the description of each CRC index card to determine if a delegated responsibility is part of the collaborators definition. For example, consider a class defined for a point-of-sale checkout system and called CreditSale. This class has a CRC index card as illustrated in Figure 19.1. FIGURE 19.1 An example CRC index card used for review 11/27/08 Page 515 TESTING OBJECT-ORIENTED APPLICATIONS For this collection of classes and collaborations, ask whether a responsibility (e.g., read credit card) is accomplished if delegated to the named collaborator (CreditCard). That is, does the class CreditCard have an operation that enables it to be read? In this case the answer is yes"
Justify with an example how invert the connection to ensure that each collaborator that is asked for service is receiving requests from a reasonable source,"Invert the connection to ensure that each collaborator that is asked for service is receiving requests from a reasonable source .For example, if the CreditCard class receives a request for purchase amount from the CreditSale class, there would be a problem","The object-relationship is traversed to ensure that all such connections are valid. 3. Invert the connection to ensure that each collaborator that is asked for service is receiving requests from a reasonable source. For example, if the CreditCard class receives a request for purchase amount from the CreditSale class, there would be a problem. CreditCard does not know the purchase amount. 4. Using the inverted connections examined in step 3, determine whether other classes might be required or whether responsibilities are properly grouped among the classes"
Justify with an example how the best tests are derived when the designer looks at the system in a new or unconventional way,"The best tests are derived when the designer looks at the system in a new or unconventional way .For example, if the system or product has a command-based interface, more thorough tests will be derived if the test-case designer pretends that operations are independent of objects","as a testing checklist. If no test scenarios existed to exercise a command, testing has likely overlooked some user tasks (or the interface has useless commands). In an object-based interface, the tester might use the list of all objects as a testing checklist. The best tests are derived when the designer looks at the system in a new or unconventional way. For example, if the system or product has a command-based interface, more thorough tests will be derived if the test-case designer pretends that operations are independent of objects. Ask questions like, Might the user want to use this operationwhich applies only to the Scanner objectwhile working with the printer? Whatever the interface style, test-case design that exercises the surface structure should use both objects and operations as clues leading to overlooked tasks. Deep structure refers to the internal technical details of an OO program, that is, the uote: Be not ashamed of mistakes and thus make them crimes"
Justify with an example how the requirements and design models are used as the basis for deep structure testing,"The requirements and design models are used as the basis for deep structure testing .For example, the UML collaboration diagram or the deployment model depicts collaborations between objects and subsystems that may not be externally visible","Confucius structure that is understood by examining the design and/or code. Deep structure testing is designed to exercise dependencies, behaviors, and communication mechanisms that have been established as part of the design model for OO software. The requirements and design models are used as the basis for deep structure testing. For example, the UML collaboration diagram or the deployment model depicts collaborations between objects and subsystems that may not be externally visible. The test-case design then asks: Have we captured (as a test) some task that exercises the collaboration noted on the collaboration diagram? If not, why not? AT T H E Testing in the small focuses on a single class and the methods that are encapsulated by the class. Random testing and partitioning are methods that can be used to The number of possible permutations for random testing can grow quite large"
"Justify with an example how during content testing, the structure and organization of the content architecture is tested to ensure that required content is presented to the end user in the proper order and relationships","During content testing, the structure and organization of the content architecture is tested to ensure that required content is presented to the end user in the proper order and relationships .For example, the SafeHomeAssured.com WebApp presents a variety of information about sensors that are used as part of security and surveillance products","Content objects exist within an architecture that has a specific style (Chapter 13). During content testing, the structure and organization of the content architecture is tested to ensure that required content is presented to the end user in the proper order and relationships. For example, the SafeHomeAssured.com WebApp presents a variety of information about sensors that are used as part of security and surveillance products. Content objects provide descriptive information, technical specifications, a photographic representation, and related information. Tests of the SafeHomeAssured.com content architecture strive to uncover errors in the presentation of this information (e.g., a description of Sensor X is presented with a photo 20.3.2 Database Testing Modern WebApps do much more than present static content objects. In many application domains, WebApps interface with sophisticated database management systems and build dynamic content objects that are created in real time using the data acquired from a database. For example, a financial services WebApp can produce complex text-based, tabular, and graphical information about a specific equity (e.g., a stock or mutual fund)"
"Justify with an example how in many application domains, WebApps interface with sophisticated database management systems and build dynamic content objects that are created in real time using the data acquired from a database","In many application domains, WebApps interface with sophisticated database management systems and build dynamic content objects that are created in real time using the data acquired from a database .For example, a financial services WebApp can produce complex text-based, tabular, and graphical information about a specific equity (e.g., a stock or mutual fund)","During content testing, the structure and organization of the content architecture is tested to ensure that required content is presented to the end user in the proper order and relationships. For example, the SafeHomeAssured.com WebApp presents a variety of information about sensors that are used as part of security and surveillance products. Content objects provide descriptive information, technical specifications, a photographic representation, and related information. Tests of the SafeHomeAssured.com content architecture strive to uncover errors in the presentation of this information (e.g., a description of Sensor X is presented with a photo 20.3.2 Database Testing Modern WebApps do much more than present static content objects. In many application domains, WebApps interface with sophisticated database management systems and build dynamic content objects that are created in real time using the data acquired from a database. For example, a financial services WebApp can produce complex text-based, tabular, and graphical information about a specific equity (e.g., a stock or mutual fund). The composite content object that presents this information is created dynamically after the user has made a request for information about a specific equity. To accomplish this, the following steps are required: (1) a large equities database is queried, (2) relevant data are extracted from the database, (3) the extracted data must be organized as a content object, and (4) this content object (representing customized information requested by an end user) is transmitted to the client environment for display. Errors can and do occur as a consequence of each of these steps. The objective of database testing is to uncover these errors, but database testing is complicated by a variety of factors: 1. The original client-side request for information is rarely presented in the form What issues complicate database testing for WebApps? [e.g., structured query language (SQL)] that can be input to a database management system (DBMS). Therefore, tests should be designed to uncover errors made in translating the users request into a form that can be processed by the DBMS"
Justify with an example how Individual interface mechanisms are tested in a manner that is analogous to unit testing,"Individual interface mechanisms are tested in a manner that is analogous to unit testing .For example, tests are designed to exercise all forms, client-side scripting, dynamic HTML, scripts, streaming content, and application-specific interface mechanisms (e.g., a shopping cart for an e-commerce application)","11/28/08 10:22 AM Page 538 fonts, the use of color, frames, images, borders, tables, and related interface features that are generated as WebApp execution proceeds. Individual interface mechanisms are tested in a manner that is analogous to unit testing. For example, tests are designed to exercise all forms, client-side scripting, dynamic HTML, scripts, streaming content, and application-specific interface mechanisms (e.g., a shopping cart for an e-commerce application). In many cases, testing can focus exclusively on one of these mechanisms (the unit) to the exclusion of other interface features and functions"
"Justify with an example how in some cases, small compatibility issues present no significant problems, but in others, serious errors can be encountered","In some cases, small compatibility issues present no significant problems, but in others, serious errors can be encountered .For example, download speeds may become unacceptable, lack of a required plug-in may make content unavailable, browser differences can change page layout dramatically, font styles may be altered and become illegible, or forms may be improperly organized","results, regardless of the degree of HTML standardization within the WebApp. Required plug-ins may or may not be readily available for a particular configuration. In some cases, small compatibility issues present no significant problems, but in others, serious errors can be encountered. For example, download speeds may become unacceptable, lack of a required plug-in may make content unavailable, browser differences can change page layout dramatically, font styles may be altered and become illegible, or forms may be improperly organized. Compatibility testing strives to uncover these problems before the WebApp goes online. The first step in compatibility testing is to define a set of commonly encountered client-side computing configurations and their variants. In essence, a tree structure is created, identifying each computing platform, typical display devices, the operating systems supported on the platform, the browsers available, likely Internet 11/28/08 CHAPTER 20 TESTING WEB APPLICATIONS connection speeds, and similar information. Next, a series of compatibility validation tests are derived, often adapted from existing interface tests, navigation tests, performance tests, and security tests. The intent of these tests is to uncover errors or execution problems that can be traced to configuration differences"
"Justify with an example how test cases for each class of input are derived and executed, while other classes of input are held constant","Test cases for each class of input are derived and executed, while other classes of input are held constant .For example, an e-commerce application may implement a function that computes shipping charges","10:22 AM Page 544 Component-level test cases are often driven by forms-level input. Once forms data are defined, the user selects a button or other control mechanism to initiate execution. The following test-case design methods (Chapter 18) are typical: Equivalence partitioningThe input domain of the function is divided into input categories or classes from which test cases are derived. The input form is assessed to determine what classes of data are relevant for the function. Test cases for each class of input are derived and executed, while other classes of input are held constant. For example, an e-commerce application may implement a function that computes shipping charges. Among a variety of shipping information provided via a form is the users postal code. Test cases are designed in an attempt to uncover errors in postal code processing by specifying postal code values that might uncover different classes of errors (e.g., an incomplete postal code, a correct postal code, a nonexistent postal code, an erroneous postal code format). Boundary value analysisForms data are tested at their boundaries. For example, the shipping calculation function noted previously requests the maximum number of days required for product delivery. A minimum of 2 days and a maximum of 14 are noted on the form. However, boundary value tests might input values of 0, 1, 2, 13, 14, and 15 to determine how the function reacts to data at and outside the boundaries of valid input.9 Path testingIf the logical complexity of the function is high, path testing (a white-box test-case design method) can be used to ensure that every independent path in the program has been exercised"
Justify with an example how spoofing occurs when one end of the communication pathway is subverted by an entity with malicious intent,"Spoofing occurs when one end of the communication pathway is subverted by an entity with malicious intent .For example, a user can be spoofed by a malicious website that acts as if it is the legitimate WebApp server (identical look and feel)","Data communicated between the client and server are vulnerable to spoofing. Spoofing occurs when one end of the communication pathway is subverted by an entity with malicious intent. For example, a user can be spoofed by a malicious website that acts as if it is the legitimate WebApp server (identical look and feel). The intent is to steal passwords, proprietary information, or credit data. On the server side, vulnerabilities include denial-of-service attacks and malicious scripts that can be passed along to the client side or used to disable server operations"
Justify with an example how a precondition defines the circumstances in which a particular operation is valid,"A precondition defines the circumstances in which a particular operation is valid .For example, the precondition for an operation that adds a name to a staff identifier symbol table is valid only if the name that is to be added is not contained in the table and also if there are fewer than MaxIds staff identifiers in the table","Three types of conditions can be associated with operations: invariants, preconditions, and postconditions. An invariant defines what is guaranteed not to change. For example, the symbol table has an invariant that states that the number of elements is always less than or equal to MaxIds. A precondition defines the circumstances in which a particular operation is valid. For example, the precondition for an operation that adds a name to a staff identifier symbol table is valid only if the name that is to be added is not contained in the table and also if there are fewer than MaxIds staff identifiers in the table. The postcondition of an operation defines what is guaranteed to be true upon completion of an operation. This is defined by its effect on the data. For the add() operation, the postcondition would specify mathematically that the table has been augmented with the new identifier. Example 2: A block handler"
"Justify with an example how the ability to keep track of all of these relationships is crucial to the integrity of the information stored in the repository and to the generation of deliverables based on it, and it is one of the most important contributions of the repository concept to the improvement of the software process","The ability to keep track of all of these relationships is crucial to the integrity of the information stored in the repository and to the generation of deliverables based on it, and it is one of the most important contributions of the repository concept to the improvement of the software process .For example, if a UML class diagram is modified, the repository can detect whether related classes, interface descriptions, and code components also require modification and can bring affected SCIs to the developers attention","Dependency tracking and change management. The repository manages a wide variety of relationships among the data elements stored in it. These include relationships between enterprise entities and processes, among the parts of an application design, between design components and the enterprise information architecture, between design elements and deliverables, and so on. Some of these relationships are merely associations, and some are dependencies or mandatory relationships. The ability to keep track of all of these relationships is crucial to the integrity of the information stored in the repository and to the generation of deliverables based on it, and it is one of the most important contributions of the repository concept to the improvement of the software process. For example, if a UML class diagram is modified, the repository can detect whether related classes, interface descriptions, and code components also require modification and can bring affected SCIs to the developers attention. Requirements tracing"
"Justify with an example how as an SCI moves through a layer, the actions implied by each SCM task may or may not be applicable","As an SCI moves through a layer, the actions implied by each SCM task may or may not be applicable .For example, when a new SCI is created, it must be identified","Referring to the figure, SCM tasks can viewed as concentric layers. SCIs flow outward through these layers throughout their useful life, ultimately becoming part FIGURE 22.4 Layers of the SCM process Reporting Configuration auditing Version control Change control Identification Software Vm.n 11/27/08 6:20 PM Page 594 of the software configuration of one or more versions of an application or system. As an SCI moves through a layer, the actions implied by each SCM task may or may not be applicable. For example, when a new SCI is created, it must be identified. However, if no changes are requested for the SCI, the change control layer does not apply. The SCI is assigned to a specific version of the software (version control mechanisms come into play). A record of the SCI (its name, creation date, version designation, etc.) is maintained for configuration auditing purposes and reported to those with a need to know. In the sections that follow, we examine each of these SCM process layers in more detail"
Justify with an example how an aggregate object is a collection of basic objects and other aggregate objects,"An aggregate object is a collection of basic objects and other aggregate objects .For example, a DesignSpecification is an aggregate object","However, if no changes are requested for the SCI, the change control layer does not apply. The SCI is assigned to a specific version of the software (version control mechanisms come into play). A record of the SCI (its name, creation date, version designation, etc.) is maintained for configuration auditing purposes and reported to those with a need to know. In the sections that follow, we examine each of these SCM process layers in more detail. 22.3.1 Identification of Objects in the Software Configuration To control and manage software configuration items, each should be separately named and then organized using an object-oriented approach. Two types of objects can be identified [Cho89]: basic objects and aggregate objects.3 A basic object is a unit of information that you create during analysis, design, code, or test. For example, a basic object might be a section of a requirements specification, part of a design model, source code for a component, or a suite of test cases that are used to exercise the code. An aggregate object is a collection of basic objects and other aggregate objects. For example, a DesignSpecification is an aggregate object. Conceptually, it can be viewed as a named (identified) list of pointers that specify aggregate objects such as ArchitecturalModel and DataModel, and basic objects such as ComponentN and UMLClassDiagramN. Each object has a set of distinct features that identify it uniquely: a name, a description, a list of resources, and a realization. The object name is a character The interrelationships established for configuration objects allow you to assess the impact of change"
Justify with an example how the mathematical computation of the metric should use measures that do not lead to bizarre combinations of units,"The mathematical computation of the metric should use measures that do not lead to bizarre combinations of units .For example, multiplying people on the project teams by programming language variables in the program results in a suspicious mix of units that are not intuitively persuasive. Programming language independent","Experience indicates that a product metric will be used only if it is intuitive and easy to compute. If dozens of counts have to be made, and complex computations are required, it is unlikely that the metric will be widely adopted. Consistent in its use of units and dimensions. The mathematical computation of the metric should use measures that do not lead to bizarre combinations of units. For example, multiplying people on the project teams by programming language variables in the program results in a suspicious mix of units that are not intuitively persuasive. Programming language independent. Metrics should be based on the requirements model, the design model, or the structure of the program itself. They should not be dependent on the vagaries of programming language syntax or semantics"
Justify with an example how you can also derive process metrics by measuring the characteristics of specific software engineering tasks,"You can also derive process metrics by measuring the characteristics of specific software engineering tasks .For example, you might measure the effort and time spent performing the umbrella activities and the generic software engineering activities described","uote: Software metrics let you know when to laugh and when to cry. Tom Gilb Outcomes include measures of errors uncovered before release of the software, defects delivered to and reported by end users, work products delivered (productivity), human effort expended, calendar time expended, schedule conformance, and other measures. You can also derive process metrics by measuring the characteristics of specific software engineering tasks. For example, you might measure the effort and time spent performing the umbrella activities and the generic software engineering activities described in Chapter 2. Grady [Gra92] argues that there are private and public uses for different types of process data. Because it is natural that individual software engineers might be sensitive to the use of metrics collected on an individual basis, these data should be private to the individual and serve as an indicator for the individual only. Examples of private metrics include defect rates (by individual), defect rates (by component), and errors found during development"
Justify with an example how dRE can also be used within the project to assess a teams ability to find errors before they are passed to the next framework activity or software engineering action,"DRE can also be used within the project to assess a teams ability to find errors before they are passed to the next framework activity or software engineering action .For example, requirements analysis produces a requirements model that can be reviewed to find and correct errors","DRE can also be used within the project to assess a teams ability to find errors before they are passed to the next framework activity or software engineering action. For example, requirements analysis produces a requirements model that can be reviewed to find and correct errors. Those errors that are not found during the review of the requirements model are passed on to design (where they may or may not be found). When used in this context, we redefine DRE as DREi  Ei Ei  Ei1 6:25 PM Page 682 where Ei is the number of errors found during software engineering action i and Ei+ 1 is the number of errors found during software engineering action i + 1 that are traceable to errors that were not discovered in software engineering action i. A quality objective for a software team (or an individual software engineer) is to achieve DREi that approaches 1. That is, errors should be filtered out before they are passed on to the next activity or action"
"Justify with an example how when a computer-based system (incorporating specialized hardware and software) is to be engineered, the software team may require access to hardware elements being developed by other engineering teams","When a computer-based system (incorporating specialized hardware and software) is to be engineered, the software team may require access to hardware elements being developed by other engineering teams .For example, software for a robotic device used within a manufacturing cell may require a specific robot (e.g., a robotic welder) as part of the validation test step; a software project for advanced page layout may need a high-speed digital printing system at some point during development","26.4.3 Environmental Resources The environment that supports a software project, often called the software engineering environment (SEE), incorporates hardware and software. Hardware provides pre75977_ch26.qxd 6:26 PM CHAPTER 26 a platform that supports the tools (software) required to produce the work products that are an outcome of good software engineering practice.5 Because most software organizations have multiple constituencies that require access to the SEE, you must prescribe the time window required for hardware and software and verify that these resources will be available. When a computer-based system (incorporating specialized hardware and software) is to be engineered, the software team may require access to hardware elements being developed by other engineering teams. For example, software for a robotic device used within a manufacturing cell may require a specific robot (e.g., a robotic welder) as part of the validation test step; a software project for advanced page layout may need a high-speed digital printing system at some point during development. Each hardware element must be specified as part of planning. 26.5 S O F T WA R E P R O J E C T E S T I M AT I O N Software cost and effort estimation will never be an exact science. Too many uote: In an age of outsourcing and increased competition, the ability to estimate more accurately . ."
Justify with an example how this is achieved by developing a plan for risk mitigation,"This is achieved by developing a plan for risk mitigation .For example, management intuition, the likelihood l1 of high turnover is estimated to be 0.70 (70 percent, rather high) and the impact x1 is projected as critical","Napolean and contingency planning. If a software team adopts a proactive approach to risk, avoidance is always the best strategy. This is achieved by developing a plan for risk mitigation. For example, management intuition, the likelihood l1 of high turnover is estimated to be 0.70 (70 percent, rather high) and the impact x1 is projected as critical. That is, high turnover will have a critical impact on project cost and schedule. To mitigate this risk, you would develop a strategy for reducing turnover. Among the possible steps to be taken are: can ? What we do to mitigate a risk? Meet with current staff to determine causes for turnover (e.g., poor working conditions, low pay, competitive job market)"
"Justify with an example how it is important to note that risk mitigation, monitoring, and management (RMMM) steps incur additional project cost","It is important to note that risk mitigation, monitoring, and management (RMMM) steps incur additional project cost .For example, spending the time to back up every If RE for a specific risk is less than the cost of risk mitigation, don't try to mitigate the risk but continue to monitor it. critical technologist costs money","Risk management and contingency planning assumes that mitigation efforts have failed and that the risk has become a reality. Continuing the example, the project is well under way and a number of people announce that they will be leaving. If the mitigation strategy has been followed, backup is available, information is documented, and knowledge has been dispersed across the team. In addition, you can temporarily refocus resources (and readjust the project schedule) to those functions that are fully staffed, enabling newcomers who must be added to the team to get up to speed. Those individuals who are leaving are asked to stop all work and spend their last weeks in knowledge transfer mode. This might include video-based knowledge capture, the development of commentary documents or Wikis, and/or meeting with other team members who will remain on the project. It is important to note that risk mitigation, monitoring, and management (RMMM) steps incur additional project cost. For example, spending the time to back up every If RE for a specific risk is less than the cost of risk mitigation, don't try to mitigate the risk but continue to monitor it. critical technologist costs money. Part of risk management, therefore, is to evaluate when the benefits accrued by the RMMM steps are outweighed by the costs associated with implementing them. In essence, you perform a classic cost-benefit analysis. If risk aversion steps for high turnover will increase both project cost and duration by an estimated 15 percent, but the predominant cost factor is backup, management may decide not to implement this step. On the other hand, if the risk aversion steps are projected to increase costs by 5 percent and duration by only 3 percent, management will likely put all into place"
"Justify with an example how in most cases, the completeness decreases as the abstraction level increases","In most cases, the completeness decreases as the abstraction level increases .For example, given a source code listing, it is relatively easy to develop a complete procedural design representation","The abstraction level of a reverse engineering process and the tools used to effect it refers to the sophistication of the design information that can be extracted from source code. Ideally, the abstraction level should be as high as possible. That is, the reverse engineering process should be capable of deriving procedural design representations (a low-level abstraction), program and data structure information (a somewhat higher level of abstraction), object models, data and/or control flow models (a relatively high level of abstraction), and entity relationship models (a high level of abstraction). As the abstraction level increases, you are provided with information that will allow easier understanding of the program. The completeness of a reverse engineering process refers to the level of detail that is provided at an abstraction level. In most cases, the completeness decreases as the abstraction level increases. For example, given a source code listing, it is relatively easy to develop a complete procedural design representation. Simple architectural design representations may also be derived, but it is far more difficult to develop a complete set of UML diagrams or models. Completeness improves in direct proportion to the amount of analysis performed by the person doing reverse engineering. Interactivity refers to the degree to which the human is integrated with automated tools to create an effective reverse engineering process. In most cases, as the abstraction level increases, interactivity must increase or completeness will suffer"
Justify with an example how it is often worthwhile to develop a new interaction metaphor,"It is often worthwhile to develop a new interaction metaphor .For example, an old UI requests that a user provide a scale factor (ranging from 1 to 10) to shrink or magnify a graphical image","To fully understand an existing user interface, the structure and behavior of the interface must be specified. Merlo and his colleagues [Mer93] suggest three basic questions that must be answered as reverse engineering of the UI commences: do I ? How understand the workings of an existing user interface? What are the basic actions (e.g., keystrokes and mouse clicks) that the interface must process? What is a compact description of the behavioral response of the system to these actions? What is meant by a replacement, or more precisely, what concept of equivalence of interfaces is relevant here? Behavioral modeling notation (Chapter 7) can provide a means for developing answers to the first two questions. Much of the information necessary to create a behavioral model can be obtained by observing the external manifestation of the existing interface. But additional information necessary to create the behavioral model must be extracted from the code. It is important to note that a replacement GUI may not mirror the old interface exactly (in fact, it may be radically different). It is often worthwhile to develop a new interaction metaphor. For example, an old UI requests that a user provide a scale factor (ranging from 1 to 10) to shrink or magnify a graphical image. A reengineered GUI might use a slide-bar and mouse to accomplish the same function. 11/27/08 6:32 PM Page 776 S OFTWARE T OOLS Reverse Engineering Objective: To help software engineers understand the internal design structure of complex programs"
Justify with an example how assessment examines a wide range of actions and tasks that will lead to a highquality process,"Assessment examines a wide range of actions and tasks that will lead to a highquality process .For example, regardless of the process model that is chosen, the software organization must establish generic mechanisms such as: defined approaches for customer communication; established methods for representing user requirements; defining a project management framework that includes scoping, estimation, scheduling, and project tracking; risk analysis methods; change management procedures; quality assurance and control activities including reviews; and many others","The intent of assessment is to uncover both strengths and weaknesses in the way your organization applies the existing software process and the software engineering practices that populate the process. Assessment examines a wide range of actions and tasks that will lead to a highquality process. For example, regardless of the process model that is chosen, the software organization must establish generic mechanisms such as: defined approaches for customer communication; established methods for representing user requirements; defining a project management framework that includes scoping, estimation, scheduling, and project tracking; risk analysis methods; change management procedures; quality assurance and control activities including reviews; and many others. Each is considered within the context of the framework and umbrella activities (Chapter 2) that have been established and is assessed to determine whether each of the following questions has been addressed: Is the objective of the action clearly defined? Are work products required as input and produced as output identified and described? Are the work tasks to be performed clearly described? Are the people who must perform the action identified by role? Have entry and exit criteria been established? Have metrics for the action been established? Are tools available to support the action? Is there an explicit training program that addresses the action? Is the action performed uniformly for all projects? Although the questions noted imply a yes or no answer, the role of assessment is to look behind the answer to determine whether the action in question is being performed in a manner that would conform to best practice"
"Justify with an example how directed primarily toward practitioners, this category stresses technologies and tools that have been adopted for local use","Directed primarily toward practitioners, this category stresses technologies and tools that have been adopted for local use .For example, if UML has been chosen for analysis and design modeling, a training curriculum for software engineering using UML would be established","to provide professionals with the intellectual tools they need to apply the software process effectively and to make rational decisions about improvements to the process. Specific technology and tools. Directed primarily toward practitioners, this category stresses technologies and tools that have been adopted for local use. For example, if UML has been chosen for analysis and design modeling, a training curriculum for software engineering using UML would be established. Business communication and quality-related topics. Directed toward all stakeholders, this category focuses on soft topics that help enable better communication among stakeholders and foster a greater quality focus"
Justify with an example how the census data can then be connected to other seemingly unrelated pieces of information,"The census data can then be connected to other seemingly unrelated pieces of information .For example, the current number of elementary school teachers who will retire during the next decade, the number of college students graduating with degrees in primary and secondary education, the pressure on politicians to hold down taxes and therefore limit pay increases for teachers","Thomas J. Watson cating that the birthrate in 1996 in the United States was 4.9 million. This number represents a data value. Relating this piece of data with birthrates for the preceding 40 years, we can derive a useful piece of informationaging baby boomers of the 1950s and early 1960s made a last-gasp effort to have children prior to the end of their child-bearing years. In addition, gen-Xers began their childbearing years. The census data can then be connected to other seemingly unrelated pieces of information. For example, the current number of elementary school teachers who will retire during the next decade, the number of college students graduating with degrees in primary and secondary education, the pressure on politicians to hold down taxes and therefore limit pay increases for teachers. All of these pieces of information can be combined to formulate a representation of knowledgethere will be significant pressure on the education system in the United States in the early twenty-first century, and this pressure will continue for a number of decades. Using this knowledge, a business opportunity may emerge. There may be significant opportunity to develop new modes of learning that are more effective and less costly than current approaches. 2 The rapid growth of data mining and data warehousing technologies reflect this growing trend"
Justify with an example how complex systems typically have more than one actor,"Complex systems typically have more than one actor .For example, a vending machine application might have three actors representing customers, repair personnel, and vendors who refill the machine","A UML use-case diagram is an overview of all the use cases and how they are related. It provides a big picture of the functionality of the system. A use-case diagram for the digital music application is shown in Figure A1.5. In this diagram, the stick figure represents an actor (Chapter 5) that is associated with one category of user (or other interaction element). Complex systems typically have more than one actor. For example, a vending machine application might have three actors representing customers, repair personnel, and vendors who refill the machine. In the use-case diagram, the use cases are displayed as ovals. The actors are connected by lines to the use cases that they carry out. Note that none of the details of the use cases are included in the diagram and instead need to be stored separately"
Justify with an example how a set of generic attributes can be associated with every object in the class PieceOfFurniture,"A set of generic attributes can be associated with every object in the class PieceOfFurniture .For example, all furniture has a cost, dimensions, weight, location, and color, among many possible attributes","11/27/08 Page 862 11/27/08 Page 863 OBJECT-O RIENTED CONCEPTS KEY CONCEPTS attributes . . . . .865 classes . . . . . . .864 boundary . . . .866 characteristics . .869 controller . . . .866 definition . . . .863 design . . . . . .868 entity . . . . . .866 encapsulation . .863 inheritance . . . .866 messages . . . . .867 methods . . . . . .865 operations . . . .865 polymorphism . .868 services . . . . . .865 subclass . . . . . .865 superclass . . . .865 hat is an object-oriented (OO) viewpoint? Why is a method considered to be object oriented? What is an object? As OO concepts gained widespread adherents during the 1980s and 1990s, there were many different opinions about the correct answers to these questions, but today a coherent view of OO concepts has emerged. This appendix is designed to provide you with a brief overview of this important topic and to introduce basic concepts and terminology. To understand the object-oriented point of view, consider an example of a realworld objectthe thing you are sitting in right nowa chair. Chair is a subclass of a much larger class that we can call PieceOfFurniture. Individual chairs are members (usually called instances) of the class Chair. A set of generic attributes can be associated with every object in the class PieceOfFurniture. For example, all furniture has a cost, dimensions, weight, location, and color, among many possible attributes. These apply whether we are talking about a table or a chair, a sofa or an armoire. Because Chair is a member of PieceOfFurniture, Chair inherits all attributes defined for the class. We have attempted an anecdotal definition of a class by describing its attributes, but something is missing. Every object in the class PieceOfFurniture can be manipulated in a variety of ways. It can be bought and sold, physically modified (e.g., you can saw off a leg or paint the object purple), or moved from one place to another. Each of these operations (other terms are services or methods) will modify one or more attributes of the object. For example, if the attribute location is a composite data item defined as location  building  floor  room then an operation named move() would modify one or more of the data items (building, floor, or room) that form the attribute location. To do this, move() must have knowledge of these data items. The operation move() could be used for a chair or a table, as long as both are instances of the class PieceOfFurniture. Valid operations for the class PieceOfFurniturebuy(), sell(), weigh()are specified as part of the class definition and are inherited by all instances of the class"
Justify with an example how a subclass is a specialization of the superclass,"A subclass is a specialization of the superclass .For example, the superclass MotorVehicle is a generalization of the classes Truck, SUV, Automobile, and Van","AND A class is an OO concept that encapsulates the data and procedural abstractions required to describe the content and behavior of some real-world entity. Data abstractions that describe the class are enclosed by a wall of procedural abstractions [Tay90] (represented in Figure A2.1) that are capable of manipulating the data in some way. In a well-designed class, the only way to reach the attributes (and operate on them) is to go through one of the methods that form the wall illustrated in the figure. Therefore, the class encapsulates data (inside the wall) and the processing that manipulates the data (the methods that make up the wall). This achieves information hiding (Chapter 8) and reduces the impact of side effects associated with change. Since the methods tend to manipulate a limited number of attributes, their cohesion is improved, and because communication occurs only through the methods that make up the wall, the class tends to be less strongly coupled from other elements of a system.1 FIGURE A2.1 A schematic representation of a class Method1() Method2() Attributes It should be noted, however, that coupling can become a serious problem in OO systems. It arises when classes from various parts of the system are used as the data types of attributes, and arguments to methods. Even though access to the objects may only be through procedure calls, this does not mean that coupling is necessarily low, just lower than if direct access to the internals of objects were allowed. 11/27/08 Page 865 Stated another way, a class is a generalized description (e.g., a template or blueprint) that describes a collection of similar objects. By definition, objects are instances of a specific class and inherit its attributes and the operations that are available to manipulate the attributes. A superclass (often called a base class) is a generalization of a set of classes that are related to it. A subclass is a specialization of the superclass. For example, the superclass MotorVehicle is a generalization of the classes Truck, SUV, Automobile, and Van. The subclass Automobile inherits all attributes of MotorVehicle, but in addition, incorporates additional attributes that are specific only to automobiles. These definitions imply the existence of a class hierarchy in which the attributes and operations of the superclass are inherited by subclasses that may each add additional private attributes and methods. For example, the operations sitOn() and turn() might be private to the Chair subclass"
"Justify with an example how in most cases, a domain is simply a set of specific values","In most cases, a domain is simply a set of specific values .For example, assume that a class Automobile has an attribute color","These definitions imply the existence of a class hierarchy in which the attributes and operations of the superclass are inherited by subclasses that may each add additional private attributes and methods. For example, the operations sitOn() and turn() might be private to the Chair subclass. AT T R I B U T E S You have learned that attributes are attached to classes and that they describe the class in some way. An attribute can take on a value defined by an enumerated domain. In most cases, a domain is simply a set of specific values. For example, assume that a class Automobile has an attribute color. The domain of values for color is {white, black, silver, gray, blue, red, yellow, green}. In more complex situations, the domain can be a class. Continuing the example, the class Automobile also has an attribute powerTrain that is itself a class. The class PowerTrain would contain attributes that describe the specific engine and transmission for the car. The features (values of the domain) can be augmented by assigning a default value (feature) to an attribute. For example, the color attribute defaults to white. It may also be useful to associate a probability with a particular feature by assigning {value, probability} pairs. Consider the color attribute for automobile. In some applications (e.g., manufacturing planning) it might be necessary to assign a probability to each of the colors (e.g., white and black are highly probable as automobile colors)"
"Justify with an example how once the function has been implemented with a method, the class should not provide another way to accomplish the same thing","Once the function has been implemented with a method, the class should not provide another way to accomplish the same thing .For example, the class VideoClip of the video editing software might have attributes start-point and end-point to indicate the start and end points of the clip (note that the raw video loaded into the system may be longer than the clip that is used)","For example, the class Scene defined for video-editing software is complete only if it contains all attributes and methods that can reasonably be associated with the creation of a video scene. Sufficiency ensures that the design class contains only those methods that are sufficient to achieve the intent of the class, no more and no less. Primitiveness. Methods associated with a design class should be focused on accomplishing one specific function for the class. Once the function has been implemented with a method, the class should not provide another way to accomplish the same thing. For example, the class VideoClip of the video editing software might have attributes start-point and end-point to indicate the start and end points of the clip (note that the raw video loaded into the system may be longer than the clip that is used). The methods, setStartPoint() and setEndPoint() provide the only means for establishing start and end points for the clip. 6:45 PM Page 870 High cohesion. A cohesive design class is single minded. That is, it has a small, focused set of responsibilities and single-mindedly applies attributes and methods to implement those responsibilities. For example, the class VideoClip of the video-editing software might contain a set of methods for editing the video clip. As long as each method focuses solely on attributes associated with the video clip, cohesion is maintained"
Justify with an example how approaches to programming have changed dramatically since the invention of the computer,"Approaches to programming have changed dramatically since the invention of the computer .For example, when computers were first invented, programming was done by manually toggling in the binary machine instructions by use of the front panel","Part I C++: The Next Step During the late 1970s and early 1980s, C became the dominant computer programming language, and it is still widely used today. Since C is a successful and useful language, you might ask why a need for something else existed. The answer is complexity. Throughout the history of programming, the increasing complexity of programs has driven the need for better ways to manage that complexity. C++ is a response to that need. To better understand why managing program complexity is fundamental to the creation of C++, consider the following. Approaches to programming have changed dramatically since the invention of the computer. For example, when computers were first invented, programming was done by manually toggling in the binary machine instructions by use of the front panel. As long as programs were just a few hundred instructions long, this approach worked. As programs grew, assembly language was invented so that a programmer could deal with larger, increasingly complex programs by using symbolic representations of the machine instructions. As programs continued to grow, high-level languages were introduced that gave the programmer more tools with which to handle complexity. The first widespread language was, of course, FORTRAN. While FORTRAN was an impressive first step, at the time it was hardly a language that encouraged clear and easy-to-understand programs. The 1960s gave birth to structured programming. This is the method of programming championed by languages such as C. The use of structured languages enabled programmers to write, for the first time, moderately complex programs fairly easily. However, even with structured programming methods, once a project reaches a certain size, its complexity exceeds what a programmer can manage. By the early 1980s, many projects were pushing the structured approach past its limits. To solve this problem, a new way to program was invented, called object-oriented programming (OOP)"
"Justify with an example how while it is true that Java was influenced by C++, it is not an enhanced version of C++","While it is true that Java was influenced by C++, it is not an enhanced version of C++ .For example, Java is neither upwardly nor downwardly compatible with C++","The Java designers knew that using the familiar syntax of C and echoing the object-oriented features of C++ would make their language appealing to the legions of experienced C/C++ programmers. In addition to the surface similarities, Java shares some of the other attributes that helped make C and C++ successful. First, Java was designed, tested, and refined by real, working programmers. It is a language grounded in the needs and experiences of the people who devised it. Thus, Java is a programmers language. Second, Java is cohesive and logically consistent. Third, except for those constraints imposed by the Internet environment, Java gives you, the programmer, full control. If you program well, your programs reflect it. If you program poorly, your programs reflect that, too. Put differently, Java is not a language with training wheels. It is a language for professional programmers. Because of the similarities between Java and C++, it is tempting to think of Java as simply the Internet version of C++. However, to do so would be a large mistake. Java has significant practical and philosophical differences. While it is true that Java was influenced by C++, it is not an enhanced version of C++. For example, Java is neither upwardly nor downwardly compatible with C++. Of course, the similarities with C++ are significant, and if you are a CompRef_2010 / Java: The Complete Reference, Twelfth Edition / Schildt / 126046-341-9 The Java Language C++ programmer, then you will feel right at home with Java. One other point: Java was not designed to replace C++. Java was designed to solve a certain set of problems. C++ was designed to solve a different set of problems. Both will coexist for many years to come. As mentioned at the start of this chapter, computer languages evolve for two reasons: to adapt to changes in environment and to implement advances in the art of programming"
Justify with an example how Java also embodies changes in the way that people approach the writing of programs,"Java also embodies changes in the way that people approach the writing of programs .For example, Java enhanced and refined the object-oriented paradigm used by C++, added integrated support for multithreading, and provided a library that simplified Internet access","As mentioned at the start of this chapter, computer languages evolve for two reasons: to adapt to changes in environment and to implement advances in the art of programming. The environmental change that prompted Java was the need for platform-independent programs destined for distribution on the Internet. However, Java also embodies changes in the way that people approach the writing of programs. For example, Java enhanced and refined the object-oriented paradigm used by C++, added integrated support for multithreading, and provided a library that simplified Internet access. In the final analysis, though, it was not the individual features of Java that made it so remarkable. Rather, it was the language as a whole. Java was the perfect response to the demands of the then newly emerging, highly distributed computing universe. Java was to Internet programming what C was to system programming: a revolutionary force that changed the world. The C# Connection The reach and power of Java continues to be felt throughout the world of computer language development. Many of its innovative features, constructs, and concepts have become part of the baseline for any new language. The success of Java is simply too important to ignore"
"Justify with an example how NET Framework, C# is closely related to Java","NET Framework, C# is closely related to Java .For example, both share the same general syntax, support distributed programming, and utilize the same object model","The C# Connection The reach and power of Java continues to be felt throughout the world of computer language development. Many of its innovative features, constructs, and concepts have become part of the baseline for any new language. The success of Java is simply too important to ignore. Perhaps the most important example of Javas influence is C#. Created by Microsoft to support the .NET Framework, C# is closely related to Java. For example, both share the same general syntax, support distributed programming, and utilize the same object model. There are, of course, differences between Java and C#, but the overall look and feel of these languages is very similar. This cross-pollination from Java to C# is the strongest testimonial to date that Java redefined the way we think about and use a computer language. How Java Impacted the Internet The Internet helped catapult Java to the forefront of programming, and Java, in turn, had a profound effect on the Internet. In addition to simplifying web programming in general, Java innovated a new type of networked program called the applet that changed the way the online world thought about content. Java also addressed some of the thorniest issues associated with the Internet: portability and security. Lets look more closely at each of these"
Justify with an example how at the core of the problem is the fact that malicious code can cause its damage because it has gained unauthorized access to system resources,"At the core of the problem is the fact that malicious code can cause its damage because it has gained unauthorized access to system resources .For example, a virus program might gather private information, such as credit card numbers, bank account balances, and passwords, by searching the contents of your computers local file system","Part I Security As desirable as dynamic, networked programs are, they can also present serious problems in the areas of security and portability. Obviously, a program that downloads and executes on the client computer must be prevented from doing harm. It must also be able to run in a variety of different environments and under different operating systems. As you will see, Java solved these problems in an effective and elegant way. Lets look a bit more closely at each, beginning with security. As you are likely aware, every time you download a normal program, you are taking a risk, because the code you are downloading might contain a virus, Trojan horse, or other harmful code. At the core of the problem is the fact that malicious code can cause its damage because it has gained unauthorized access to system resources. For example, a virus program might gather private information, such as credit card numbers, bank account balances, and passwords, by searching the contents of your computers local file system. In order for Java to enable programs to be safely downloaded and executed on the client computer, it was necessary to prevent them from launching such an attack. Java achieved this protection by enabling you to confine an application to the Java execution environment and prevent it from accessing other parts of the computer"
Justify with an example how servlets are used to create dynamically generated content that is then served to the client,"Servlets are used to create dynamically generated content that is then served to the client .For example, an online store might use a servlet to look up the price for an item in a database","At the time of this writing, there are a number of new Java features on the horizon. Because of the faster release schedule, it is very likely that several of them will be added to Java over the next few years. You will want to review the information and release notes provided by each six-month release in detail. It is truly an exciting time to be a Java programmer! Servlets: Java on the Server Side Client side code is just one half of the client/server equation. Not long after the initial release of Java, it became obvious that Java would also be useful on the server side. One result was the servlet. A servlet is a small program that executes on the server. Servlets are used to create dynamically generated content that is then served to the client. For example, an online store might use a servlet to look up the price for an item in a database. The price information is then used to dynamically generate a web page that is sent to the browser. Although dynamically generated content was available through mechanisms such as CGI (Common Gateway Interface), the servlet offered several advantages, including increased performance. Because servlets (like all Java programs) are compiled into bytecode and executed by the JVM, they are highly portable. Thus, the same servlet can be used in a variety of different server environments. The only requirements are that the server support the JVM and a servlet container. Today, server-side code in general constitutes a major use of Java"
"Justify with an example how memory management can be a difficult, tedious task in traditional programming environments","Memory management can be a difficult, tedious task in traditional programming environments .For example, in C/C++, the programmer will often manually allocate and free dynamic memory","Robust The multiplatformed environment of the Web places extraordinary demands on a program, because the program must execute reliably in a variety of systems. Thus, the ability to 21/09/21 5:35 PM 14PART I create robust programs was given a high priority in the design of Java. To gain reliability, Java restricts you in a few key areas to force you to find your mistakes early in program development. At the same time, Java frees you from having to worry about many of the most common causes of programming errors. Because Java is a strictly typed language, it checks your code at compile time. However, it also checks your code at run time. Many hard-totrack-down bugs that often turn up in hard-to-reproduce run-time situations are simply impossible to create in Java. Knowing that what you have written will behave in a predictable way under diverse conditions is a key feature of Java. To better understand how Java is robust, consider two of the main reasons for program failure: memory management mistakes and mishandled exceptional conditions (that is, run-time errors). Memory management can be a difficult, tedious task in traditional programming environments. For example, in C/C++, the programmer will often manually allocate and free dynamic memory. This sometimes leads to problems, because programmers will either forget to free memory that has been previously allocated or, worse, try to free some memory that another part of their code is still using. Java virtually eliminates these problems by managing memory allocation and deallocation for you. (In fact, deallocation is completely automatic, because Java provides garbage collection for unused objects.) Exceptional conditions in traditional environments often arise in situations such as division by zero or file not found, and they must be managed with clumsy and hard-to-read constructs. Java helps in this area by providing object-oriented exception handling. In a well-written Java program, all run-time errors canand shouldbe managed by your program. Multithreaded Java was designed to meet the real-world requirement of creating interactive, networked programs. To accomplish this, Java supports multithreaded programming, which allows you to write programs that do many things simultaneously. The Java run-time system comes with an elegant yet sophisticated solution for multiprocess synchronization that enables you to construct smoothly running interactive systems. Javas easy-to-use approach to multithreading allows you to think about the specific behavior of your program, not the multitasking subsystem"
Justify with an example how humans manage complexity through abstraction,"Humans manage complexity through abstraction .For example, people do not think of a car as a set of tens of thousands of individual parts","To manage increasing complexity, the second approach, called object-oriented programming, was conceived. Object-oriented programming organizes a program around its data (that is, objects) and a set of well-defined interfaces to that data. An object-oriented program can be characterized as data controlling access to code. As you will see, by switching the controlling entity to data, you can achieve several organizational benefits. 02-ch02.indd 21 CompRef_2010 / Java: The Complete Reference, Twelfth Edition / Schildt / 126046-341-9 The Java Language Abstraction An essential element of object-oriented programming is abstraction. Humans manage complexity through abstraction. For example, people do not think of a car as a set of tens of thousands of individual parts. They think of it as a well-defined object with its own unique behavior. This abstraction allows people to use a car to drive to the grocery store without being overwhelmed by the complexity of the individual parts. They can ignore the details of how the engine, transmission, and braking systems work. Instead, they are free to utilize the object as a whole. A powerful way to manage abstraction is through the use of hierarchical classifications"
"Justify with an example how further, what occurs inside the transmission does not affect objects outside the transmission","Further, what occurs inside the transmission does not affect objects outside the transmission .For example, shifting gears does not turn on the headlights! Because an automatic transmission is encapsulated, dozens of car manufacturers can implement one in any way they please","The Three OOP Principles All object-oriented programming languages provide mechanisms that help you implement the object-oriented model. They are encapsulation, inheritance, and polymorphism. Lets take a look at these concepts now. Encapsulation is the mechanism that binds together code and the data it manipulates, and keeps both safe from outside interference and misuse. One way to think about encapsulation is as a protective wrapper that prevents the code and data from being arbitrarily accessed by other code defined outside the wrapper. Access to the code and data inside the wrapper is tightly controlled through a well-defined interface. To relate this to the real world, consider the automatic transmission on an automobile. It encapsulates hundreds of bits of information about your engine, such as how much you are accelerating, the pitch of the surface you are on, and the position of the shift lever. You, as the user, have only one method of affecting this complex encapsulation: by moving the gear-shift lever. You cant affect the transmission by using the turn signal or windshield wipers, for example. Thus, the gear-shift lever is a 22/09/21 6:22 PM An Overview of Java well-defined (indeed, unique) interface to the transmission. Further, what occurs inside the transmission does not affect objects outside the transmission. For example, shifting gears does not turn on the headlights! Because an automatic transmission is encapsulated, dozens of car manufacturers can implement one in any way they please. However, from the drivers point of view, they all work the same. This same idea can be applied to programming. The power of encapsulated code is that everyone knows how to access it and thus can use it regardless of the implementation detailsand without fear of unexpected side effects. In Java, the basis of encapsulation is the class. Although the class will be examined in great detail later in this book, the following brief discussion will be helpful now. A class defines the structure and behavior (data and code) that will be shared by a set of objects. Each object of a given class contains the structure and behavior defined by the class, as if it were stamped out by a mold in the shape of the class. For this reason, objects are sometimes referred to as instances of a class. Thus, a class is a logical construct; an object has physical reality"
"Justify with an example how the final attribute, polymorphism, is clearly reflected in the ability of car manufacturers to offer a wide array of options on basically the same vehicle","The final attribute, polymorphism, is clearly reflected in the ability of car manufacturers to offer a wide array of options on basically the same vehicle .For example, you can get an antilock braking system or traditional brakes, power or rack-and-pinion steering, and a 4-, 6-, or 8-cylinder engine, or an EV","People interface with encapsulated features on cars all the time. The brake and gas pedals hide an incredible array of complexity with an interface so simple you can operate them with your feet! The implementation of the engine, the style of brakes, and the size of the tires have no effect on how you interface with the class definition of the pedals. The final attribute, polymorphism, is clearly reflected in the ability of car manufacturers to offer a wide array of options on basically the same vehicle. For example, you can get an antilock braking system or traditional brakes, power or rack-and-pinion steering, and a 4-, 6-, or 8-cylinder engine, or an EV. Either way, you will still press the brake pedal to stop, turn the steering wheel to change direction, and press the accelerator when you want to move. The same interface can be used to control a number of different implementations. As you can see, it is through the application of encapsulation, inheritance, and polymorphism that the individual parts are transformed into the object known as a car"
"Justify with an example how once a block of code has been created, it becomes a logical unit that can be used any place that a single statement can","Once a block of code has been created, it becomes a logical unit that can be used any place that a single statement can .For example, a block can be a target for Javas if and for statements","Using Blocks of Code Java allows two or more statements to be grouped into blocks of code, also called code blocks. This is done by enclosing the statements between opening and closing curly braces. Once a block of code has been created, it becomes a logical unit that can be used any place that a single statement can. For example, a block can be a target for Javas if and for statements. Consider this if statement: if(x < y) { // begin a block x = y; y = 0; } // end of block Here, if x is less than y, then both statements inside the block will be executed. Thus, the two statements inside the block form a logical unit, and one statement cannot execute without the other also executing. The key point here is that whenever you need to logically link two or more statements, you do so by creating a block"
"Justify with an example how because of Javas portability requirement, all data types have a strictly defined range","Because of Javas portability requirement, all data types have a strictly defined range .For example, an int is always 32 bits, regardless of the particular platform","The primitive types are defined to have an explicit range and mathematical behavior. Languages such as C and C++ allow the size of an integer to vary based upon the dictates of the execution environment. However, Java is different. Because of Javas portability requirement, all data types have a strictly defined range. For example, an int is always 32 bits, regardless of the particular platform. This allows programs to be written that are guaranteed to run without porting on any machine architecture. While strictly specifying the size of an integer may cause a small loss of performance in some environments, it is necessary in order to achieve portability. Lets look at each type of data in turn"
"Justify with an example how floating-Point Types Floating-point numbers, also known as real numbers, are used when evaluating expressions that require fractional precision","Floating-Point Types Floating-point numbers, also known as real numbers, are used when evaluating expressions that require fractional precision .For example, calculations such as square root, or transcendentals such as sine and cosine, result in a value whose precision requires a floatingpoint type","class Light { public static void main(String[] args) { int lightspeed; long days; long seconds; long distance; // approximate speed of light in miles per second lightspeed = 186000; days = 1000; // specify number of days here seconds = days * 24 * 60 * 60; // convert to seconds distance = lightspeed * seconds; // compute distance System.out.print(""In "" + days); System.out.print("" days light will travel about ""); System.out.println(distance + "" miles.""); } } 22/09/21 6:22 PM 42PART I This program generates the following output: In 1000 days light will travel about 16070400000000 miles. Floating-Point Types Floating-point numbers, also known as real numbers, are used when evaluating expressions that require fractional precision. For example, calculations such as square root, or transcendentals such as sine and cosine, result in a value whose precision requires a floatingpoint type. Java implements the standard (IEEE754) set of floating-point types and operators. There are two kinds of floating-point types, float and double, which represent single- and double-precision numbers, respectively. Their width and ranges are shown here: Name Approximate Range 32 float float The type float specifies a single-precision value that uses 32 bits of storage. Single precision is faster on some processors and takes half as much space as double precision, but will become imprecise when the values are either very large or very small. Variables of type float are useful when you need a fractional component, but dont require a large degree of precision. For example, float can be useful when representing dollars and cents. Here are some example float variable declarations: float hightemp, lowtemp; double Double precision, as denoted by the double keyword, uses 64 bits to store a value. Double precision is actually faster than single precision on some modern processors that have been optimized for high-speed mathematical calculations. All transcendental math functions, such as sin( ), cos( ), and sqrt( ), return double values. When you need to maintain accuracy over many iterative calculations, or are manipulating large-valued numbers, double is the best choice"
Justify with an example how scopes can be nested,"Scopes can be nested .For example, each time you create a block of code, you are creating a new, nested scope","Indeed, the scope rules provide the foundation for encapsulation. A variable declared within a block is called a local variable. Scopes can be nested. For example, each time you create a block of code, you are creating a new, nested scope. When this occurs, the outer scope encloses the inner scope. This means that objects declared in the outer scope will be visible to code within the inner scope. However, the reverse is not true. Objects declared within the inner scope will not be visible outside it"
"Justify with an example how if the two types are compatible, then Java will perform the conversion automatically","If the two types are compatible, then Java will perform the conversion automatically .For example, it is always possible to assign an int value to a long variable","class LifeTime { public static void main(String[] args) { int x; for(x = 0; x < 3; x++) { int y = -1; // y is initialized each time block is entered System.out.println(""y is: "" + y); // this always prints -1 y = 100; System.out.println(""y is now: "" + y); } } } The output generated by this program is shown here: y y y y y y is: -1 is now: 100 is: -1 is now: 100 is: -1 is now: 100 As you can see, y is reinitialized to 1 each time the inner for loop is entered. Even though it is subsequently assigned the value 100, this value is lost. 22/09/21 6:22 PM 52PART I One last point: Although blocks can be nested, you cannot declare a variable to have the same name as one in an outer scope. For example, the following program is illegal: // This program will not compile class ScopeErr { public static void main(String[] args) { int bar = 1; { // creates a new scope int bar = 2; // Compile-time error bar already defined! } } } Type Conversion and Casting If you have previous programming experience, then you already know that it is fairly common to assign a value of one type to a variable of another type. If the two types are compatible, then Java will perform the conversion automatically. For example, it is always possible to assign an int value to a long variable. However, not all types are compatible, and thus, not all type conversions are implicitly allowed. For instance, there is no automatic conversion defined from double to byte. Fortunately, it is still possible to obtain a conversion between incompatible types. To do so, you must use a cast, which performs an explicit conversion between incompatible types. Lets look at both automatic type conversions and casting. Javas Automatic Conversions When one type of data is assigned to another type of variable, an automatic type conversion will take place if the following two conditions are met: The two types are compatible"
"Justify with an example how in an expression, the precision required of an intermediate value will sometimes exceed the range of either operand","In an expression, the precision required of an intermediate value will sometimes exceed the range of either operand .For example, examine the following expression: byte a = 40; byte b = 50; byte c = 100; int d = a * b / c; The result of the intermediate term a * b easily exceeds the range of either of its byte operands","d and b 323.142 67 22/09/21 6:22 PM 54PART I Lets look at each conversion. When the value 257 is cast into a byte variable, the result is the remainder of the division of 257 by 256 (the range of a byte), which is 1 in this case. When the d is converted to an int, its fractional component is lost. When d is converted to a byte, its fractional component is lost, and the value is reduced modulo 256, which in this case is 67. Automatic Type Promotion in Expressions In addition to assignments, there is another place where certain type conversions may occur: in expressions. To see why, consider the following. In an expression, the precision required of an intermediate value will sometimes exceed the range of either operand. For example, examine the following expression: byte a = 40; byte b = 50; byte c = 100; int d = a * b / c; The result of the intermediate term a * b easily exceeds the range of either of its byte operands. To handle this kind of problem, Java automatically promotes each byte, short, or char operand to int when evaluating an expression. This means that the subexpression a*b is performed using integersnot bytes. Thus, 2,000, the result of the intermediate expression, 50 * 40, is legal even though a and b are both specified as type byte. As useful as the automatic promotions are, they can cause confusing compile-time errors. For example, this seemingly correct code causes a problem: byte b = 50; b = b * 2; // Error! Cannot assign an int to a byte! The code is attempting to store 50 * 2, a perfectly valid byte value, back into a byte variable. However, because the operands were automatically promoted to int when the expression was evaluated, the result has also been promoted to int. Thus, the result of the expression is now of type int, which cannot be assigned to a byte without the use of a cast"
"Justify with an example how thus, the element type for the array determines what type of data the array will hold","Thus, the element type for the array determines what type of data the array will hold .For example, the following declares an array named month_days with the type array of int: int[] month_days; Although this declaration establishes the fact that month_days is an array variable, no array actually exists","Arrays An array is a group of like-typed variables that are referred to by a common name. Arrays of any type can be created and may have one or more dimensions. A specific element in an array is accessed by its index. Arrays offer a convenient means of grouping related information. One-Dimensional Arrays A one-dimensional array is, essentially, a list of like-typed variables. To create an array, you first must create an array variable of the desired type. The general form of a one-dimensional array declaration is type[ ] var-name; Here, type declares the element type (also called the base type) of the array. The element type determines the data type of each element that comprises the array. Thus, the element type for the array determines what type of data the array will hold. For example, the following declares an array named month_days with the type array of int: int[] month_days; Although this declaration establishes the fact that month_days is an array variable, no array actually exists. To link month_days with an actual, physical array of integers, you 22/09/21 6:22 PM 56PART I must allocate one using new and assign it to month_days. new is a special operator that allocates memory. You will look more closely at new in a later chapter, but you need to use it now to allocate memory for arrays. The general form of new as it applies to one-dimensional arrays appears as follows: array-var = new type [size]; Here, type specifies the type of data being allocated, size specifies the number of elements in the array, and array-var is the array variable that is linked to the array. That is, to use new to allocate an array, you must specify the type and number of elements to allocate. The elements in the array allocated by new will automatically be initialized to zero (for numeric types), false (for boolean), or null (for reference types, which are described in a later chapter). This example allocates a 12-element array of integers and links them to month_days: month_days = new int[12]; After this statement executes, month_days will refer to an array of 12 integers. Further, all elements in the array will be initialized to zero"
Justify with an example how irregular arrays can be used effectively in some situations,"However, irregular arrays can be used effectively in some situations .For example, if you need a very large two-dimensional array that is sparsely populated (that is, one in which not all of the elements will be used), then an irregular array might be a perfect solution","int[][] twoD[0] twoD[1] twoD[2] twoD[3] twoD = new int[4][]; = new int[5]; = new int[5]; = new int[5]; = new int[5]; While there is no advantage to individually allocating the second dimension arrays in this situation, there may be in others. For example, when you allocate dimensions individually, you do not need to allocate the same number of elements for each dimension. As stated earlier, since multidimensional arrays are actually arrays of arrays, the length of each array is under your control. For example, the following program creates a two-dimensional array in which the sizes of the second dimension are unequal: // Manually allocate differing size second dimensions. class TwoDAgain { public static void main(String[] args) { int[][] twoD = new int[4][]; twoD[0] = new int[1]; twoD[1] = new int[2]; twoD[2] = new int[3]; twoD[3] = new int[4]; int i, j, k = 0; 22/09/21 6:22 PM 60PART I for(i=0; i<4; i++) for(j=0; j<i+1; j++) { twoD[i][j] = k; k++; } for(i=0; i<4; i++) { for(j=0; j<i+1; j++) System.out.print(twoD[i][j] + "" ""); System.out.println(); } } } This program generates the following output: 1 2 6 7 8 9 The use of uneven (or irregular) multidimensional arrays may not be appropriate for many applications, because it runs contrary to what people expect to find when a multidimensional array is encountered. However, irregular arrays can be used effectively in some situations. For example, if you need a very large two-dimensional array that is sparsely populated (that is, one in which not all of the elements will be used), then an irregular array might be a perfect solution. It is possible to initialize multidimensional arrays. To do so, simply enclose each dimensions initializer within its own set of curly braces. The following program creates a matrix where each element contains the product of the row and column indexes. Also notice that you can use expressions as well as literal values inside of array initializers"
Justify with an example how local variable type inference offers a number of advantages,"Local variable type inference offers a number of advantages .For example, it can streamline code by eliminating the need to redundantly specify a variables type when it can be inferred from its initializer","Introducing Type Inference with Local Variables Not long ago, a new feature called local variable type inference was added to the Java language. To begin, lets review two important aspects of variables. First, all variables in Java must be declared prior to their use. Second, a variable can be initialized with a value when it is declared. Furthermore, when a variable is initialized, the type of the initializer must be the same as (or convertible to) the declared type of the variable. Thus, in principle, it would not be necessary to specify an explicit type for an initialized variable because it could be inferred by the type of its initializer. Of course, in the past, such inference was not supported, and all variables required an explicitly declared type, whether they were initialized or not. Today, that situation has changed. 22/09/21 6:22 PM Data Types, Variables, and Arrays Beginning with JDK 10, it is now possible to let the compiler infer the type of a local variable based on the type of its initializer, thus avoiding the need to explicitly specify the type. Local variable type inference offers a number of advantages. For example, it can streamline code by eliminating the need to redundantly specify a variables type when it can be inferred from its initializer. It can simplify declarations in cases in which the type name is quite lengthy, such as can be the case with some class names. It can also be helpful when a type is difficult to discern or cannot be denoted. (An example of a type that cannot be denoted is the type of an anonymous class, discussed in Chapter 25.) Furthermore, local variable type inference has become a common part of the contemporary programming environment. Its inclusion in Java helps keep Java up-to-date with evolving trends in language design. To support local variable type inference, the context-sensitive keyword var was added. To use local variable type inference, the variable must be declared with var as the type name and it must include an initializer. For example, in the past you would declare a local double variable called avg that is initialized with the value 10.0, as shown here: Part I double avg = 10.0; Using type inference, this declaration can now also be written like this: var avg = 10.0; In both cases, avg will be of type double. In the first case, its type is explicitly specified. In the second, its type is inferred as double because the initializer 10.0 is of type double"
"Justify with an example how however, when used in most other places, var is simply a user-defined identifier with no special meaning","However, when used in most other places, var is simply a user-defined identifier with no special meaning .For example, the following declaration is still valid: int var = 1; In this case, the type is explicitly specified as int and var is the name of the variable being declared","To use local variable type inference, the variable must be declared with var as the type name and it must include an initializer. For example, in the past you would declare a local double variable called avg that is initialized with the value 10.0, as shown here: Part I double avg = 10.0; Using type inference, this declaration can now also be written like this: var avg = 10.0; In both cases, avg will be of type double. In the first case, its type is explicitly specified. In the second, its type is inferred as double because the initializer 10.0 is of type double. As mentioned, var is context-sensitive. When it is used as the type name in the context of a local variable declaration, it tells the compiler to use type inference to determine the type of the variable being declared based on the type of the initializer. Thus, in a local variable declaration, var is a placeholder for the actual, inferred type. However, when used in most other places, var is simply a user-defined identifier with no special meaning. For example, the following declaration is still valid: int var = 1; In this case, the type is explicitly specified as int and var is the name of the variable being declared. Even though it is context-sensitive, there are a few places in which the use of var is illegal. It cannot be used as the name of a class, for example. The following program puts the preceding discussion into action: // A simple demonstration of local variable type inference"
Justify with an example how it is important to emphasize that var can be used to declare a variable only when that variable is initialized,"It is important to emphasize that var can be used to declare a variable only when that variable is initialized .For example, the following statement is incorrect: var counter; // Wrong! Initializer required. Also, remember that var can be used only to declare local variables","Notice that neither var nor myArray has brackets. Instead, the type of myArray is inferred to be int[ ]. Furthermore, you cannot use brackets on the left side of a var declaration. Thus, both of these declarations are invalid: var[] myArray = new int[10]; // Wrong var myArray[] = new int[10]; // Wrong In the first line, an attempt is made to bracket var. In the second, an attempt is made to bracket myArray. In both cases, the use of the brackets is wrong because the type is inferred from the type of the initializer. It is important to emphasize that var can be used to declare a variable only when that variable is initialized. For example, the following statement is incorrect: var counter; // Wrong! Initializer required. Also, remember that var can be used only to declare local variables. It cannot be used when declaring instance variables, parameters, or return types, for example"
Justify with an example how you can use an object of type String as an argument to println( ),"You can use an object of type String as an argument to println( ) .For example, consider the following fragment: String str = ""this is a test""; System.out.println(str); Here, str is an object of type String","The String type is used to declare string variables. You can also declare arrays of strings. A quoted string constant can be assigned to a String variable. A variable of type String can be assigned to another variable of type String. You can use an object of type String as an argument to println( ). For example, consider the following fragment: String str = ""this is a test""; System.out.println(str); Here, str is an object of type String. It is assigned the string ""this is a test"". This string is displayed by the println( ) statement. As you will see later, String objects have many special features and attributes that make them quite powerful and easy to use. However, for the next few chapters, you will be using them only in their simplest form"
"Justify with an example how in postfix form, the previous value is obtained for use in the expression, and then the operand is modified","In postfix form, the previous value is obtained for use in the expression, and then the operand is modified .For example: is equivalent to x = 42; y = ++x; In this case, y is set to 43 as you would expect, because the increment occurs before x is assigned to y","class OpEquals { public static void main(String[] args) { int a = 1; int b = 2; int c = 3; a += 5; b *= 4; c += a * b; c %= 6; System.out.println(""a = "" + a); System.out.println(""b = "" + b); System.out.println(""c = "" + c); } } The output of this program is shown here: a = 6 b = 8 c = 3 Increment and Decrement The ++ and the are Javas increment and decrement operators. They were introduced in Chapter 2. Here they will be discussed in detail. As you will see, they have some special properties that make them quite interesting. Lets begin by reviewing precisely what the increment and decrement operators do. The increment operator increases its operand by one. The decrement operator decreases its operand by one. For example, this statement: x = x + 1; can be rewritten like this by use of the increment operator: x++; Similarly, this statement: x = x - 1; 21/09/21 5:39 PM These operators are unique in that they can appear both in postfix form, where they follow the operand as just shown, and prefix form, where they precede the operand. In the foregoing examples, there is no difference between the prefix and postfix forms. However, when the increment and/or decrement operators are part of a larger expression, then a subtle, yet powerful, difference between these two forms appears. In the prefix form, the operand is incremented or decremented before the value is obtained for use in the expression. In postfix form, the previous value is obtained for use in the expression, and then the operand is modified. For example: is equivalent to x = 42; y = ++x; In this case, y is set to 43 as you would expect, because the increment occurs before x is assigned to y. Thus, the line y = ++x; is the equivalent of these two statements: x = x + 1; y = x; However, when written like this, x = 42; y = x++; the value of x is obtained before the increment operator is executed, so the value of y is 42. Of course, in both cases x is set to 43. Here, the line y = x++; is the equivalent of these two statements: y = x; x = x + 1; The following program demonstrates the increment operator"
Justify with an example how because Java uses twos complement to store negative numbersand because all integers are signed values in Javaapplying the bitwise operators can easily produce unexpected results,"Because Java uses twos complement to store negative numbersand because all integers are signed values in Javaapplying the bitwise operators can easily produce unexpected results .For example, turning on the high-order bit will cause the resulting value to be interpreted as a negative number, whether this is what you intended or not","The reason Java (and most other computer languages) uses twos complement is easy to see when you consider the issue of zero crossing. Assuming a byte value, zero is represented by 00000000. In ones complement, simply inverting all of the bits creates 11111111, which creates negative zero. The trouble is that negative zero is invalid in integer math. This problem is solved by using twos complement to represent negative values. When using twos complement, 1 is added to the complement, producing 100000000. This produces a 1 bit too far to the left to fit back into the byte value, resulting in the desired behavior, where 0 is the same as 0, and 11111111 is the encoding for 1. Although we used a byte value in the preceding example, the same basic principle applies to all of Javas integer types. Because Java uses twos complement to store negative numbersand because all integers are signed values in Javaapplying the bitwise operators can easily produce unexpected results. For example, turning on the high-order bit will cause the resulting value to be interpreted as a negative number, whether this is what you intended or not. To avoid unpleasant surprises, just remember that the high-order bit determines the sign of an integer no matter how that high-order bit gets set. The Bitwise Logical Operators The bitwise logical operators are &, |, ^, and ~. The following table shows the outcome of each operation. In the discussion that follows, keep in mind that the bitwise operators are applied to each individual bit within each operand"
"Justify with an example how as stated, the result produced by a relational operator is a boolean value","As stated, the result produced by a relational operator is a boolean value .For example, the following code fragment is perfectly valid: int a = 4; int b = 1; boolean c = a < b; In this case, the result of a<b (which is false) is stored in c","That is, only integer, floating-point, and character operands may be compared to see which is greater or less than the other. As stated, the result produced by a relational operator is a boolean value. For example, the following code fragment is perfectly valid: int a = 4; int b = 1; boolean c = a < b; In this case, the result of a<b (which is false) is stored in c. If you are coming from a C/C++ background, please note the following. In C/C++, these types of statements are very common: int done; //.."
Justify with an example how this is very useful when the right-hand operand depends on the value of the left one in order to function properly,"This is very useful when the right-hand operand depends on the value of the left one in order to function properly .For example, the following code fragment shows how you can take advantage of short-circuit logical evaluation to be sure that a division operation will be valid before evaluating it: Short-Circuit Logical Operators Since the short-circuit form of AND (&&) is used, there is no risk of causing a run-time exception when denom is zero","Operator & | ^ || && ! &= |= ^= 21/09/21 5:39 PM 82PART I Operator == != ?: The logical Boolean operators, &, |, and ^, operate on boolean values in the same way that they operate on the bits of an integer. The logical ! operator inverts the Boolean state: !true == false and !false == true. The following table shows the effect of each logical operation: A A|B A^B False False False True True True False True True True True False Here is a program that is almost the same as the BitLogic example shown earlier, but it operates on boolean logical values instead of binary bits: // Demonstrate the boolean logical operators. class BoolLogic { public static void main(String[] args) { boolean a = true; boolean b = false; boolean c = a | b; boolean d = a & b; boolean e = a ^ b; boolean f = (!a & b) | (a & !b); boolean g = !a; System.out.println("" a = "" + a); System.out.println("" b = "" + b); System.out.println("" a|b = "" + c); System.out.println("" a&b = "" + d); System.out.println("" a^b = "" + e); System.out.println(""!a&b|a&!b = "" + f); System.out.println("" !a = "" + g); } } After running this program, you will see that the same logical rules apply to boolean values as they did to bits. As you can see from the following output, the string representation of a Java boolean value is one of the literal values true or false: a b a|b a&b a^b !a&b|a&!b !a = = = = = = = true false true false true true false CompRef_2010 / Java: The Complete Reference, Twelfth Edition / Schildt / 126046-341-9 Operators Java provides two interesting Boolean operators not found in some other computer languages. These are secondary versions of the Boolean AND and OR operators, and are commonly known as short-circuit logical operators. As you can see from the preceding table, the OR operator results in true when A is true, no matter what B is. Similarly, the AND operator results in false when A is false, no matter what B is. If you use the || and && forms, rather than the | and & forms of these operators, Java will not bother to evaluate the right-hand operand when the outcome of the expression can be determined by the left operand alone. This is very useful when the right-hand operand depends on the value of the left one in order to function properly. For example, the following code fragment shows how you can take advantage of short-circuit logical evaluation to be sure that a division operation will be valid before evaluating it: Short-Circuit Logical Operators Since the short-circuit form of AND (&&) is used, there is no risk of causing a run-time exception when denom is zero. If this line of code were written using the single & version of AND, both sides would be evaluated, causing a run-time exception when denom is zero. It is standard practice to use the short-circuit forms of AND and OR in cases involving Boolean logic, leaving the single-character versions exclusively for bitwise operations"
Justify with an example how being able to use strings in a switch statement streamlines many situations,"Being able to use strings in a switch statement streamlines many situations .For example, using a string-based switch is an improvement over using the equivalent sequence of if/else statements","class StringSwitch { public static void main(String[] args) { String str = ""two""; switch(str) { case ""one"": System.out.println(""one""); break; case ""two"": System.out.println(""two""); break; case ""three"": 21/09/21 5:40 PM 94PART I System.out.println(""three""); break; default: System.out.println(""no match""); break; } } } As you would expect, the output from the program is two The string contained in str (which is ""two"" in this program) is tested against the case constants. When a match is found (as it is in the second case), the code sequence associated with that sequence is executed. Being able to use strings in a switch statement streamlines many situations. For example, using a string-based switch is an improvement over using the equivalent sequence of if/else statements. However, switching on strings can be more expensive than switching on integers. Therefore, it is best to switch on strings only in cases in which the controlling data is already in string form. In other words, dont use strings in a switch unnecessarily"
Justify with an example how you can intentionally create an infinite loop (a loop that never terminates) if you leave all three parts of the for empty,You can intentionally create an infinite loop (a loop that never terminates) if you leave all three parts of the for empty .For example: for( ; ; ) { // ... } This loop will run forever because there is no condition under which it will terminate,"21/09/21 5:40 PM Control Statements For example, if the initial condition is set through a complex expression elsewhere in the program or if the loop control variable changes in a nonsequential manner determined by actions that occur within the body of the loop, it may be appropriate to leave these parts of the for empty. Here is one more for loop variation. You can intentionally create an infinite loop (a loop that never terminates) if you leave all three parts of the for empty. For example: for( ; ; ) { // ... } This loop will run forever because there is no condition under which it will terminate"
Justify with an example how the iteration variable in the for loop must be compatible with the type of array being obtained,"the iteration variable in the for loop must be compatible with the type of array being obtained .For example, in the case of a two-dimensional array, the iteration variable must be a reference to a one-dimensional array","There is one important point to understand about the for-each style loop. Its iteration variable is read-only as it relates to the underlying array. An assignment to the iteration variable has no effect on the underlying array. In other words, you cant change the contents of the array by assigning the iteration variable a new value. For example, consider this program: // The for-each loop is essentially read-only. class NoChange { public static void main(String[] args) { int[] nums = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; for(int x: nums) { System.out.print(x + "" ""); x = x * 10; // no effect on nums } System.out.println(); for(int x : nums) System.out.print(x + "" ""); System.out.println(); } } 21/09/21 5:40 PM 106PART I The first for loop increases the value of the iteration variable by a factor of 10. However, this assignment has no effect on the underlying array nums, as the second for loop illustrates. The output, shown here, proves this point: 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 The enhanced version of the for also works on multidimensional arrays. Remember, however, that in Java, multidimensional arrays consist of arrays of arrays. (For example, a two-dimensional array is an array of one-dimensional arrays.) This is important when iterating over a multidimensional array, because each iteration obtains the next array, not an individual element. Furthermore, the iteration variable in the for loop must be compatible with the type of array being obtained. For example, in the case of a two-dimensional array, the iteration variable must be a reference to a one-dimensional array. In general, when using the for-each for to iterate over an array of N dimensions, the objects obtained will be arrays of N1 dimensions. To understand the implications of this, consider the following program. It uses nested for loops to obtain the elements of a two-dimensional array in row-order, from first to last"
Justify with an example how there are a few places where the goto is a valuable and legitimate construct for flow control,"There are a few places where the goto is a valuable and legitimate construct for flow control .For example, the goto can be useful when you are exiting from a deeply nested set of loops","In addition to its uses with the switch statement and loops, the break statement can also be employed by itself to provide a civilized form of the goto statement. Java does not have a goto statement because it provides a way to branch in an arbitrary and unstructured manner. This usually makes goto-ridden code hard to understand and hard to maintain. It also prohibits certain compiler optimizations. There are, however, a few places where the goto is a valuable and legitimate construct for flow control. For example, the goto can be useful when you are exiting from a deeply nested set of loops. To handle such situations, Java defines an expanded form of the break statement. By using this form of break, you can, for example, break out of one or more blocks of code. These blocks need not be part of a loop or a switch. They can be any block. Further, you can specify precisely where execution will resume, because this form of break works with a label. As you will see, break gives you the benefits of a goto without its problems. 21/09/21 5:40 PM 112PART I The general form of the labeled break statement is shown here: break label; Most often, label is the name of a label that identifies a block of code. This can be a standalone block of code but it can also be a block that is the target of another statement. When this form of break executes, control is transferred out of the named block. The labeled block must enclose the break statement, but it does not need to be the immediately enclosing block. This means, for example, that you can use a labeled break statement to exit from a set of nested blocks. But you cannot use break to transfer control out of a block that does not enclose the break statement"
Justify with an example how the dot operator links the name of the object with the name of an instance variable,"The dot operator links the name of the object with the name of an instance variable .For example, to assign the width variable of mybox the value 100, you would use the following statement: mybox.width = 100; This statement tells the compiler to assign the copy of width that is contained within the mybox object the value of 100","To actually create a Box object, you will use a statement like the following: After this statement executes, mybox will refer to an instance of Box. Thus, it will have physical reality. For the moment, dont worry about the details of this statement. As mentioned earlier, each time you create an instance of a class, you are creating an object that contains its own copy of each instance variable defined by the class. Thus, every Box object will contain its own copies of the instance variables width, height, and depth. To access these variables, you will use the dot (.) operator. The dot operator links the name of the object with the name of an instance variable. For example, to assign the width variable of mybox the value 100, you would use the following statement: mybox.width = 100; This statement tells the compiler to assign the copy of width that is contained within the mybox object the value of 100. In general, you use the dot operator to access both the instance variables and the methods within an object. One other point: Although commonly referred to as the dot operator, the formal specification for Java categorizes the . as a separator. However, since the use of the term dot operator is widespread, it is used in this book"
Justify with an example how there are two important things to understand about returning values: specified by the method,"There are two important things to understand about returning values: specified by the method .For example, if the return type of some method is boolean, you could not return an integer. The variable receiving the value returned by a method (such as vol, in this case) must also be compatible with the return type specified for the method. One more point: The preceding program can be written a bit more efficiently because there is actually no need for the vol variable","class Box { double width; double height; double depth; // compute and return volume double volume() { return width * height * depth; } } class BoxDemo4 { public static void main(String[] args) { Box mybox1 = new Box(); Box mybox2 = new Box(); double vol; // assign values to mybox1's instance variables mybox1.width = 10; mybox1.height = 20; mybox1.depth = 15; /* assign different values to mybox2's instance variables */ mybox2.width = 3; mybox2.height = 6; mybox2.depth = 9; // get volume of first box vol = mybox1.volume(); System.out.println(""Volume is "" + vol); // get volume of second box vol = mybox2.volume(); System.out.println(""Volume is "" + vol); } } 22/09/21 6:36 PM As you can see, when volume( ) is called, it is put on the right side of an assignment statement. On the left is a variable, in this case vol, that will receive the value returned by volume( ). Thus, after vol = mybox1.volume(); executes, the value of mybox1.volume( ) is 3,000 and this value then is stored in vol. There are two important things to understand about returning values: specified by the method. For example, if the return type of some method is boolean, you could not return an integer. The variable receiving the value returned by a method (such as vol, in this case) must also be compatible with the return type specified for the method"
Justify with an example how an argument is a value that is passed to a method when it is invoked,"An argument is a value that is passed to a method when it is invoked .For example, square(100) passes 100 as an argument","As these examples show, square( ) is able to return the square of whatever data it is passed. It is important to keep the two terms parameter and argument straight. A parameter is a variable defined by a method that receives a value when the method is called. For example, in square( ), i is a parameter. An argument is a value that is passed to a method when it is invoked. For example, square(100) passes 100 as an argument. Inside square( ), the parameter i receives that value. You can use a parameterized method to improve the Box class. In the preceding examples, the dimensions of each box had to be set separately by use of a sequence of statements, such as: mybox1.width = 10; mybox1.height = 20; mybox1.depth = 15; While this code works, it is troubling for two reasons. First, it is clumsy and error prone"
"Justify with an example how as you can probably guess, this makes it much more useful","As you can probably guess, this makes it much more useful .For example, the following version of Box defines a parameterized constructor that sets the dimensions of a box as specified by those parameters","Before moving on, lets reexamine the new operator. As you know, when you allocate an object, you use the following general form: class-var = new classname ( ); Now you can understand why the parentheses are needed after the class name. What is actually happening is that the constructor for the class is being called. Thus, in the line Box mybox1 = new Box(); new Box( ) is calling the Box( ) constructor. When you do not explicitly define a constructor for a class, then Java creates a default constructor for the class. This is why the preceding line of code worked in earlier versions of Box that did not define a constructor. When using the default constructor, all non-initialized instance variables will have their default values, which are zero, null, and false, for numeric types, reference types, and boolean, respectively. The default constructor is often sufficient for simple classes, but it usually wont do for more sophisticated ones. Once you define your own constructor, the default constructor is no longer used. Parameterized Constructors While the Box( ) constructor in the preceding example does initialize a Box object, it is not very usefulall boxes have the same dimensions. What is needed is a way to construct Box objects of various dimensions. The easy solution is to add parameters to the constructor. As you can probably guess, this makes it much more useful. For example, the following version of Box defines a parameterized constructor that sets the dimensions of a box as specified by those parameters. Pay special attention to how Box objects are created. /* Here, Box uses a parameterized constructor to initialize the dimensions of a box"
"Justify with an example how since access to the stack is through push( ) and pop( ), the fact that the stack is held in an array is actually not relevant to using the stack","Since access to the stack is through push( ) and pop( ), the fact that the stack is held in an array is actually not relevant to using the stack .For example, the stack could be held in a more complicated data structure, such as a linked list, yet the interface defined by push( ) and pop( ) would remain the same","Here is a class called Stack that implements a stack for up to ten integers: // This class defines an integer stack that can hold 10 values class Stack { int[] stck = new int[10]; int tos; // Initialize top-of-stack Stack() { tos = -1; } // Push an item onto the stack void push(int item) { if(tos==9) System.out.println(""Stack is full.""); else stck[++tos] = item; } // Pop an item from the stack int pop() { if(tos < 0) { System.out.println(""Stack underflow.""); 22/09/21 6:36 PM return 0; } else return stck[tos--]; } } As you can see, the Stack class defines two data items, two methods, and a constructor. The stack of integers is held by the array stck. This array is indexed by the variable tos, which always contains the index of the top of the stack. The Stack( ) constructor initializes tos to 1, which indicates an empty stack. The method push( ) puts an item on the stack. To retrieve an item, call pop( ). Since access to the stack is through push( ) and pop( ), the fact that the stack is held in an array is actually not relevant to using the stack. For example, the stack could be held in a more complicated data structure, such as a linked list, yet the interface defined by push( ) and pop( ) would remain the same. The class TestStack, shown here, demonstrates the Stack class. It creates two integer stacks, pushes some values onto each, and then pops them off"
Justify with an example how the main advantage to recursive methods is that they can be used to create clearer and simpler versions of several algorithms than can their iterative relatives,"The main advantage to recursive methods is that they can be used to create clearer and simpler versions of several algorithms than can their iterative relatives .For example, the QuickSort sorting algorithm is quite difficult to implement in an iterative way","Recursive versions of many routines may execute a bit more slowly than the iterative equivalent because of the added overhead of the additional method calls. A large number of recursive calls to a method could cause a stack overrun. Because storage for parameters and local variables is on the stack and each new call creates a new copy of these variables, it is possible that the stack could be exhausted. If this occurs, the Java run-time system will cause an exception. However, this is typically not an issue unless a recursive routine runs wild. The main advantage to recursive methods is that they can be used to create clearer and simpler versions of several algorithms than can their iterative relatives. For example, the QuickSort sorting algorithm is quite difficult to implement in an iterative way. Also, some types of AI-related algorithms are most easily implemented using recursive solutions. When writing recursive methods, you must have an if statement somewhere to force the method to return without the recursive call being executed. If you dont do this, once you call the method, it will never return. This is a very common error in working with recursion. Use println( ) statements liberally during development so that you can watch what is going on and abort execution if you see that you have made a mistake"
"Justify with an example how by controlling access, you can prevent misuse","By controlling access, you can prevent misuse .For example, allowing access to data only through a welldefined set of methods, you can prevent the misuse of that data","// Another example that uses recursion. class RecTest { int[] values; 21/09/21 5:41 PM RecTest(int i) { values = new int[i]; } // display array -- recursively void printArray(int i) { if(i==0) return; else printArray(i-1); System.out.println(""["" + (i-1) + ""] "" + values[i-1]); } } class Recursion2 { public static void main(String[] args) { RecTest ob = new RecTest(10); int i; for(i=0; i<10; i++) ob.values[i] = i; ob.printArray(10); } } This program generates the following output: [0] [1] [2] [3] [4] [5] [6] [7] [8] [9] 1 3 5 7 9 Introducing Access Control As you know, encapsulation links data with the code that manipulates it. However, encapsulation provides another important attribute: access control. Through encapsulation, you can control what parts of a program can access the members of a class. By controlling access, you can prevent misuse. For example, allowing access to data only through a welldefined set of methods, you can prevent the misuse of that data. Thus, when correctly implemented, a class creates a black box which may be used, but the inner workings of which are not open to tampering. However, the classes that were presented earlier do not completely meet this goal. For example, consider the Stack class shown at the end of Chapter 6. While it is true that the methods push( ) and pop( ) do provide a controlled interface to the stack, this interface is not enforced. That is, it is possible for another part of the program to bypass these methods and access the stack directly. Of course, in the wrong hands, this could lead to trouble. In this section, you will be introduced to the mechanism by which you can precisely control access to the various members of a class. 21/09/21 5:41 PM 150PART I How a member can be accessed is determined by the access modifier attached to its declaration. Java supplies a rich set of access modifiers. Some aspects of access control are related mostly to inheritance or packages. (A package is, essentially, a grouping of classes.) These parts of Javas access control mechanism will be discussed in subsequent chapters"
Justify with an example how it is perfectly proper to allow an instance variable to be public when there is good reason to do so,"It is perfectly proper to allow an instance variable to be public when there is good reason to do so .For example, most of the simple classes in this book were created with little concern about controlling access to instance variables for the sake of simplicity","The following program demonstrates the improved Stack class. Try removing the commented-out lines to prove to yourself that the stck and tos members are, indeed, inaccessible. class TestStack { public static void main(String[] args) { Stack mystack1 = new Stack(); Stack mystack2 = new Stack(); // push some numbers onto the stack for(int i=0; i<10; i++) mystack1.push(i); for(int i=10; i<20; i++) mystack2.push(i); // pop those numbers off the stack System.out.println(""Stack in mystack1:""); for(int i=0; i<10; i++) System.out.println(mystack1.pop()); System.out.println(""Stack in mystack2:""); for(int i=0; i<10; i++) System.out.println(mystack2.pop()); // these statements are not legal // mystack1.tos = -2; // mystack2.stck[3] = 100; } } Although methods will usually provide access to the data defined by a class, this does not always have to be the case. It is perfectly proper to allow an instance variable to be public when there is good reason to do so. For example, most of the simple classes in this book were created with little concern about controlling access to instance variables for the sake of simplicity. However, in most real-world classes, you will need to allow operations on data only through methods. The next chapter will return to the topic of access control. As you will see, it is particularly important when inheritance is involved. 21/09/21 5:41 PM Understanding static Part I There will be times when you will want to define a class member that will be used independently of any object of that class. Normally, a class member must be accessed only in conjunction with an object of its class. However, it is possible to create a member that can be used by itself, without reference to a specific instance. To create such a member, precede its declaration with the keyword static. When a member is declared static, it can be accessed before any objects of its class are created, and without reference to any object. You can declare both methods and variables to be static. The most common example of a static member is main( ). main( ) is declared as static because it must be called before any objects exist"
Justify with an example how situations that require that a variable number of arguments be passed to a method are not unusual,"Situations that require that a variable number of arguments be passed to a method are not unusual .For example, a method that opens an Internet connection might take a user name, password, filename, protocol, and so on, but supply defaults if some of this information is not provided","Varargs: Variable-Length Arguments Modern versions of Java include a feature that simplifies the creation of methods that need to take a variable number of arguments. This feature is called varargs and it is short for variablelength arguments. A method that takes a variable number of arguments is called a variablearity method, or simply a varargs method. Situations that require that a variable number of arguments be passed to a method are not unusual. For example, a method that opens an Internet connection might take a user name, password, filename, protocol, and so on, but supply defaults if some of this information is not provided. In this situation, it would be convenient to pass only the arguments to which the defaults did not apply. Another example is the printf( ) method that is part of Javas I/O library. As you will see in Chapter 22, it takes a variable number of arguments, which it formats and then outputs. In the early days of Java, variable-length arguments could be handled two ways, neither of which was particularly pleasing. First, if the maximum number of arguments was small and known, then you could create overloaded versions of the method, one for each way the method could be called. Although this works and is suitable for some cases, it applies to only a narrow class of situations"
"Justify with an example how however, there are many ways to implement a stack","However, there are many ways to implement a stack .For example, the stack can be of a fixed size or it can be growable","Applying Interfaces To understand the power of interfaces, lets look at a more practical example. In earlier chapters, you developed a class called Stack that implemented a simple fixed-size stack. However, there are many ways to implement a stack. For example, the stack can be of a fixed size or it can be growable. The stack can also be held in an array, a linked list, a binary tree, and so on. No matter how the stack is implemented, the interface to the stack remains the same. That is, the methods push( ) and pop( ) define the interface to the stack independently of the details of the implementation. Because the interface to a stack is separate from its implementation, it is easy to define a stack interface, leaving it to each implementation to define the specifics. Lets look at two examples. First, here is the interface that defines an integer stack. Put this in a file called IntStack.java. This interface will be used by both stack implementations"
"Justify with an example how thus, process-based multitasking is the feature that allows your computer to run two or more programs concurrently","Thus, process-based multitasking is the feature that allows your computer to run two or more programs concurrently .For example, processbased multitasking enables you to run the Java compiler at the same time that you are using a text editor or visiting a web site","22/09/21 6:36 PM CHAPTER Multithreaded Programming Java provides built-in support for multithreaded programming. A multithreaded program contains two or more parts that can run concurrently. Each part of such a program is called a thread, and each thread defines a separate path of execution. Thus, multithreading is a specialized form of multitasking. You are almost certainly acquainted with multitasking because it is supported by virtually all modern operating systems. However, there are two distinct types of multitasking: process-based and thread-based. It is important to understand the difference between the two. For many readers, process-based multitasking is the more familiar form. A process is, in essence, a program that is executing. Thus, process-based multitasking is the feature that allows your computer to run two or more programs concurrently. For example, processbased multitasking enables you to run the Java compiler at the same time that you are using a text editor or visiting a web site. In process-based multitasking, a program is the smallest unit of code that can be dispatched by the scheduler. In a thread-based multitasking environment, the thread is the smallest unit of dispatchable code. This means that a single program can perform two or more tasks simultaneously. For instance, a text editor can format text at the same time that it is printing, as long as these two actions are being performed by two separate threads. Thus, process-based multitasking deals with the big picture, and thread-based multitasking handles the details"
Justify with an example how environment in which Java operates because idle time is common,"The environment in which Java operates because idle time is common .For example, the transmission rate of data over a network is much slower than the rate at which the computer can process it","Multitasking threads require less overhead than multitasking processes. Processes are heavyweight tasks that require their own separate address spaces. Interprocess communication is expensive and limited. Context switching from one process to another is also costly. Threads, on the other hand, are lighter weight. They share the same address space and cooperatively share the same heavyweight process. Interthread communication is inexpensive, and context switching from one thread to the next is lower in cost. While Java programs make use of process-based multitasking environments, process-based multitasking is not under Javas direct control. However, multithreaded multitasking is. Multithreading enables you to write efficient programs that make maximum use of the processing power available in the system. One important way multithreading achieves this is by keeping idle time to a minimum. This is especially important for the interactive, networked.The environment in which Java operates because idle time is common. For example, the transmission rate of data over a network is much slower than the rate at which the computer can process it. Even local file system resources are read and written at a much slower pace than they can be processed by the CPU. And, of course, user input is much slower than the computer. In a single-threaded environment, your program has to wait for each of these tasks to finish before it can proceed to the next oneeven though most of the time the program is idle, waiting for input. Multithreading helps you reduce this idle time because another thread can run when one is waiting. If you have programmed for operating systems such as Windows, then you are already familiar with multithreaded programming. However, the fact that Java manages threads makes multithreading especially convenient because many of the details are handled for you"
"Justify with an example how because multithreading introduces an asynchronous behavior to your programs, there must be a way for you to enforce synchronicity when you need it","Because multithreading introduces an asynchronous behavior to your programs, there must be a way for you to enforce synchronicity when you need it .For example, if you want two threads to communicate and share a complicated data structure, such as a linked list, you need some way to ensure that they dont conflict with each other","Portability problems can arise from the differences in the way that operating systems context-switch threads of equal priority. Because multithreading introduces an asynchronous behavior to your programs, there must be a way for you to enforce synchronicity when you need it. For example, if you want two threads to communicate and share a complicated data structure, such as a linked list, you need some way to ensure that they dont conflict with each other. That is, you must prevent one thread 22/09/21 6:37 PM 250PART I from writing data while another thread is in the middle of reading it. For this purpose, Java implements an elegant twist on an age-old model of interprocess synchronization: the monitor. The monitor is a control mechanism first defined by C.A.R. Hoare. You can think of a monitor as a very small box that can hold only one thread. Once a thread enters a monitor, all other threads must wait until that thread exits the monitor. In this way, a monitor can be used to protect a shared asset from being manipulated by more than one thread at a time"
"Justify with an example how in practice, the amount of CPU time that a thread gets often depends on several factors besides its priority (","In practice, the amount of CPU time that a thread gets often depends on several factors besides its priority (.For example, how an operating system implements multitasking can affect the relative availability of CPU time.) A higher-priority thread can also preempt a lower-priority one","Thread One is alive: false Thread Two is alive: false Thread Three is alive: false Main thread exiting. Thread Priorities Thread priorities are used by the thread scheduler to decide when each thread should be allowed to run. In theory, over a given period of time, higher-priority threads get more CPU time than lower-priority threads. In practice, the amount of CPU time that a thread gets often depends on several factors besides its priority. (For example, how an operating system implements multitasking can affect the relative availability of CPU time.) A higher-priority thread can also preempt a lower-priority one. For instance, when a lower-priority thread is running and a higher-priority thread resumes (from sleeping or waiting on I/O, for example), it will preempt the lower-priority thread. In theory, threads of equal priority should get equal access to the CPU. But you need to be careful. Remember, Java is designed to work in a wide range of environments. Some of those environments implement multitasking fundamentally differently than others. For safety, threads that share the same priority should yield control once in a while. This ensures that all threads have a chance to run under a nonpreemptive operating system. In practice, even in nonpreemptive environments, most threads still get a chance to run, because most threads inevitably encounter some blocking situation, such as waiting for I/O. When this happens, the blocked thread is suspended and other threads can run. But, if you want smooth multithreaded execution, you are better off not relying on this. Also, some types of tasks are CPU-intensive"
"Justify with an example how in cases in which you dont need to keep a reference to the executing thread, you can sometimes create and start a thread with one line of code, without the use of a factory method","In cases in which you dont need to keep a reference to the executing thread, you can sometimes create and start a thread with one line of code, without the use of a factory method .For example, again assuming the ThreadDemo program, the following creates and starts a NewThread thread: new NewThread().t.start(); However, in real-world applications, you will usually need to keep a reference to the thread, so the factory method is often a good choice. Using Multithreading The key to utilizing Javas multithreading features effectively is to think concurrently rather than serially","public static NewThread createAndStart() { NewThread myThrd = new NewThread(); myThrd.t.start(); return myThrd; } Using createAndStart( ), you can now replace this sequence: NewThread nt = new NewThread(); // create a new thread nt.t.start(); // Start the thread with NewThread nt = NewThread.createAndStart(); Now the thread is created and started in one step. In cases in which you dont need to keep a reference to the executing thread, you can sometimes create and start a thread with one line of code, without the use of a factory method. For example, again assuming the ThreadDemo program, the following creates and starts a NewThread thread: new NewThread().t.start(); However, in real-world applications, you will usually need to keep a reference to the thread, so the factory method is often a good choice. Using Multithreading The key to utilizing Javas multithreading features effectively is to think concurrently rather than serially. For example, when you have two subsystems within a program that can execute concurrently, make them individual threads. With the careful use of multithreading, you can create very efficient programs. A word of caution is in order, however: If you create too many threads, you can actually degrade the performance of your program rather than enhance it. Remember, some overhead is associated with context switching. If you create too many threads, more CPU time will be spent changing contexts than executing your program! One last point: To create compute-intensive applications that can automatically scale to make use of the available processors in a multicore system, consider using the Fork/Join Framework, which is described in Chapter 29"
Justify with an example how enumerations are commonly used to define a set of values that represent a collection of items,"Enumerations are commonly used to define a set of values that represent a collection of items .For example, you might use an enumeration to represent the error codes that can result from some operation, such as success, failed, or pending; or a list of the states that a device might be in, such as running, stopped, or paused","22/09/21 6:37 PM CHAPTER Enumerations, Autoboxing, and Annotations This chapter examines three features that were not originally part of Java, but over time each has become a near indispensable aspect of Java programming: enumerations, autoboxing, and annotations. Originally added by JDK 5, each is a feature upon which Java programmers have come to rely because each offers a streamlined approach to handling common programming tasks. This chapter also discusses Javas type wrappers and introduces reflection. Enumerations In its simplest form, an enumeration is a list of named constants that define a new data type and its legal values. Thus, an enumeration object can hold only a value that was declared in the list. Other values are not allowed. In other words, an enumeration gives you a way to explicitly specify the only values that a data type can legally have. Enumerations are commonly used to define a set of values that represent a collection of items. For example, you might use an enumeration to represent the error codes that can result from some operation, such as success, failed, or pending; or a list of the states that a device might be in, such as running, stopped, or paused. In early versions of Java, such values were defined using final variables, but enumerations offer a far superior approach. Although Java enumerations might, at first glance, appear similar to enumerations in other languages, this similarity may be only skin deep because, in Java, an enumeration defines a class type. By making enumerations into classes, the capabilities of the enumeration are greatly expanded. For example, in Java, an enumeration can have constructors, methods, and instance variables. Because of their power and flexibility, enumerations are widely used throughout the Java API library"
"Justify with an example how by making enumerations into classes, the capabilities of the enumeration are greatly expanded","By making enumerations into classes, the capabilities of the enumeration are greatly expanded .For example, in Java, an enumeration can have constructors, methods, and instance variables","Enumerations In its simplest form, an enumeration is a list of named constants that define a new data type and its legal values. Thus, an enumeration object can hold only a value that was declared in the list. Other values are not allowed. In other words, an enumeration gives you a way to explicitly specify the only values that a data type can legally have. Enumerations are commonly used to define a set of values that represent a collection of items. For example, you might use an enumeration to represent the error codes that can result from some operation, such as success, failed, or pending; or a list of the states that a device might be in, such as running, stopped, or paused. In early versions of Java, such values were defined using final variables, but enumerations offer a far superior approach. Although Java enumerations might, at first glance, appear similar to enumerations in other languages, this similarity may be only skin deep because, in Java, an enumeration defines a class type. By making enumerations into classes, the capabilities of the enumeration are greatly expanded. For example, in Java, an enumeration can have constructors, methods, and instance variables. Because of their power and flexibility, enumerations are widely used throughout the Java API library. 12-ch12.indd 277 CompRef_2010 / Java: The Complete Reference, Twelfth Edition / Schildt / 126046-341-9 The Java Language Enumeration Fundamentals An enumeration is created using the enum keyword. For example, here is a simple enumeration that lists various apple varieties: // An enumeration of apple varieties"
Justify with an example how the fact that enum defines a class gives the Java enumeration extraordinary power,"The fact that enum defines a class gives the Java enumeration extraordinary power .For example, you can give them constructors, add instance variables and methods, and even implement interfaces","ap = Apple.valueOf(""Winesap""); As explained, valueOf( ) returns the enumeration value associated with the name of the constant represented as a string. Java Enumerations Are Class Types As mentioned, a Java enumeration is a class type. Although you dont instantiate an enum using new, it otherwise has much the same capabilities as other classes. The fact that enum defines a class gives the Java enumeration extraordinary power. For example, you can give them constructors, add instance variables and methods, and even implement interfaces. It is important to understand that each enumeration constant is an object of its enumeration type. Thus, when you define a constructor for an enum, the constructor is called when each enumeration constant is created. Also, each enumeration constant has its own copy of any instance variables defined by the enumeration. For example, consider the following version of Apple: // Use an enum constructor, instance variable, and method"
Justify with an example how Any type of declaration can have an annotation associated with it,") Any type of declaration can have an annotation associated with it .For example, classes, methods, fields, parameters, and enum constants can be annotated","An annotation cannot include an extends clause. However, all annotation types automatically extend the Annotation interface. Thus, Annotation is a super-interface of all annotations. It is declared within the java.lang.annotation package. It overrides hashCode( ), equals( ), and toString( ), which are defined by Object. It also specifies annotationType( ), which returns a Class object that represents the invoking annotation. Once you have declared an annotation, you can use it to annotate something. Initially, annotations could be used only on declarations, and that is where we will begin. (JDK 8 added the ability to annotate type use, and this is described later in this chapter. However, the same basic techniques apply to both kinds of annotations.) Any type of declaration can have an annotation associated with it. For example, classes, methods, fields, parameters, and enum constants can be annotated. Even an annotation can be annotated. In all cases, the annotation precedes the rest of the declaration. When you apply an annotation, you give values to its members. For example, here is an example of MyAnno being applied to a method declaration: // Annotate a method"
"Justify with an example how this package defines a class called System, which encapsulates several aspects of the run-time environment","This package defines a class called System, which encapsulates several aspects of the run-time environment .For example, using some of its methods, you can obtain the current time and the settings of various properties associated with the system","The Predefined Streams As you know, all Java programs automatically import the java.lang package. This package defines a class called System, which encapsulates several aspects of the run-time environment. For example, using some of its methods, you can obtain the current time and the settings of various properties associated with the system. System also contains three predefined stream variables: in, out, and err. These fields are declared as public, static, and final within System. This means that they can be used by any other part of your program and without reference to a specific System object. System.out refers to the standard output stream. By default, this is the console. System.in refers to standard input, which is the keyboard by default. System.err refers to the standard error stream, which also is the console by default. However, these streams may be redirected to any compatible I/O device"
"Justify with an example how sometimes, knowing the type of an object during run time is useful","Sometimes, knowing the type of an object during run time is useful .For example, you might have one thread of execution that generates various types of objects, and another thread that processes these objects","21/09/21 5:46 PM 334PART I The volatile modifier tells the compiler that the variable modified by volatile can be changed unexpectedly by other parts of your program. One of these situations involves multithreaded programs. In a multithreaded program, sometimes two or more threads share the same variable. For efficiency considerations, each thread can keep its own, private copy of such a shared variable. The real (or master) copy of the variable is updated at various times, such as when a synchronized method is entered. While this approach works fine, it may be inefficient at times. In some cases, all that really matters is that the master copy of a variable always reflects its current state. To ensure this, simply specify the variable as volatile, which tells the compiler that it must always use the master copy of a volatile variable (or, at least, always keep any private copies up-to-date with the master copy, and vice versa). Also, accesses to the shared variable must be executed in the precise order indicated by the program. Introducing instanceof Sometimes, knowing the type of an object during run time is useful. For example, you might have one thread of execution that generates various types of objects, and another thread that processes these objects. In this situation, it might be useful for the processing thread to know the type of each object when it receives it. Another situation in which knowledge of an objects type at run time is important involves casting. In Java, an invalid cast causes a run-time error. Many invalid casts can be caught at compile time. However, casts involving class hierarchies can produce invalid casts that can be detected only at run time. For example, a superclass called A can produce two subclasses, called B and C. Thus, casting a B object into type A or casting a C object into type A is legal, but casting a B object into type C (or vice versa) isnt legal. Because an object of type A can refer to objects of either B or C, how can you know, at run time, what type of object is actually being referred to before attempting the cast to type C? It could be an object of type A, B, or C. If it is an object of type B, a run-time exception will be thrown. Java provides the run-time operator instanceof to answer this question"
"Justify with an example how it is used during program development to create an assertion, which is a condition that should be true during the execution of the program","It is used during program development to create an assertion, which is a condition that should be true during the execution of the program .For example, you might have a method that should always return a positive integer value","Using assert Another interesting keyword is assert. It is used during program development to create an assertion, which is a condition that should be true during the execution of the program. For example, you might have a method that should always return a positive integer value. You might test this by asserting that the return value is greater than zero using an assert statement. At run time, if the condition is true, no other action takes place. However, if the condition is false, then an AssertionError is thrown. Assertions are often used during testing to verify that some expected condition is actually met. They are not usually used for released code"
Justify with an example how many algorithms are logically the same no matter what type of data they are being applied to,"Many algorithms are logically the same no matter what type of data they are being applied to .For example, the mechanism that supports a stack is the same whether that stack is storing items of type Integer, String, Object, or Thread","Part I 21/09/21 5:46 PM This page intentionally left blank CompRef_2010 / Java: The Complete Reference, Twelfth Edition / Schildt / 126046-341-9 Since the original 1.0 release in 1995, many new features have been added to Java. One that has had a profound and long-lasting impact is generics. Introduced by JDK 5, generics changed Java in two important ways. First, it added a new syntactical element to the language. Second, it caused changes to many of the classes and methods in the core API. Today, generics are an integral part of Java programming, and a solid understanding of this important feature is required. It is examined here in detail. Through the use of generics, it is possible to create classes, interfaces, and methods that will work in a type-safe manner with various kinds of data. Many algorithms are logically the same no matter what type of data they are being applied to. For example, the mechanism that supports a stack is the same whether that stack is storing items of type Integer, String, Object, or Thread. With generics, you can define an algorithm once, independently of any specific type of data, and then apply that algorithm to a wide variety of data types without any additional effort. The expressive power generics added to the language fundamentally changed the way that Java code is written. Perhaps the one feature of Java that was most significantly affected by generics is the Collections Framework. The Collections Framework is part of the Java API and is described in detail in Chapter 20, but a brief mention is useful now. A collection is a group of objects"
"Justify with an example how in this method, the reverse domain name of the domain that owns the project is used as a prefix for the module","In this method, the reverse domain name of the domain that owns the project is used as a prefix for the module .For example, a project associated with herbschildt.com would use com.herbschildt as the module prefix. (The same goes for package names.) Because naming conventions may evolve over time, you will want to check the Java documentation for current recommendations","Before continuing, a few words about module names are appropriate. First, in the examples that follow, the name of a module (such as appfuncs) is the prefix of the name of a package (such as appfuncs.simplefuncs) that it contains. This is not required, but is used here as a way of clearly indicating to what module a package belongs. In general, when learning about and experimenting with modules, short, simple names, such as those used in this chapter, are helpful, and you can use any sort of convenient names that you like. However, when creating modules suitable for distribution, you must be careful with the names you choose because you will want those names to be unique. At the time of this writing, the suggested way to achieve this is to use the reverse domain name method. In this method, the reverse domain name of the domain that owns the project is used as a prefix for the module. For example, a project associated with herbschildt.com would use com.herbschildt as the module prefix. (The same goes for package names.) Because naming conventions may evolve over time, you will want to check the Java documentation for current recommendations. Lets now begin. Start by creating the necessary source code directories by following these steps: 1. Create a directory called mymodapp. This is the top-level directory for the entire application"
"Justify with an example how however, in some specialized development situations, it can be desirable to make a package accessible to only a specific set of modules, not all other modules","However, in some specialized development situations, it can be desirable to make a package accessible to only a specific set of modules, not all other modules .For example, a library developer might want to export a support package to certain other modules within the library, but not make it available for general use","Before moving on, an important point needs to be made. For the types of example programs used elsewhere in this book, and for example programs in general, there is no benefit in using modules. Modularizing them would simply add clutter and complicate them for no reason or benefit. Furthermore, for many simple programs, there is no need to contain them in modules. For the reasons stated at the start of this chapter, modules are often of the greatest benefit when creating commercial programs. Therefore, no examples outside this chapter will use modules. This also allows the examples to be compiled and run in a preJDK 9 environment, which is important to readers using an older version of Java. Thus, except for the examples in this chapter, the examples in this book work for both pre-module and post-module JDKs. Exporting to a Specific Module The basic form of the exports statement makes a package accessible to any and all other modules. This is often exactly what you want. However, in some specialized development situations, it can be desirable to make a package accessible to only a specific set of modules, not all other modules. For example, a library developer might want to export a support package to certain other modules within the library, but not make it available for general use. Adding a to clause to the exports statement provides a means by which this can be accomplished. 22/09/21 6:37 PM Modules In an exports statement, the to clause specifies a list of one or more modules that have access to the exported package. Furthermore, only those modules named in the to clause will have access. In the language of modules, the to clause creates what is known as a qualified export"
"Justify with an example how as mentioned, services are often used to support a pluggable architecture","As mentioned, services are often used to support a pluggable architecture .For example, a service might be used to support the translation of one language into another","Service and Service Provider Basics In Java, a service is a program unit whose functionality is defined by an interface or abstract class. Thus, a service specifies in a general way some form of program activity. A concrete implementation of a service is supplied by a service provider. In other words, a service defines the form of some action, and the service provider supplies that action. As mentioned, services are often used to support a pluggable architecture. For example, a service might be used to support the translation of one language into another. In this case, the service supports translation in general. The service provider supplies a specific translation, such as German to English or French to Chinese. Because all service providers implement the same interface, different translators can be used to translate different languages without having to change the core of the application. You can simply change the service provider. Service providers are supported by the ServiceLoader class. ServiceLoader is a generic class packaged in java.util. It is declared like this: class ServiceLoader<S> Here, S specifies the service type. Service providers are loaded by the load( ) method. It has several forms; the one we will use is shown here: public static <S> ServiceLoader<S> load(Class <S> serviceType) Here, serviceType specifies the Class object for the desired service type. Recall that Class is a class that encapsulates information about a class. There are a variety of ways to obtain a 22/09/21 6:37 PM className.class Here, className specifies the name of the class"
"Justify with an example how thus, a switch expression must be exhaustive","Thus, a switch expression must be exhaustive .For example, if its controlling expression is of type int, then all int values must be handled by the switch","There is an important restriction that applies to a switch expression: the case statements must handle all of the values that might occur. Thus, a switch expression must be exhaustive. For example, if its controlling expression is of type int, then all int values must be handled by the switch. This would, of course, constitute a very large number of case statements! For this reason, most switch expressions will have a default statement. The exception to this rule is when an enumeration is used, and each value of the enumeration is matched by a case. Introducing the Arrow in a case Statement Although the use of yield in the preceding program is a perfectly valid way to specify a value for a switch expression, it is not the only way to do so. In many situations, an easier way to supply a value is through the use of a new form of the case that substitutes -> for the colon in a case. For example, this line: case 'X': // .."
Justify with an example how records are often used as elements in a list,"Records are often used as elements in a list .For example, a business might maintain a list of Employee records to store an employees name along with his or her corresponding ID number","A record is instantiated by use of new, just the way you create an instance of a class. For example, this creates a new Employee object, with the name ""Doe, John"" and ID number 1047: After this declaration executes, the private fields name and idNum for emp will contain the values ""Doe, John"" and 1047, respectively. Therefore, you can use the following statement to display the information associated with emp: System.out.println(""The employee ID for "" + emp.name() + "" is "" + emp.idNum()); The resulting output is shown here: The employee ID for Doe, John is 1047 A key point about a record is that its data is held in private final fields and only getter methods are provided. Thus, the data that a record holds is immutable. In other words, once you construct a record, its contents cannot be changed. However, if a record holds a reference to some object, you can make a change to that object, but you cannot change to what object the reference in the record refers. Thus, in Java terms, records are said to be shallowly immutable. The following program puts the preceding discussion into action. Records are often used as elements in a list. For example, a business might maintain a list of Employee records to store an employees name along with his or her corresponding ID number. The following program shows a simple example of such usage. It creates a small array of Employee records. It then cycles through the array, displaying the contents of each record"
Justify with an example how you might want to declare a record constructor for a number of reasons,"You might want to declare a record constructor for a number of reasons .For example, the constructor could check that a value is within a required range, verify that a value is in the proper format, ensure that an object implements optional functionality, or confirm that an argument is not null","First, a record cannot inherit another class. However, all records implicitly inherit java.lang .Record, which specifies abstract overrides of the equals( ), hashCode( ), and toString( ) methods declared by Object. Implicit implementations of these methods are automatically created, based on the record declaration. A record type cannot be extended. Thus, all record declarations are considered final. Although a record cannot extend another class, it can implement one or more interfaces. With the exception of equals, you cannot use the names of methods defined by Object as names for a records components. Aside from the fields associated with a records components, any other fields must be static. Finally, a record can be generic. Create Record Constructors Although you will often find that the automatically supplied canonical constructor is precisely what you want, you can also declare one or more of your own constructors. You can also define your own implementation of the canonical constructor. You might want to declare a record constructor for a number of reasons. For example, the constructor could check that a value is within a required range, verify that a value is in the proper format, ensure that an object implements optional functionality, or confirm that an argument is not null. For a record, there are two general types of constructors that you can explicitly create: canonical and non-canonical, and there are some differences between the two. The creation of each type is examined here, beginning with defining your own implementation of the canonical constructor. 21/09/21 5:48 PM Although the canonical constructor has a specific, predefined form, there are two ways that you can code your own implementation. First, you can explicitly declare the full form of the canonical constructor. Second, you can use what is called a compact record constructor. Each approach is examined here, beginning with the full form"
"Justify with an example how because a record is used to aggregate data, a common use of a record constructor is to verify the validity or applicability of an argument","Because a record is used to aggregate data, a common use of a record constructor is to verify the validity or applicability of an argument .For example, before constructing the record, the constructor may need to determine if a value is out of range, in an improper format, or otherwise unsuitable for use","It is important to emphasize that records are immutable. As it relates to this example, it means that when an ID value for Martin, Dave is obtained, the old record must be replaced by a new record that contains the ID number. It is not possible to alter the record to update the ID. The immutability of records is a primary attribute. Another Record Constructor Example Before leaving the topic of record constructors, we will look at one more example. Because a record is used to aggregate data, a common use of a record constructor is to verify the validity or applicability of an argument. For example, before constructing the record, the constructor may need to determine if a value is out of range, in an improper format, or otherwise unsuitable for use. If an invalid condition is found, the constructor could create a default or error instance. However, often it would be better for the constructor to throw an exception. This way, the user of the record would immediately be aware of the error and could take steps to correct it. In the preceding Employee record examples, names have been specified using the common convention of lastname, firstname, such as Doe, John. However, there was no mechanism to verify or enforce that this format was being used. The following version of the compact canonical constructor provides a limited check that the name has the format lastname, firstname. It does so by confirming that there is one and only one comma in the name and that there is at least one character (other than space) before and after the comma"
Justify with an example how implementing strings as built-in objects allows Java to provide a full complement of features that make string handling convenient,"Implementing strings as built-in objects allows Java to provide a full complement of features that make string handling convenient .For example, Java has methods to compare two strings, search for a substring, concatenate two strings, and change the case of letters within a string","21/09/21 5:48 PM PART The Java Library String Handling Exploring java.lang java.util Part 1: The Collections Framework java.util Part 2: More Utility Classes Input/Output: Exploring java.io Exploring NIO Networking Event Handling Introducing the AWT: Working with Windows, Graphics, and Text Using AWT Controls, Layout Managers, and Menus Images 21/09/21 6:14 PM CHAPTER 29 CHAPTER 30 CHAPTER 31 Regular Expressions and Other Packages 21/09/21 6:14 PM CHAPTER String Handling A brief overview of Javas string handling was presented in Chapter 7. In this chapter, it is described in detail. As is the case in most other programming languages, in Java a string is a sequence of characters. But, unlike some other languages that implement strings as character arrays, Java implements strings as objects of type String. Implementing strings as built-in objects allows Java to provide a full complement of features that make string handling convenient. For example, Java has methods to compare two strings, search for a substring, concatenate two strings, and change the case of letters within a string. Also, String objects can be constructed a number of ways, making it easy to obtain a string when needed. Somewhat unexpectedly, when you create a String object, you are creating a string that cannot be changed. That is, once a String object has been created, you cannot change the characters that comprise that string. At first, this may seem to be a serious restriction"
Justify with an example how number has abstract methods that return the value of the object in each of the different number formats,"Number has abstract methods that return the value of the object in each of the different number formats .For example, doubleValue( ) returns the value as a double, floatValue( ) returns the value as a float, and so on","Before we begin, an important point needs to be mentioned. Beginning with JDK 16, the primitive type wrapper classes are now documented as value-based. As such, various rules and restrictions apply. For example, you should avoid using instances of a value-based class for synchronization. See Chapter 13 for additional information on value-based classes. Number The abstract class Number defines a superclass that is implemented by the classes that wrap the numeric types byte, short, int, long, float, and double. Number has abstract methods that return the value of the object in each of the different number formats. For example, doubleValue( ) returns the value as a double, floatValue( ) returns the value as a float, and so on. These methods are shown here: byte byteValue( ) double doubleValue( ) float floatValue( ) int intValue( ) long longValue( ) short shortValue( ) The values returned by these methods might be rounded, truncated, or result in a garbage value due to the effects of a narrowing conversion. Number has concrete subclasses that hold explicit values of each primitive numeric type: Double, Float, Byte, Short, Integer, and Long"
"Justify with an example how it is useful to point out that the version number just described is a necessary component of the version string, but optional elements may also be included in the string","It is useful to point out that the version number just described is a necessary component of the version string, but optional elements may also be included in the string .For example, a version string may include information for a pre-release version","With each new feature release, the interim, update, and patch counters are reset to zero. It is useful to point out that the version number just described is a necessary component of the version string, but optional elements may also be included in the string. For example, a version string may include information for a pre-release version. Optional elements follow the version number in the version string. Beginning with JDK 10, Runtime.Version was updated to include the following methods that support the new feature, interim, update, and patch counter values: Runtime.Version int feature( ) int interim( ) int update( ) int patch( ) 21/09/21 5:48 PM 536PART II Each returns an integer value that represents the indicated value. Here is a short program that demonstrates their use: // Demonstrate Runtime.Version release counters"
Justify with an example how version has methods that obtain various pieces of optional data,"Version has methods that obtain various pieces of optional data .For example, you can obtain the build number, if present, by calling build( )","System.out.println(""Feature release counter: "" + ver.feature()); System.out.println(""Interim release counter: "" + ver.interim()); System.out.println(""Update release counter: "" + ver.update()); System.out.println(""Patch release counter: "" + ver.patch()); } } As a result of the change to time-based releases, the following methods in Runtime.Version have been deprecated: major( ), minor( ), and security( ). Previously, these returned the major version number, the minor version number, and the security update number. These values have been superseded by the feature, interim, and update numbers, as just described. In addition to the methods just discussed, Runtime.Version has methods that obtain various pieces of optional data. For example, you can obtain the build number, if present, by calling build( ). Pre-release information, if present, is returned by pre( ). Other optional information may also be present and is obtained by calling optional( ). You can compare versions by using compareTo( ) or compareToIgnoreOptional( ). You can use equals( ) and equalsIgnoreOptional( ) to determine version equality. The version( ) method returns a list of the version numbers. You can convert a valid version string into a Runtime.Version object by calling parse( ). ProcessBuilder ProcessBuilder provides another way to start and manage processes (that is, programs). As explained earlier, all processes are represented by the Process class, and a process can be started by Runtime.exec( ). ProcessBuilder offers more control over the processes. For example, you can set the current working directory"
Justify with an example how this is particularly valuable in situations in which you want to suspend and resume a number of related threads,"This is particularly valuable in situations in which you want to suspend and resume a number of related threads .For example, imagine a program in which one set of threads is used for printing a document, another set is used to display the document on the screen, and another set saves the document to a disk file","Returns the string equivalent of the group. void uncaughtException(Thread thread, Throwable e) Part II Table 19-19 The Non-Deprecated Methods Defined by ThreadGroup Thread groups offer a convenient way to manage groups of threads as a unit. This is particularly valuable in situations in which you want to suspend and resume a number of related threads. For example, imagine a program in which one set of threads is used for printing a document, another set is used to display the document on the screen, and another set saves the document to a disk file. If printing is aborted, you will want an easy way to stop all threads related to printing. Thread groups offer this convenience. The following program, which creates two thread groups of two threads each, illustrates this usage: // Demonstrate thread groups. class NewThread extends Thread { boolean suspendFlag; NewThread(String threadname, ThreadGroup tgOb) { super(tgOb, threadname); System.out.println(""New thread: "" + this); suspendFlag = false; } // This is the entry point for thread"
Justify with an example how this important package contains a large assortment of classes and interfaces that support a broad range of functionality,"This important package contains a large assortment of classes and interfaces that support a broad range of functionality .For example, java.util has classes that generate pseudorandom numbers, manage date and time, support events, manipulate sets of bits, tokenize strings, and handle formatted data","It also defines several interfaces, including AnnotatedElement, Member, and Type. In addition, the java.lang.reflect package includes the Array class that enables you to create and access arrays dynamically. 21/09/21 5:48 PM This page intentionally left blank CompRef_2010 / Java: The Complete Reference, Twelfth Edition / Schildt / 126046-341-9 java.util Part 1: The Collections Framework This chapter begins our examination of java.util. This important package contains a large assortment of classes and interfaces that support a broad range of functionality. For example, java.util has classes that generate pseudorandom numbers, manage date and time, support events, manipulate sets of bits, tokenize strings, and handle formatted data. The java.util package also contains one of Javas most powerful subsystems: the Collections Framework. The Collections Framework is a sophisticated hierarchy of interfaces and classes that provide state-of-the-art technology for managing groups of objects. It merits close attention by all programmers. Beginning with JDK 9, java.util is part of the java.base module"
"Justify with an example how however, by providing a custom comparator, you can specify a different ordering scheme","However, by providing a custom comparator, you can specify a different ordering scheme .For example, when storing items that include a time stamp, you could prioritize the queue such that the oldest items are first in the queue","However, by providing a custom comparator, you can specify a different ordering scheme. For example, when storing items that include a time stamp, you could prioritize the queue such that the oldest items are first in the queue. You can obtain a reference to the comparator used by a PriorityQueue by calling its comparator( ) method, shown here: Comparator<? super E> comparator( ) It returns the comparator. If natural ordering is used for the invoking queue, null is returned"
"Justify with an example how by implementing compare( ), you can alter the way that objects are ordered","By implementing compare( ), you can alter the way that objects are ordered .For example, to sort in reverse order, you can create a comparator that reverses the outcome of a comparison","Comparator is a generic interface that has this declaration: interface Comparator<T> Here, T specifies the type of objects being compared. Prior to JDK 8, the Comparator interface defined only two methods: compare( ) and equals( ). The compare( ) method, shown here, compares two elements for order: obj1 and obj2 are the objects to be compared. Normally, this method returns zero if the objects are equal. It returns a positive value if obj1 is greater than obj2. Otherwise, a negative value is returned. The method can throw a ClassCastException if the types of the objects are not compatible for comparison. By implementing compare( ), you can alter the way that objects are ordered. For example, to sort in reverse order, you can create a comparator that reverses the outcome of a comparison. The equals( ) method, shown here, tests whether an object equals the invoking comparator: int compare(T obj1, T obj2) boolean equals(object obj) Here, obj is the object to be tested for equality. The method returns true if obj and the invoking object are both Comparator objects and use the same ordering. Otherwise, it returns false"
Justify with an example how this makes property lists especially convenient for implementing simple databases,"This makes property lists especially convenient for implementing simple databases .For example, the following program uses a property list to create a simple computerized telephone book that stores names and phone numbers","for(Object name : states) System.out.println(""The capital of "" + name + "" is "" + capitals.getProperty((String)name) + "".""); System.out.println(); // Florida will now be found in the default list. String str = capitals.getProperty(""Florida""); System.out.println(""The capital of Florida is "" + str + "".""); } } Using store( ) and load( ) One of the most useful aspects of Properties is that the information contained in a Properties object can be easily stored to or loaded from disk with the store( ) and load( ) methods. At any time, you can write a Properties object to a stream or read it back. This makes property lists especially convenient for implementing simple databases. For example, the following program uses a property list to create a simple computerized telephone book that stores names and phone numbers. To find a persons number, you enter his or her name. The program uses the store( ) and load( ) methods to store and retrieve the list. When the program executes, it first tries to load the list from a file called phonebook.dat. If this file 21/09/21 5:49 PM exists, the list is loaded. You can then add to the list. If you do, the new list is saved when you terminate the program. Notice how little code is required to implement a small, but functional, computerized phone book"
Justify with an example how they are also effective when applied to smaller jobs,"They are also effective when applied to smaller jobs .For example, a TreeMap might make an excellent collection to hold the directory structure of a set of files","if(changed) { FileOutputStream fout = new FileOutputStream(""phonebook.dat""); ht.store(fout, ""Telephone Book""); fout.close(); } // Look up numbers given a name. do { System.out.println(""Enter name to find"" + "" ('quit' to quit): ""); name = br.readLine(); if(name.equals(""quit"")) continue; number = (String) ht.get(name); System.out.println(number); } while(!name.equals(""quit"")); } } Parting Thoughts on Collections The Collections Framework gives you, the programmer, a powerful set of well-engineered solutions to some of programmings most common tasks. Consider using a collection the next time you need to store and retrieve information. Remember, collections need not be reserved for only the large jobs, such as corporate databases, mailing lists, or inventory systems. They are also effective when applied to smaller jobs. For example, a TreeMap might make an excellent collection to hold the directory structure of a set of files. A TreeSet could be quite useful for storing project-management information. Frankly, the types of problems that will benefit from a collections-based solution are limited only by your imagination. One last point: In Chapter 30, the stream API is discussed. Because streams are integrated with collections, consider using a stream when operating on a collection. 21/09/21 5:49 PM CHAPTER java.util Part 2: More Utility Classes This chapter continues our discussion of java.util by examining those classes and interfaces that are not part of the Collections Framework. These include classes that support timers, work with dates, compute random numbers, and bundle resources. Also covered are the Formatter and Scanner classes which make it easy to write and read formatted data, and the Optional class, which simplifies handling situations in which a value may be absent. Finally, the subpackages of java.util are summarized at the end of this chapter. Of particular interest is java.util.function, which defines several standard functional interfaces. One last point: the Observer interface and the Observable class packaged in java.util. have been deprecated since JDK 9. For this reason they are not discussed here"
"Justify with an example how optional does not define any constructors, but it does define several methods that let you work with Optional objects","Optional does not define any constructors, but it does define several methods that let you work with Optional objects .For example, you can determine if a value is present, obtain the value if it is present, obtain a default value when no value is present, and construct an Optional value","In the past, you would normally use the value null to indicate that no value is present. However, this can lead to null pointer exceptions if an attempt is made to dereference a null reference. As a result, frequent checks for a null value were necessary to avoid generating an exception. These classes provide a better way to handle such situations. One other point: These classes are value-based. (See Chapter 13 for a description of value-based classes.) The first and most general of these classes is Optional. For this reason, it is the primary focus of this discussion. It is shown here: class Optional<T> Here, T specifies the type of value stored. It is important to understand that an Optional instance can either contain a value of type T or be empty. In other words, an Optional object does not necessarily contain a value. Optional does not define any constructors, but it does define several methods that let you work with Optional objects. For example, you can determine if a value is present, obtain the value if it is present, obtain a default value when no value is present, and construct an Optional value. The Optional methods are shown in Table 21-3. Method static <T> Optional<T> empty( ) boolean equals(Object optional) Returns true if the invoking object equals optional"
Justify with an example how it is one of several classes that provide you with the ability to write programs that can execute in different international environments,"It is one of several classes that provide you with the ability to write programs that can execute in different international environments .For example, the formats used to display dates, times, and numbers are different in various regions","The third SimpleTimeZone constructor is SimpleTimeZone(int timeDelta, String tzId, int dstMonth0, int dstDayInMonth0, int dstDay0, int time0, int dstMonth1, int dstDayInMonth1, int dstDay1, int time1, int dstDelta) Here, dstDelta is the number of milliseconds saved during daylight saving time. The fourth SimpleTimeZone constructor is: SimpleTimeZone(int timeDelta, String tzId, int dstMonth0, int dstDayInMonth0, int dstDay0, int time0, int time0mode, int dstMonth1, int dstDayInMonth1, int dstDay1, int time1, int time1mode, int dstDelta) 21/09/21 5:50 PM Here, time0mode specifies the mode of the starting time, and time1mode specifies the mode of the ending time. Valid mode values include: STANDARD_TIME UTC_TIME Locale The Locale class is instantiated to produce objects that describe a geographical or cultural region. It is one of several classes that provide you with the ability to write programs that can execute in different international environments. For example, the formats used to display dates, times, and numbers are different in various regions. Internationalization is a large topic that is beyond the scope of this book. However, many programs will only need to deal with its basics, which include setting the current locale"
"Justify with an example how if you want to pad with 0s, place a 0 before the field-width specifier","If you want to pad with 0s, place a 0 before the field-width specifier .For example, %05d will pad a number of less than five digits with 0s so that its total length is five","Here is an example that demonstrates the %n and %% format specifiers: // Demonstrate the %n and %% format specifiers. import java.util.*; class FormatDemo3 { public static void main(String[] args) { Formatter fmt = new Formatter(); fmt.format(""Copying file%nTransfer is %d%% complete"", 88); System.out.println(fmt); fmt.close(); } } It displays the following output: Copying file Transfer is 88% complete Specifying a Minimum Field Width An integer placed between the % sign and the format conversion code acts as a minimum field-width specifier. This pads the output with spaces to ensure that it reaches a certain minimum length. If the string or number is longer than that minimum, it will still be printed in full. The default padding is done with spaces. If you want to pad with 0s, place a 0 before the field-width specifier. For example, %05d will pad a number of less than five digits with 0s so that its total length is five. The field-width specifier can be used with all format specifiers except %n. The following program demonstrates the minimum field-width specifier by applying it to the %f conversion: // Demonstrate a field-width specifier"
"Justify with an example how when you apply the precision specifier to floating-point data using the %f or %e specifiers, it determines the number of decimal places displayed","When you apply the precision specifier to floating-point data using the %f or %e specifiers, it determines the number of decimal places displayed .For example, %10.4f displays a number at least ten characters wide with four decimal places","import java.util.*; class FieldWidthDemo { public static void main(String[] args) { Formatter fmt; for(int i=1; i <= 10; i++) { fmt = new Formatter(); fmt.format(""%4d %4d %4d"", i, i*i, i*i*i); System.out.println(fmt); fmt.close(); } } } Its output is shown here: 2 4 6 8 1 8 16 36 216 64 512 100 1000 CompRef_2010 / Java: The Complete Reference, Twelfth Edition / Schildt / 126046-341-9 java.util Part 2: More Utility Classes A precision specifier can be applied to the %f, %e, %g, and %s format specifiers, among others. It follows the minimum field-width specifier (if there is one) and consists of a period followed by an integer. Its exact meaning depends upon the type of data to which it is applied. When you apply the precision specifier to floating-point data using the %f or %e specifiers, it determines the number of decimal places displayed. For example, %10.4f displays a number at least ten characters wide with four decimal places. When using %g, the precision determines the number of significant digits. The default precision is 6. Applied to strings, the precision specifier specifies the maximum field length. For example, %5.7s displays a string of at least five and not exceeding seven characters long"
"Justify with an example how in Java, these sources or destinations are defined very broadly","In Java, these sources or destinations are defined very broadly .For example, a network connection, memory buffer, or disk file can be manipulated by the Java I/O classes","As all programmers learn early on, most programs cannot accomplish their goals without accessing external data. Data is retrieved from an input source. The results of a program are sent to an output destination. In Java, these sources or destinations are defined very broadly. For example, a network connection, memory buffer, or disk file can be manipulated by the Java I/O classes. Although physically different, these devices are all handled by the same abstraction: the stream. An I/O stream, as explained in Chapter 13, is a logical entity that either produces or consumes information. An I/O stream is linked to a physical device by the Java I/O system. All I/O streams behave in the same manner, even if the actual physical devices they are linked to differ. NOTE The stream-based I/O system packaged in java.io and described in this chapter has been part of Java since its original release and is widely used. However, beginning with version 1.4, a second I/O system was added to Java. It is called NIO (which was originally an acronym for New I/O). NIO is packaged in java.nio and its subpackages. The NIO system is described in Chapter 23"
"Justify with an example how however, because a large amount of older code still exists, it is important for all programmers to also be familiar with the traditional approach to closing a stream","However, because a large amount of older code still exists, it is important for all programmers to also be familiar with the traditional approach to closing a stream .For example, you will quite likely have to work on legacy code that uses the traditional approach or in an environment that uses an older version of Java","The principal advantage of try-with-resources is that the resource (in this case, a stream) is closed automatically when the try block ends. Thus, it is not possible to forget to close the stream, for example. The try-with-resources approach also typically results in shorter, clearer, easier-to-maintain source code. Because of its advantages, try-with-resources is expected to be used extensively in new code. As a result, most of the code in this chapter (and in this book) will use it. However, because a large amount of older code still exists, it is important for all programmers to also be familiar with the traditional approach to closing a stream. For example, you will quite likely have to work on legacy code that uses the traditional approach or in an environment that uses an older version of Java. There may also be times when the automated approach is not appropriate because of other aspects of your code. For this reason, a few I/O examples in this book will demonstrate the traditional approach so you can see it in action. One last point: The examples that use try-with-resources must be compiled by a modern version of Java. They wont work with an older compiler. The examples that use the traditional approach can be compiled by older versions of Java"
"Justify with an example how however, there are cases in which the programmer may need to have control over these processes","However, there are cases in which the programmer may need to have control over these processes .For example, it may be desirable to use compression or encryption techniques","21/09/21 5:51 PM Only an object that implements the Serializable interface can be saved and restored by the serialization facilities. The Serializable interface defines no members. It is simply used to indicate that a class may be serialized. If a class is serializable, all of its subclasses are also serializable. In general, all instance variables are saved by serialization. However, variables that are declared as transient are not saved by the serialization facilities. Also, static variables are not saved. (It is also possible to explicitly specify which variables will be saved by using a serialPersistentFields array.) Externalizable The Java facilities for serialization and deserialization have been designed so that much of the work to save and restore the state of an object occurs automatically. However, there are cases in which the programmer may need to have control over these processes. For example, it may be desirable to use compression or encryption techniques. The Externalizable interface is designed for these situations. The Externalizable interface defines these two methods: Serializable void readExternal(ObjectInput inStream) throws IOException, ClassNotFoundException void writeExternal(ObjectOutput outStream) throws IOException In these methods, inStream is the byte stream from which the object is to be read, and outStream is the byte stream to which the object is to be written"
Justify with an example how this method lets you specify a string pattern that helps validate input,"This method lets you specify a string pattern that helps validate input .For example, you can specify one or more class names for which serialization will be allowed, with each name separated by a semicolon","try ( ObjectInputStream objIStrm = new ObjectInputStream(new FileInputStream(""serial"")) ) { // Create and add a simple deserialization filter. ObjectInputFilter myfilter = ObjectInputFilter.Config.createFilter(""MyClass;!*""); objIStrm.setObjectInputFilter(myfilter); MyClass object2 = (MyClass)objIStrm.readObject(); System.out.println(""object2: "" + object2); } catch(Exception e) { System.out.println(""Exception during deserialization: "" + e); } 21/09/21 5:51 PM An ObjectInputFilter is created by calling the static createFilter( ) method defined by the ObjectInputFilter.Config nested class. This method lets you specify a string pattern that helps validate input. For example, you can specify one or more class names for which serialization will be allowed, with each name separated by a semicolon. In this case, MyClass is specified. The pattern !* specifies that all other classes are to be rejected. As a result, only instances of MyClass are allowed to be deserialized. In general, putting a ! before a class causes the class to be rejected. The * is a wildcard character that matches all class names. Once the filter has been created, it is associated with objIStrm by a call to setObjectInputFilter( ). After this call, the stream filter will be active on the input stream"
Justify with an example how all buffer classes also support methods that perform various buffer operations,"All buffer classes also support methods that perform various buffer operations .For example, you can allocate a buffer manually using allocate( )","Table 23-1 The Methods Defined by Buffer From Buffer, the following specific buffer classes are derived, which hold the type of data that their names imply: ByteBuffer DoubleBuffer IntBuffer MappedByteBuffer MappedByteBuffer is a subclass of ByteBuffer and is used to map a file to a buffer. All of the aforementioned buffers provide various get( ) and put( ) methods, which allow you to get data from a buffer or put data into a buffer. (Of course, if a buffer is read-only, then put( ) operations are not available.) Table 23-2 shows the get( ) and put( ) methods defined by ByteBuffer. The other buffer classes have similar methods. All buffer classes also support methods that perform various buffer operations. For example, you can allocate a buffer manually using allocate( ). You can wrap an array inside a buffer using wrap( ). You can create a subsequence of a buffer using slice( ). 21/09/21 5:53 PM 766PART II Method abstract byte get( ) ByteBuffer get(byte[ ] vals) Copies the invoking buffer into the array referred to by vals. Returns a reference to the buffer. If there are not vals.length elements remaining in the buffer, a BufferUnderflowException is thrown"
Justify with an example how All channels support additional methods that give you access to and control over the channel,"All channels support additional methods that give you access to and control over the channel .For example, FileChannel supports methods to get or set the current position, transfer information between file channels, obtain the current size of the channel, and lock the channel, among others","abstract int write(ByteBuffer bb, long start) throws IOException Beginning at the file location specified by start, writes the contents of bb to the invoking channel. The current position is unchanged. Returns the number of bytes written. All channels support additional methods that give you access to and control over the channel. For example, FileChannel supports methods to get or set the current position, transfer information between file channels, obtain the current size of the channel, and lock the channel, among others. FileChannel provides a static method called open( ), which opens a file and returns a channel to it. This provides another way to obtain a channel. FileChannel also provides the map( ) method, which lets you map a file to a buffer"
"Justify with an example how comparing the Canny image with the other two images, we see in the Canny result significant improvements in detail of the principal edges and, at the same time, more rejection of irrelevant features","Comparing the Canny image with the other two images, we see in the Canny result significant improvements in detail of the principal edges and, at the same time, more rejection of irrelevant features .For example, note that both edges of the concrete band lining the bricks in the upper section of the image were detected by the Canny algorithm, whereas the thresholded gradient lost both of these edges, and the Marr-Hildreth method detected only the upper one",#ERROR!
"Justify with an example how in addition to the optimum threshold, other information regarding the segmented image can be extracted from the histogram","In addition to the optimum threshold, other information regarding the segmented image can be extracted from the histogram .For example, ( *), the class probabilities evaluated at the optimum threshold, indicate the portions of the ( *) and average intensity of the classes in the original image","indicates that the farther the two means are from each other, the larger will be, implying also is a measure of separability, and maximizing this metric is equivalent to maximizing assumes implicitly that variance can be zero only when all the intensity levels in the image are the same, which implies the existence of only one class of pixels. This in turn means that Reintroducing k, we have the final results: ( ) and Then, the optimum threshold is the value, [ 0< max we simply evaluate this equation for all integer values of k (subject to the condition 0 < that yielded the maximum for which ( )] ( )] that maximizes ( *) = ( ) ( )[1 ( ) < 1) and select the value of k ( ) is maximum. It can be shown (see Problem 10.38 and (10-63) for all values of k is a relatively inexpensive computational procedure, because the maximum number of integer values that k can have is L, which is only 256 for 8-bit images. Once has been obtained, input image f(x, y) is segmented as before: 1 if ( , ) > 0 if ( , ) (10-64) for = 0, 1, 2, , 1 and = 0, 1, 2, , 1. Note that all the quantities needed to evaluate Eq. (10-62) are obtained using only the histogram of f(x, y). In addition to the optimum threshold, other information regarding the segmented image can be extracted from the histogram. For example, ( *), the class probabilities evaluated at the optimum threshold, indicate the portions of the ( *) and average intensity of the classes in the original image. In general, the measure in Eq.(10-61) has values in the range 0 ( )1 (10-65) * separability of classes, which in turn gives us an idea of the accuracy of thresholding a given image with The lower bound in Eq"
"Justify with an example how the selection of similarity criteria depends not only on the problem under consideration, but also on the type of image data available","The selection of similarity criteria depends not only on the problem under consideration, but also on the type of image data available .For example, the analysis of land-use satellite imagery depends heavily on the use of color","The selection of similarity criteria depends not only on the problem under consideration, but also on the type of image data available. For example, the analysis of land-use satellite imagery depends heavily on the use of color. This problem would be significantly more difficult, or even impossible, to solve without the inherent information available in color images. When the images are monochrome, region analysis must be carried out with a set of descriptors based on intensity levels and spatial properties (such as moments or texture). We will discuss descriptors useful for region characterization in Chapter 12 . Descriptors alone can yield misleading results if connectivity properties are not used in the region-growing process. For example, visualize a random arrangement of pixels that have three distinct intensity values. Grouping pixels with the same intensity value to form a region, without paying attention to connectivity, would yield a segmentation result that is meaningless in the context of this discussion"
Justify with an example how descriptors alone can yield misleading results if connectivity properties are not used in the region-growing process,"Descriptors alone can yield misleading results if connectivity properties are not used in the region-growing process .For example, visualize a random arrangement of pixels that have three distinct intensity values","For example, the analysis of land-use satellite imagery depends heavily on the use of color. This problem would be significantly more difficult, or even impossible, to solve without the inherent information available in color images. When the images are monochrome, region analysis must be carried out with a set of descriptors based on intensity levels and spatial properties (such as moments or texture). We will discuss descriptors useful for region characterization in Chapter 12 . Descriptors alone can yield misleading results if connectivity properties are not used in the region-growing process. For example, visualize a random arrangement of pixels that have three distinct intensity values. Grouping pixels with the same intensity value to form a region, without paying attention to connectivity, would yield a segmentation result that is meaningless in the context of this discussion. Another problem in region growing is the formulation of a stopping rule. Region growth should stop when no more pixels satisfy the criteria for inclusion in that region. Criteria such as intensity values, texture, and color are local in nature and do not take into account the history of region growth. Additional criteria that can increase the power of a region-growing algorithm utilize the concept of size, likeness between a candidate pixel and the pixels grown so far (such as a comparison of the intensity of a candidate and the average intensity of the grown region), and the shape of the region being grown. The use of these types of descriptors is based on the assumption that a model of expected results is at least partially available"
"Justify with an example how other criteria, such as the maximum size allowed for each cut, can further refine the final segmentation","Other criteria, such as the maximum size allowed for each cut, can further refine the final segmentation .For example, when using pixels and their intensities as the basis for constructing the graph, we can specify the maximum and/or minimum size allowed for each region","5. Recursively repartition the segmented parts if necessary. Note that the algorithm works by recursively generating two-way cuts. The number of groups (e.g., regions) in the segmented image is controlled by K. Other criteria, such as the maximum size allowed for each cut, can further refine the final segmentation. For example, when using pixels and their intensities as the basis for constructing the graph, we can specify the maximum and/or minimum size allowed for each region. EXAMPLE 10.24: Specifying weights for graph cut segmentation"
Justify with an example how we know from basic mechanics that elastic energy is proportional to the first derivative squared,"We know from basic mechanics that elastic energy is proportional to the first derivative squared .For example, the first derivative of a incompressible body along the direction of a stretching (or compressing) force is zero","A point (x, y) in 2-D can be represented as a vector of coordinates: (11-3) The equation of a circle in Cartesian coordinates using vector notation is = ( )= cos( ) sin( ) 2 If you wish to skip over the details of the derivation, the snake equation is given in Eq. (11-24) The classic model of snakes (Kass et al. [1988]) represents a snake as a parameterized (typically closed) curve c, with its parameter, s, normalized to the range [0, 1] for convenience: ( ) ( ) 1 The derivation that follows associates a snake with an energy, E(c), defined as having two terms ( )= + external The idea is to specify these energy terms in such a way that the final position of c(s) (corresponding to a segmentation contour) will yield the minimum total energy. Think of a snake as a rubber band. Intuitively, a rubber band stretched outside of a convex planar region would snap to the boundary of the region when released. Thus, the internal energy in Eq. (11-5) should be such that minimizing it reduces the elasticity of the rubber band, making it shrink toward the boundary. We know from basic mechanics that elastic energy is proportional to the first derivative squared. For example, the first derivative of a incompressible body along the direction of a stretching (or compressing) force is zero. In terms of our discussion, a point on an unstretchable curve cannot move along s, implying a zero first derivative along the curve. Thus, a measure that when minimized discourages stretching, can be written as The 1/2 constant in front on this and the next equation is included to cancel a 2 resulting from the derivative of squared later in our discussion. = ( ) ( ) where the prime, ( ) indicates the first-order derivative with respect to s, arg is the vector norm of the argument (see Eq. 2-51 is a constant that controls the elastic energy of the contour, and the integral indicates that ), the curve. Although c is a function of s only, we use partial derivatives for consistency when a second variable, to be introduced shortly, is present"
"Justify with an example how whenever possible, preprocessing should be used to normalize input images before feature extraction","Whenever possible, preprocessing should be used to normalize input images before feature extraction .For example, in situations where changes in illumination are severe enough to cause difficulties in feature detection, it would make sense to preprocess an image to compensate for those changes","There are two principal aspects of image feature extraction: feature detection, and feature description. That is, when we refer to feature extraction, we are referring to both detecting the features and then describing them. To be useful, the extraction process must encompass both. The terminology you are likely to encounter in image processing and analysis to describe feature detection and description varies, but a simple example will help clarify our use of these term. Suppose that we use object corners as features for some image processing task. In this chapter, detection refers to finding the corners in a region or image. Description, on the other hand, refers to assigning quantitative (or sometimes qualitative) attributes to the detected features, such as corner orientation, and location with respect to other corners. In other words, knowing that there are corners in an image has limited use without additional information that can help us differentiate between objects in an image, or between images, based on corners and their attributes. Given that we want to use features for purposes of differentiation, the next question is: What are the important characteristics that these features must possess in the realm of digital image processing? You are already familiar with some of these characteristics. In general, features should be independent of location, rotation, and scale. Other factors, such as independence of illumination levels and changes caused by the viewpoint between the imaging sensor(s) and the scene, also are important. Whenever possible, preprocessing should be used to normalize input images before feature extraction. For example, in situations where changes in illumination are severe enough to cause difficulties in feature detection, it would make sense to preprocess an image to compensate for those changes. Histogram equalization or specification come to mind as automatic techniques that we know are helpful in this regard. The idea is to use as much a priori information as possible to preprocess images in order to improve the chances of accurate feature extraction"
Justify with an example how distance versus angle is not the only way to generate a signature,"Distance versus angle is not the only way to generate a signature .For example, another way is to traverse the boundary and, corresponding to each point on the boundary, plot the angle between a line tangent to the boundary at that point and a reference line","Based on the assumptions of uniformity in scaling with respect to both axes, and that sampling is taken at equal intervals of , changes in the size of a shape result in changes in the amplitude values of the corresponding signature. One way to normalize for this is to scale all functions so that they always span the same range of values, e.g., [0, 1]. The main advantage of this method is simplicity, but it has the disadvantage that scaling of the entire function depends on only two values: the minimum and maximum. If the shapes are noisy, this can be a source of significant error from object to object. A more rugged (but also more computationally intensive) approach is to divide each sample by the variance of the signature, assuming that the variance is not zeroas in the case of Fig. 12.10(a) or so small that it creates computational difficulties. Using the variance yields a variable scaling factor that is inversely proportional to changes in size and works much as automatic volume control does. Whatever the method used, the central idea is to remove dependency on size while preserving the fundamental shape of the waveforms. Distance versus angle is not the only way to generate a signature. For example, another way is to traverse the boundary and, corresponding to each point on the boundary, plot the angle between a line tangent to the boundary at that point and a reference line. The resulting signature, although quite different from the ( ) curves in Fig. 12.10 characteristics. For instance, horizontal segments in the curve correspond to straight lines along the boundary because the tangent angle is constant there. A variation of this approach is to use the so-called slope density function as a signature. This function is a histogram of tangent-angle values. Because a histogram is a measure of the concentration of values, the slope density function responds strongly to sections of the boundary with constant tangent angles (straight or nearly straight segments) and has deep valleys in sections producing rapidly varying angles (corners or other sharp inflections)"
"Justify with an example how constant k is determined empirically, and its range of values depends on the implementation","Constant k is determined empirically, and its range of values depends on the implementation .For example, the MATLAB Image Processing Toolbox uses 0 < < 0.25","where k is a constant to be explained shortly. Measure R has large positive values when both eigenvalues are large, indicating the presence of a corner; it has large negative values when one eigenvalue is large and the other small, indicating an edge; and its absolute value is small when both eigenvalues are small, indicating that the image patch under consideration is flat. Constant k is determined empirically, and its range of values depends on the implementation. For example, the MATLAB Image Processing Toolbox uses 0 < < 0.25. You can interpret k as a sensitivity factor; the smaller it is, the more likely the detector is to find corners. Typically, R is used with a threshold, T. We say that a corner at an image location has been detected only if > for a patch at that location. EXAMPLE 12.18: Applying the HS corner detector"
"Justify with an example how all the squares in the grayscale image are of the same size (area); therefore, regardless of the image size, we can normalize the size of each square to 1","All the squares in the grayscale image are of the same size (area); therefore, regardless of the image size, we can normalize the size of each square to 1 .For example, if the image is of size 400 400 pixels, the size of each square is 100 100 = 10 pixels","MSERs are found by analyzing the nodes of the component tree. For each connected region in the tree, we compute a stability measure, , defined as + | | || | | | | + where | | is the size of the area (number of pixels) of connected region R, T is a threshold value in the range levels , and +( ) + +( + ) + ( + 1) , respectively. In terms of the component tree, regions + ( 1) [min( ), max( )], and and are respectively || | . It then follows from Eq. (12-65) that 0. MSREs are the regions corresponding to the nodes in the tree that have a stability value that is a local minimum along the path of the tree containing that region. What this means in practice is that maximally stable regions are regions whose sizes do not change appreciably across two, 2 illustrates the concepts just introduced. The grayscale image at the top consists of some simple regions of constant intensity, with values in the range [0, 255]. Based on the explanation of Eqs. (12-64) and (12-65) , we used the threshold = 10, which is in the range [min( ) = 5, max( ) = 225] . Choosing binary images on the left contains the results of thresholding the grayscale image with the threshold values shown. The resulting component tree is on the right. Note that the tree is shown root up, which is the way you would normally program it. All the squares in the grayscale image are of the same size (area); therefore, regardless of the image size, we can normalize the size of each square to 1. For example, if the image is of size 400 400 pixels, the size of each square is 100 100 = 10 pixels. Normalizing the size to 1 means that size 1 corresponds to 10 pixels (one square), size 2 corresponds to 2 10 pixels (two squares), and so forth. You can arrive at the same conclusion by noticing that the ratio in Eq. (12-65) eliminates the common 10 factor"
Justify with an example how the entries in the table are values of standard deviation used at each scale of each octave,"The entries in the table are values of standard deviation used at each scale of each octave .For example the standard deviation used in scale 2 of octave 1 is , which is equal to 1.0. (The images Detecting Local Extrema SIFT initially finds the locations of keypoints using the Gaussian filtered images, then refines the locations and validity of those keypoints using two processing steps. Finding the Initial Keypoints Keypoint locations in scale space are found initially by SIFT by detecting extrema in the difference of Gaussians of two adjacent scalespace images in an octave, convolved with the input image that corresponds to that octave","uses grayscale images to further illustrate how scale space is constructed in SIFT. Because each octave is composed of five images, it follows that we are again using = 2. We chose = 2 /2 = 0.707 and = 2 = 1.414 for this example so that the numbers would result in familiar multiples. As in Fig. 12.56 , the images going up scale space are blurred by using Gaussian kernels with progressively larger standard deviations, and the first image of the second and subsequent octaves is obtained by downsampling the octave image from the previous octave by 2. As you can see, the images become significantly more blurred (and consequently lose more fine detail) as they go up both in scale as well as in octave. The images in the third octave show significantly fewer details, but their gross appearance is unmistakably that of the same structure. FIGURE 12.57 Illustration using images of the first three octaves of scale space in SIFT. The entries in the table are values of standard deviation used at each scale of each octave. For example the standard deviation used in scale 2 of octave 1 is , which is equal to 1.0. (The images Detecting Local Extrema SIFT initially finds the locations of keypoints using the Gaussian filtered images, then refines the locations and validity of those keypoints using two processing steps. Finding the Initial Keypoints Keypoint locations in scale space are found initially by SIFT by detecting extrema in the difference of Gaussians of two adjacent scalespace images in an octave, convolved with the input image that corresponds to that octave. For example, to find keypoint locations related to the first two levels of octave 1 in scale space, we look for extrema in the function ( , , )=[ ( , , It follows from Eq. (12-66) (12-68) that ( , , )= ( , , (12-69) In other words, all we have to do to form function ( , , ) is subtract the first two images of octave 1. Recall from the discussion of the Marr-Hildreth edge detector (Section 10.2 ) that the difference of Gaussians is an approximation to the Laplacian of a Gaussian (LoG). Therefore, Eq. (12-69) is nothing more than an approximation to Eq. (10-30) . The key difference is that SIFT looks for extrema in ( , , ), whereas the Marr-Hildreth detector would look for the zero crossings of this function"
"Justify with an example how in CNNs, an important motivations for using strides greater than one is data reduction","In CNNs, an important motivations for using strides greater than one is data reduction .For example, changing the stride from one to two reduces the image resolution by one-half in each spatial dimension, resulting in a three-fourths reduction in the amount of data per image","We will discuss in the next subsection the exact form of neural computations in a CNN, and show they are equivalent in form to the computations performed by neurons in a fully connected neural net. These remarks are summarized in Fig. 13.40 , the leftmost part of which shows a neighborhood at one location in the input image. In CNN terminology, these neighborhoods are called receptive fields. All a receptive field does is select a region of pixels in the input image. As the figure shows, the first operation performed by a CNN is convolution, whose values are generated by moving the receptive field over the image and, at each location, forming a sum of products of a set of weights and the pixels contained in the receptive field. The set of weights, arranged in the shape of the receptive field, is a kernel, as in Chapter 3 . The number of spatial increments by which a receptive field is moved is called the stride. Our spatial convolutions in previous chapters had a stride of one, but that is not a requirement of the equations themselves. In CNNs, an important motivations for using strides greater than one is data reduction. For example, changing the stride from one to two reduces the image resolution by one-half in each spatial dimension, resulting in a three-fourths reduction in the amount of data per image. Another important motivation is as a substitute for subsampling which, as we discuss below, is used to reduce system sensitivity to spatial translation. To each convolution value (sum of products) we add a bias, then pass the result through an activation function to generate a single value. Then, this value is fed to the corresponding (x, y) location in the input of the next layer. When repeated for all locations in the input image, the process just explained results in a 2-D set of values that we store in next layer as a 2-D array, called a feature map"
Justify with an example how but this is not a requirement,"But this is not a requirement .For instance, a network for classifying two pattern classes could be structured with a single output (Problem 13.17 illustrates such a case) because all we need for this task is two states, and a single neuron is capable of that","Let denote a layer in the network, for = 1, 2, , . With reference to Fig. 13.31 , = 1 denotes the input layer, = is the output layer, and all other values of denote hidden layers. The number of neurons in layer is denoted . We have two options to include layer indexing in the parameters of a neural network. We can do it as a superscript, for example, () and and ; or we can use the notation consistent with the way we describe iterative expressions in the book, and also because you may find it easier to follow. Using this notation, the output (activation value) of neuron k in layer is denoted Keep in mind that our objective in using neural networks is the same as for perceptrons: to determine the class membership of unknown input patterns. The most common way to perform pattern classification using a neural network is to assign a class label to each output neuron. Thus, a neural network with assigns an unknown pattern vector x to class ( ) > ( ), = 1, 2, , ; . classes. The network Instead of a sigmoid or similar function in the final output layer, you will sometimes see a softmax function used instead. The concept is the same as we explained earlier, but the activation values in a softmax implementation are given by ( ) = exp [ ( )]/ exp [ ( )], where the summation is In this and the following section, the number of outputs of our neural networks will always equal the number of classes. But this is not a requirement. For instance, a network for classifying two pattern classes could be structured with a single output (Problem 13.17 illustrates such a case) because all we need for this task is two states, and a single neuron is capable of that. For three and four classes, we need three and four states, respectively, which can be achieved with two output neurons. Of course, the problem with this approach is that we would need additional logic to decipher the output combinations. It is simply more practical to have one neuron per output, and let the neuron with the highest output value determine the class of the input. Forward Pass Through a Feedforward Neural Network A forward pass through a neural network maps the input layer (i.e., values of x) to the output layer. The values in the output layer are used for determining the class of an input vector. The equations developed in this section explain how a feedforward neural network carries out the computations that result in its output. Implicit in the discussion in this section is that the network parameters (weights and biases) are known. The important results in this section will be summarized in Table 13.2 at the end of our discussion, but understanding the material that gets us there is important when we discuss training of neural nets in the next section"
Justify with an example how just about every system is vulnerable to buffer overflows,"Just about every system is vulnerable to buffer overflows .For example, if a hacker sends an e-mail to a Microsoft Outlook user using an address that is longer than 256 www.syngress.com 12/15/06 Page 25 characters, he will force the buffer to overflow.The recipient wouldnt even have to open the e-mail for this type of attack to be successful; the attack is successful as soon as the message is downloaded from the server","Buffer Overflow A buffer overflow attack is done by deliberately entering more data than a program was written to handle. Buffer overflow attacks exploit a lack of boundary checking on the size of input being stored in a buffer.The extra data will overflow the memory set aside to accept it, and overwrite another region of memory meant to hold some of the programs instructions.The effect is a cascade, which can eventually halt the application or the system on which it is running.The newly introduced values can be new instructions, which could give the attacker control of the target computer depending on what was input. Just about every system is vulnerable to buffer overflows. For example, if a hacker sends an e-mail to a Microsoft Outlook user using an address that is longer than 256 www.syngress.com 12/15/06 Page 25 characters, he will force the buffer to overflow.The recipient wouldnt even have to open the e-mail for this type of attack to be successful; the attack is successful as soon as the message is downloaded from the server. Microsoft quickly released a patch for this issue after it was discovered in October 2000. Cookie Poisoning When a hacker is using cookie poisoning, he or she is usually someone who has authorized access to the Web application in the first place.The hacker is usually a registered customer and is familiar with the application in question.The hacker may alter a cookie stored on his or her computer and send it back to the Web site"
"Justify with an example how if a VBA macro is stored in a separate module, it can be called from the Tools menu whenever the user wishes to activate it","If a VBA macro is stored in a separate module, it can be called from the Tools menu whenever the user wishes to activate it .For example, an office that does billing could create a macro to insert a billing form into the document automatically.There is a danger inherent in this capability, however","Macro Languages: Visual Basic for Applications (VBA) Another type of code is just as dangerous as the types of mobile code we introduced. Since this code travels with documents, and these documents travel over networks, it almost qualifies as mobile code. We are talking about macro languages. Visual Basic for Applications (VBA) is a macro language that allows users of Microsoft Office to add almost unlimited functionality to their Office documents. As macro languages go, VBA is extremely powerful. It allows all of the menu functions of an application to be executed from code (including disk operations), and allows interaction with ActiveX controls. All the applications in Office 97 and later versions of the products in this suite can make use of VBA, including PowerPoint, Word, Excel, and Access. VBA isnt just limited to Microsoft products. Since it is an accepted, welldeveloped, and powerful macro language, other application developers have adopted it. For example, Autodesk jumped on board and began implementing VBA in AutoCAD 2000.This provided AutoCAD users unprecedented control of their creations, while allowing them to program in a familiar language. Although there are similarities in syntax, VBA is not the same as Visual Basic (Table 3.2). Visual Basic includes an integrated development environment (IDE) for creating stand-alone applications. VBA, on the other hand, only runs when one of the Office Suite (or thirdparty) applications is running. VBA code is not compiled, but rather executed operation by operation from pseudo code (p-code). 74 10:53 AM Table 3.2 Comparing VBA with Visual Basic VBA Tightly integrated into the host Used to create stand-alone application applications Source code created in application stand-alone IDE Code saved in independent file Compiled code Source code created in host Code saved as part of document Not compiled (p-code) VBA originally appeared in Excel 5.0.The other Office applications had macro languages, but were all using different flavors. For example, Word used a macro language called WordBasic, and Access 1.0 used Access Basic. As of Office 97, all applications, including PowerPoint, use the standard VBA language and a similar composition tool.The applications also allow a user to record a macro. Once the macro is recorded as VBA source code, it can be viewed and edited accordingly.This is a very useful feature for users who have rudimentary programming knowledge, but may not be entirely familiar with the VBA commands. VBA is executed as a result of either user-initiated commands or events. In Figure 3.4, the message You opened the document. will be displayed every time this particular document is opened.This macro is not stored in the Normal template, and will therefore not execute when new or existing documents are opened. If a VBA macro is stored in a separate module, it can be called from the Tools menu whenever the user wishes to activate it. For example, an office that does billing could create a macro to insert a billing form into the document automatically.There is a danger inherent in this capability, however. If a macro gets to the Normal template, it has the potential to infect all the documents created with Word. Lets examine this in more detail. Security Problems with VBA Microsoft has been criticized for making VBA too powerful, and some users have gone so far as to call VBA the Virus Builder Accessory. In the case of VBA, we think it is better to give more power to users and developers than to intentionally hobble it just for the sake of a few hackers.The real problem with earlier versions of Office 97 was that it would allow a macro to run unchecked as soon as an Office document was opened. If a document contained unexpected VBA code, there was no warning to the user that this was potentially dangerous.This issue was later fixed, and the patched version of Office 97 (and later versions) informs the user if a macro is contained in the document (see Figure 3.5). As well see later in this chapter, the www.syngress.com 12/15/06 Page 75 Office security settings can be modified to determine what default actions are taken when a macro is detected"
"Justify with an example how3, the new XML-based file formats use file extensions to indicate whether a file is free of or contains macros","3, the new XML-based file formats use file extensions to indicate whether a file is free of or contains macros .For example, a Word document that didnt contain a macro would be saved as a .docx file, while one containing a macro like the one we discussed earlier would be saved with the file extension .docm","To make Microsoft Office documents containing macros more identifiable, Office 2007 uses new file extensions. As seen in Table 3.3, the new XML-based file formats use file extensions to indicate whether a file is free of or contains macros. For example, a Word document that didnt contain a macro would be saved as a .docx file, while one containing a macro like the one we discussed earlier would be saved with the file extension .docm. For each product in Office 2007, the default file format does not allow macros to be saved in the file. If code were found in a macrofree file when Office 2007 tried to open it, the application would not allow the code to execute.This prevents the user from running a macro that was accidentally or intentionally placed in a macro-free file. Table 3.3 File Extensions Used in Microsoft Office 2007 Extension Description Word 2007 XML document Word 2007 XML document that is macro enabled Word 2007 XML template Word 2007 XML template that is macro enabled Excel 2007 XML workbook Excel 2007 XML workbook that is macro enabled Default file format used when saving a Word document in Office 2007"
"Justify with an example how even though VBA is still supported by Access 2007, features added to the user interface, new controls, and macro actions allow users to access and manipulate data without the use of VBA","Even though VBA is still supported by Access 2007, features added to the user interface, new controls, and macro actions allow users to access and manipulate data without the use of VBA .For example, if a user wanted to add a new item to a drop-down list, he or she could configure the combo box to open a dialog box that would add the item and requery the list","Previous to Office 2007 (which provides greater security over blocking unsafe macros), the one Office product that was not secure was Access.There was a good reason for this, however. Access relies heavily on VBA for displaying forms and adding functionality to forms. If VBA were disabled, older versions of Access would cease to be very useful.The forms, which are used extensively in Access, are generated using VBA code.This is not true of Access 2007, however, which provides the same options for Macro Settings that are available in other Office products, thereby allowing you to prevent a database with code from opening unless you trust its safe. www.syngress.com 12/15/06 Page 83 In Access 2007, new features provide users with the ability to create applications without using any VBA code. In fact, even the templates that ship with Access 2007 are free of VBA code. Even though VBA is still supported by Access 2007, features added to the user interface, new controls, and macro actions allow users to access and manipulate data without the use of VBA. For example, if a user wanted to add a new item to a drop-down list, he or she could configure the combo box to open a dialog box that would add the item and requery the list. In doing so, no VBA code would be required, so the Access database would remain free of code and could be opened regardless of the security settings. Although Access databases could still be subject to macro viruses, it is important to note that it is not that common to find e-mail with an Access database attachment. Usually, a user would find it strange to receive a whole database from someone unless it was expected. Word and Excel are far more common attachments to receive.This doesnt mean that someone could not come up with a good social engineering trick that would lure someone into opening it, however"
Justify with an example how even nonmalicious ActiveX programs have the potential to be harmful if their security model is not sound,"Even nonmalicious ActiveX programs have the potential to be harmful if their security model is not sound .For example, the Shockwave player allows people to code multimedia content","This, in theory, should allow only safe controls to be accessed by scripting languages.There are still some major points of weakness in this model of security, which we will now explore. Security Problems with ActiveX The ActiveX security model relies on users to make correct decisions about which programs to accept and which to reject. It comes down to whether the users trust 96 10:53 AM the person or company whose signature is on the authentication certificate. Do they know enough about you to make that decision? It really becomes dangerous when there is some flashy program they just have to see. It is human nature to think that if the last five ActiveX controls were fine, the sixth one will also be fine. Even nonmalicious ActiveX programs have the potential to be harmful if their security model is not sound. For example, the Shockwave player allows people to code multimedia content. If the Shockwave player allows programmed content to look at files on your hard drive (which we dont think it does), anyone who makes content using the Shockwave control could also look at files. Perhaps the biggest weakness of the ActiveX security model is that any control can do subtle actions on a computer, and the user has no way of knowing. It would be very easy to get away with a control that silently transmitted confidential configuration information on a computer to a server on the Internet.These types of transgressions, while legally questionable, could be used by companies in the name of marketing research"
"Justify with an example how as such, it is often best to have more than one on a computer","As such, it is often best to have more than one on a computer .For example, you might run AVG Anti-Virus on a regular, scheduled basis, and occasionally run another program. Microsoft Malicious Software Removal Tool www.microsoft.com/security/malwareremove/default.mspx 363_Web_App_03.qxd 10:53 AM Understanding the Risk Associated with Mobile Code Chapter 3 However, what about finding out who installed it? Hackers will need to know your IP address to connect to the server on your system","Once youve chosen the type of scan to perform, the tool will scan either your entire system or areas of it (depending on the configuration youve chosen) to find and remove any malicious software that may exist on your computer. The reliability of such tools being able to find and remove Trojans from a system will vary. In many cases, you can run several different Anti-Spyware removal tools and find that one will detect something the others did not. As such, it is often best to have more than one on a computer. For example, you might run AVG Anti-Virus on a regular, scheduled basis, and occasionally run another program. Microsoft Malicious Software Removal Tool www.microsoft.com/security/malwareremove/default.mspx 363_Web_App_03.qxd 10:53 AM Understanding the Risk Associated with Mobile Code Chapter 3 However, what about finding out who installed it? Hackers will need to know your IP address to connect to the server on your system. Often, a hacker will just post the BO2K server file to Usenet newsgroups, so he doesnt know who ended up downloading and installing it. A plug-in for the server will actually send an e-mail message to the hacker with your IP address once the server is activated. If the hacker has included a plug-in called Butt Trumpet 2000 (we apologize for the naming of these utilitiesthey are hackers, after all), you can actually open the server exe file with a hex editor like UltraEdit (available from www.ultraedit.com) and view the hackers e-mail address. We installed the BT2K plug-in and configured it to send the IP address to our mail address. In Figure 3.15, you can see the address on the righthand side of the hex editor.To find the address, in UltraEdit select Search, Find, and enter trumpet as the find criteria (Figure 3.16). Make sure to select Find ASCII; otherwise, it will search through the hex code only"
"Justify with an example how in Step 1, the user visits the Web site, and submits a request to the Web server","In Step 1, the user visits the Web site, and submits a request to the Web server .For example, lets say the user has subscribed to a magazine, and wants to change his or her subscription information.The user enters an account number, name, and address into a form on a Web page, and then clicks Submit.This information is sent to the Web server for processing","In Step 1, the user visits the Web site, and submits a request to the Web server. For example, lets say the user has subscribed to a magazine, and wants to change his or her subscription information.The user enters an account number, name, and address into a form on a Web page, and then clicks Submit.This information is sent to the Web server for processing. In Step 2, CGI is used to have the data processed. Upon receiving the updated data, the Web server identifies the submitted data as a CGI request. Using CGI, the form data is passed to an external application. Because CGI communicates over HTML, which is part of the TCP/IP protocol suite, the Web servers CGI support uses this protocol to pass the information on to the next step"
"Justify with an example howthis is particularly important to remember if youre thinking of allowing users to enter the path to a file, or use hyperlinks to tell the CGI program to load a particular file","This is particularly important to remember if youre thinking of allowing users to enter the path to a file, or use hyperlinks to tell the CGI program to load a particular file .For example, lets say you were going to add a Knowledge Base to your site, where users could open documents containing common issues with products your company sells","How to Write Tighter CGI Scripts A number of security holes can exist in poorly written scripts, and if hackers know about a particular vulnerability, it can be used to hack your site. Each security hole you plug on your system will make it more difficult for hackers and deter them from trying further. Because CGI scripts can provide such vulnerabilities, it is important that youre aware of possible problems before they are written. By avoiding common mistakes and following good practices when creating CGI scripts, you can write tighter code that prevents your system from being attacked. Some of the problems well discuss here regard controlling permissions, user input, and using error-handling code. In creating CGI scripts, you will probably create an interface that will access your CGI program. In most cases, this will be a form that allows users to enter data on a Web page. Upon clicking Submit, data is then passed to the CGI program to be processed. However, while this is the common method used to access CGI programs, it is important to realize that users may be able to access the script directly if www.syngress.com 12/15/06 Page 125 they know where it resides on the server.This can be a problem if a client-side script is used in the Web page to validate data before it is sent.The GET method sends data to the server as part of the URL. If users entered the URL into the address bar of their browser with any data they wanted, they could bypass any client-side scripting thats used to validate data. Using the POST method will make it more difficult to pass the data to a CGI script. However, this can also be bypassed if the user creates his or her own Web page to call your CGI script, and then enters any data he or she wants. Because client-side scripts can be viewed and possibly manipulated by users, you should write code into the CGI program itself that will validate the data it receives. Since the CGI script runs on the server itself, the user wont be able to circumvent your data checking and pass improper data to the program.You should never trust data being passed to your CGI program.This is particularly important to remember if youre thinking of allowing users to enter the path to a file, or use hyperlinks to tell the CGI program to load a particular file. For example, lets say you were going to add a Knowledge Base to your site, where users could open documents containing common issues with products your company sells. A Web page would allow users to open text files, which are then formatted using a CGI script. The argument passed to the CGI script would be the path to that file. If the page asked users to specify the text file to open by entering a path, they could conceivably open any file the system is able to access, or enter the path into the URL in the address bar of their browser. If they entered the path and filename of a password file, the CGI script would display the contents of that password file to a user. For example, if your CGI program automatically looked for documents in the /inet/docs directory, a user could enter the path ../../etc/password in the URL. For this reason, you should control where your CGI program will look for documents, and control permissions on that directory.To prevent users from looking higher than this directory in the document structure, you should ensure that expressions arent permitted in a path, and proper permissions have been set on each directory to control access"
"Justify with an example how if users were allowed to open a document by specifying its name, its possible for them to enter a semicolon and then a second command","If users were allowed to open a document by specifying its name, its possible for them to enter a semicolon and then a second command .For example, if they were opening a document called help.txt, they could enter the following: help.txt;rm -rf/ This code would open the document called help.txt","WARNING One of the most common methods of exploiting CGI scripts and programs is used when scripts allow user input, but the data users are submitting is not checked. Controlling what information users are able to submit will dramatically reduce your chances of being hacked through a CGI script. This includes limiting the methods that data can be submitted through a form (by using drop-down lists, check boxes, and other methods), and properly coding your program to control the type of data www.syngress.com 363_Web_App_04.qxd 12/15/06 Page 126 being passed to your application. This would include input validation on character fields, such as limiting the number of characters to only what is needed. An example would be a zip code field being limited to five numeric characters. Another similar problem with bad data being passed to the program occurs when additional characters are added to a file thats specified to open or be used by the CGI program. In a shell script, a semicolon (;) is used to specify the end of a command line.The script then considers what comes after the semicolon a new command, which is then executed. If users were allowed to open a document by specifying its name, its possible for them to enter a semicolon and then a second command. For example, if they were opening a document called help.txt, they could enter the following: help.txt;rm -rf/ This code would open the document called help.txt. Once it is opened, the second command would execute, which would erase the hard disk without asking for confirmation. From this, it should become clear that there is a need to control user input, and limit what they do when accessing a CGI script. It is important to ensure the form used to collect data from users is compatible with the CGI script. While mistakes happen, and you may enter the wrong name or value in a form, there are other situations in which this may be a more common problem. In larger organizations or businesses that provide Web services, more than one person may be responsible for different aspects of a Web site. A team of people may create the Web site, with one person creating graphics, another writing CGI scripts, and yet another writing HTML. When this happens, errors may result. For this reason, it is important that you evaluate CGI scripts and forms on your site to ensure the two work correctly together. Checking code requires looking over the form to visually see that names and values are correct, and should include implementing code in the CGI script that checks the data it receives.The CGI scripts you create shouldnt be designed to assume that data passed to it is correct.To illustrate this, lets say we have a form for collecting user surveys. On the form, a question is asked: Do you drink coffee? Below this are two radio buttons to control user input, which allow the user to answer Yes or No. In processing this question, you might write the following code in your script"
"Justify with an example how in addition, each of the switches can be activated by only entering the first letter of the command","In addition, each of the switches can be activated by only entering the first letter of the command .For example, rather than entering host, you could simply type h.The exceptions to this are dbcheck, debug, update, and verbose, which all need to be completely typed out","-verbose Prints extended information on tests performed during a scan. Of the various switches that can be used with Nikto, the only one that is required is the host switch, which specifies what is going to be tested. In addition, each of the switches can be activated by only entering the first letter of the command. For example, rather than entering host, you could simply type h.The exceptions to this are dbcheck, debug, update, and verbose, which all need to be completely typed out. In using the host switch, you can specify either a single IP address or host name, or a file containing a listing of different sites to test.This allows you to scan multiple targets without needing to enter the IP address or host name of each individually. In creating a list of targets, you can use a text editor to create a text file containing the name or IP address of each host on a different line. Optionally, you can also specify the port to use during your scan, with a comma used to indicate multiple ports to scan. If not port is specified, the default of port 80 is used. For example: 363_Web_App_04.qxd 11:00 AM Vulnerable CGI Scripts Chapter 4 www.nonexist.com:8443, 443 www.syngress.com:80 As you can see, Nikto provides a wide degree of versatility in scanning a site for potential problems, and is able to scan multiple sites with little initial configuration"
"Justify with an example howyour script should set limits on the amount of data accepted, so incorrect data will have a better chance of being ignored","Your script should set limits on the amount of data accepted, so incorrect data will have a better chance of being ignored .For example, if a variable returns the last name of a person, you could set a length on the data being returned","Dont use GET to send sensitive data. If the GET method is used, you wont have to worry about setting limits, as this method is self-limiting.The GET method will only deliver about a kilobyte of data to a script. In addition, a Web server can automatically limit the size of data placed into the QUERY_STRING environment variable, which determines how the GET method will pass data to a CGI script. www.syngress.com 12/15/06 Page 145 However, if the GET method is used, it will include any QUERY_STRING information in the URI string.This makes it easier to see the inner workings of the CGI script, and therefore more likely to be interesting to hackers. If you saw www.host.com/cgi-bin/print.cgi?file_to_print=../ file.txt, it would be tempting to change the file_to_print parameter. Although there are ways to get this information regardless of the method used, and there is no substitute for good security, there are some virtues to obfuscation.The POST method should be used as an alternative.Your script should set limits on the amount of data accepted, so incorrect data will have a better chance of being ignored. For example, if a variable returns the last name of a person, you could set a length on the data being returned. By checking variables such as CONTENT_LENGTH, you could ignore excessive amounts of data being passed to the script, so there is less chance a hacker will pass large amounts of data in an attempt to crash the program.The GET method should never be used when sensitive data is being sent to a CGI program.This is because any GET command will appear in the URL, and will be logged by any servers. For example, lets say you enter your credit card information into a form that uses the GET method.The URL may appear like this: http://www.nonexist.com/ card.asp?cardnum=1234567890123456. As you can see, the GET method appends the credit card number to the URL.This means that anyone with access to a server log will be able to obtain this information. Never include sensitive information in a script. At times, you may find it useful to include usernames and passwords in your CGI program, or have this information passed from form data to a database. If included in your code, you should remember that hackers who can access source code will be able to view this information. If you are using a compiled language, this will be more difficult to obtain. Regardless, you should never give more information than is necessary. By including passwords and usernames in your code, you are creating a possible security risk"
"Justify with an example howthis applies to permissions you assign to various user accounts on your server, and user accounts your CGI program uses to access data","This applies to permissions you assign to various user accounts on your server, and user accounts your CGI program uses to access data .For example, if your program accessed a SQL Server database, you wouldnt want to use the sa account (which is the system administrator account)","Due to the problems that can result from SSI, the best solution for security will be to disable SSI from your system, so these commands cant be exploited. Never give more access than is necessary. In the same light, you should never provide more access than is necessary for a user to complete a task.This applies to permissions you assign to various user accounts on your server, and user accounts your CGI program uses to access data. For example, if your program accessed a SQL Server database, you wouldnt want to use the sa account (which is the system administrator account). By giving this significant power to a user, a hacker may take advantage of it and acquire access to sensitive data. Program your CGI scripts and programs on a computer other than the Web server, and ensure temporary files and backup files of your scripts are removed from the server before your site goes live. In doing so, you will avoid the possibilities of hackers modifying your code as a program is being written.This will also lessen the chances of hackers accessing temporary and backup files on the hard disk. If you are using languages such as C or C++, your code is compiled before it is available for execution on the Web server.This may make you think that no one can read the source code. However, even if youve removed the source code for your CGI program from the Web server before your site goes live, you should ensure that no backup or temporary files are left on the server.These may be created when programming the code, and hackers who access these files may be able to view your source code. Double-check the source code of any third-party CGI programs. If any are used, you should review the source code for any possible security holes. A simple way to acquire access to a server would be to make a CGI program available to others, and include code that sends information to the author. Looking over the source code of the program before making it available on your site can identify this threat. If a CGI program doesnt make its source code available, and you are unsure whether the author is trustworthy, you should avoid using the program altogether"
"Justify with an example how for this reason, a number of Web servers offer you the ability to specify a different name for these directories","For this reason, a number of Web servers offer you the ability to specify a different name for these directories .For example, you could specify that CGI scripts and programs be contained in a directory named CGI, PROGS, or any other name you choose","Of particular importance to placing scripts and programs in a CGI-BIN directory is organization, making it easier to find and maintain these programs if they are located in the same directory. Imagine trying to find a single script on a site that has them scattered across several places. In addition to the time youll spend trying to find a particular script, there is a greater chance that one will reside in a directory with improper permissions, causing a potential security threat. Because CGI-BIN is the common name for a directory used in storing CGI scripts and programs, it makes sense that hackers would first look to see if this directory exists, and then try to exploit improper permissions and bad coding. For this reason, a number of Web servers offer you the ability to specify a different name for these directories. For example, you could specify that CGI scripts and programs be contained in a directory named CGI, PROGS, or any other name you choose. If a hacker who exploits CGI vulnerabilities goes to your site, he or she will find that a CGI-BIN directory isnt there.The hacker may feel its easier to move on to another site that does have a CGI-BIN, and leave you alone. Moreover, as mentioned earlier, most hacking tools that look for CGI vulnerabilities will only look in the CGI-BIN. Since this directory doesnt exist, these tools will show that no vulnerabilities are found, or no CGI scripts exist"
Justify with an example how working from newest to oldest vulnerabilities in particular versions may also reveal inherent problems that have been passed from version to version of a Web server,"Working from newest to oldest vulnerabilities in particular versions may also reveal inherent problems that have been passed from version to version of a Web server .For example, in IIS 3.0 an administrative script could be used by hackers to remotely access the script, and by omitting a particular argument, cause a DoS attack.The Absent Directory Browser Argument vulnerability continued to later versions of IIS, as the script was included in versions 4.0 and 5.0.The same problem of passing a vulnerability from version to version is also seen with the Unicode Bug, which originated in version 4.0 of IIS and wasnt fixed until well after version 5.0 was released","Furthermore, if the exploit doesnt work, it is a sure sign that the service in queswww.syngress.com 363_Web_App_05.qxd 12/15/06 Page 172 tion has been patched against current and historic vulnerabilities, and other services should be tried instead. With this in mind, the attack plan should always include the second most likely vulnerable service and a tertiary-level vulnerable service. Because most systems on the Internet these days are rarely up to date on patch levels, it is unusual that even a three-layer attack plan is exhausted before an actual penetration occurs. Working from newest to oldest vulnerabilities in particular versions may also reveal inherent problems that have been passed from version to version of a Web server. For example, in IIS 3.0 an administrative script could be used by hackers to remotely access the script, and by omitting a particular argument, cause a DoS attack.The Absent Directory Browser Argument vulnerability continued to later versions of IIS, as the script was included in versions 4.0 and 5.0.The same problem of passing a vulnerability from version to version is also seen with the Unicode Bug, which originated in version 4.0 of IIS and wasnt fixed until well after version 5.0 was released. Upon deciding the primary, secondary, and tertiary methods of attack, the plan can go into action. In this instance, the Unicode exploit will be attempted first.The method for this attack is to use Unicode values for special characters (such as .. and /), which can be used to traverse directory trees not normally available to the Web site visitor"
"Justify with an example how if a hacker can alter Web pages to show he or she has hacked the site, the attacker can also modify other documents, inserting information that would cause damage","If a hacker can alter Web pages to show he or she has hacked the site, the attacker can also modify other documents, inserting information that would cause damage .For example, customers unknowingly following instructions on scanning their hard drive for viruses could instead be following the steps to format their hard drive","While publicity surrounding Web site defacements has dwindled in favor of attacks involving financial crimes, they are still serious attacks. In addition to being an embarrassment, it is a visible statement that the site has been compromised, and can impact whether customers want to use the companys services, purchase items online, provide personal information, or continue using the site. It can also be dangerous if content buried in the site is modified. Just imagine contact information being altered to provide incorrect addresses, phone numbers, and e-mail addresses. Worst still, some sites provide instructions on using their products, and these too can be compromised. If a hacker can alter Web pages to show he or she has hacked the site, the attacker can also modify other documents, inserting information that would cause damage. For example, customers unknowingly following instructions on scanning their hard drive for viruses could instead be following the steps to format their hard drive. Some IDSs have features to prevent the defacement of Web pages and other content by using checksums or checking digital signatures in the page. When the site is compromised, it may use a cached version of the page to automatically replace one that may have been modified. However, this may not be immediate, as the detection of changed content has to be scheduled. In between the regular intervals of being checked, the defaced pages remain visible"
"Justify with an example how as with many reconnaissance attacks, seemingly inconsequential data can be given up at any time that, when pieced together at the attackers leisure, may seriously compromise site security","As with many reconnaissance attacks, seemingly inconsequential data can be given up at any time that, when pieced together at the attackers leisure, may seriously compromise site security .For example, personnel in most any company have to field calls regarding the systems they use.Through social engineering, an outsider (who has no idea what services are available at a given site) could likely call a given company and claim to be a new hire whos having difficulty using a particular service that hes guessed the company might be using.The receptionist would likely indicate that she could put him through to the system administrator.This, of course, would confirm that the company does indeed use that particular service","Sensitive Information Social engineering entails a myriad of confidence techniques that rely on weaknesses in human trust relationships rather than inadequacies in software design.The goal of any social engineering attack is to gain the trust of authorized personnel to the point they will provide the attacker the information he needs to breach the target systems security. As with many reconnaissance attacks, seemingly inconsequential data can be given up at any time that, when pieced together at the attackers leisure, may seriously compromise site security. For example, personnel in most any company have to field calls regarding the systems they use.Through social engineering, an outsider (who has no idea what services are available at a given site) could likely call a given company and claim to be a new hire whos having difficulty using a particular service that hes guessed the company might be using.The receptionist would likely indicate that she could put him through to the system administrator.This, of course, would confirm that the company does indeed use that particular service. Of course, the skilled social engineer would ask for the name of the administrator before being connected. Within a minutes time, the social engineer has gone from knowing nothing about the services the company uses to having a small picture. Even worse, hes now on a first-name basis with the companys system administrator. www.syngress.com 12/15/06 Page 179 The ruse certainly wont end there. After hes been put through to the system administrator, the social engineer can quickly shift gears and represent himself as a fellow administrator and state that hes been having difficulty with the present firewall the company is using. At that point, the system administrator will likely provide immediate feedback that the company isnt using a firewall, or even divulge the make and model of the firewall they do use"
"Justify with an example how while other languages have *printf functionality, their handling of these issues may exclude them from exploitation","While other languages have *printf functionality, their handling of these issues may exclude them from exploitation .For example, Perl is not vulnerable (which stems from how Perl actually handles variable storage)","NOTE You can find more information on format string vulnerabilities in an analysis written by Tim Newsham, available online at http://comsec.theclerk.com/CISSP/FormatString.pdf. Format string bugs are, again, seemingly limited to C/C++. While other languages have *printf functionality, their handling of these issues may exclude them from exploitation. For example, Perl is not vulnerable (which stems from how Perl actually handles variable storage). So, to find potential vulnerable areas in your C/C++ code, you need to look for the functions printf(), fprintf(), sprintf(), snprintf(), vprintf(), vfprintf(), vsprintf(), vsnprintf(), wsprintf(), and wprintf(). Determine if any of the listed functions have a format string containing user-supplied data. Ideally, the format string should be static (a predefined, hard-coded string); however, as long as the format string is generated and controlled internal to the program (with no user intervention), it should be safe"
"Justify with an example howyou will also gain an understanding of Javas other weaknesses, and see how numerous bugs and exploits have caused Java to change over the years","You will also gain an understanding of Javas other weaknesses, and see how numerous bugs and exploits have caused Java to change over the years .For example, we examine how it is possible to bring down a Java program by creating multiple threads that eventually bog down and crash the system","A tool as powerful as Java may still present some threat as long as there is room for error in its use.This chapter walks you through the process of ensuring your Java code is sound and secure.To code secure Java applications, you must understand how Java security works and how the environment itselfand thus applications created in ithandle security.You will also gain an understanding of Javas other weaknesses, and see how numerous bugs and exploits have caused Java to change over the years. For example, we examine how it is possible to bring down a Java program by creating multiple threads that eventually bog down and crash the system. This chapter discusses four distinct areas of Java.The first section is an overview of the Java security architecture, where we introduce the concepts of basic security and the sandbox mechanism that allows most of Javas security to take place. Next, we discuss how Java handles security by exploring Javas built-in security mechanisms, which together comprise the Java sandbox. Next, we look at potential weaknesses in Java from a developer point of view.This section describes how others can exploit weaknesses to wreak havoc with your Internet application. Finally, we get into the nuts and bolts of coding functional but secure Java applets by looking at how to implement various security features, including authentication and encryption.This section is also filled with examples of code, so get that compiler ready"
"Justify with an example how in other cases, a program written to use a particular version may have conflicts and fail to run properly with a newer version","In other cases, a program written to use a particular version may have conflicts and fail to run properly with a newer version .For example, a popular payroll program required version 1.3.1_02 of the JRE and for the longest time would automatically download it from their site","Add/Remove Programs The other method of seeing which version of the JRE is installed is to visit Suns Web site at http://java.com/en/download/help/testvm.xml. As seen in Figure 7.2, this Web page provides a test that determines whether Java is running properly www.syngress.com 12/18/06 Page 231 on your system, and which version of the JRE is currently installed. It also provides the ability to download the latest version of the JRE, which may or not be the best thing to do in some circumstances. In looking at the information provided in Figures 7.1 and 7.2, youll notice that an older version of the JRE is installed on the machine in question. While its possible that someone may have overlooked upgrading the JRE on this machine, it is also possible that it needs to run an older version and shouldnt be upgraded. If a program written in an older version of Java loads and looks to see that a particular version of the JRE is installed (i.e., the latest version at the time it was written), it may fail to load if a newer version of the JRE is on the computer. In other cases, a program written to use a particular version may have conflicts and fail to run properly with a newer version. For example, a popular payroll program required version 1.3.1_02 of the JRE and for the longest time would automatically download it from their site. The Java payroll program wouldnt run with newer versions of the JRE, and would often have conflicts if multiple versions of the JRE were installed. After some time, it was written to run with a newer version, but until then, users of the program would need to decide whether they wanted to run this program or others written for later versions of the JRE. Since employees like to be paid, the payroll program often won out, and the older version was installed on company computers unless someone specifically required a later version. This meant that almost every computer on the network had the older version of the JRE installed, with all the bugs and vulnerabilities that came with it. Obviously, although this is problematic to network administrators, it presents delightful opportunities for hackers. Another issue with Java is that applications written with newer versions of the JDK may not work with older versions of the JRE. This tradition has unfortunately www.syngress.com 363_Web_App_07.qxd 12/18/06 Page 232 been held in the 1.5 version of Java. Just as classes made under Java 1.4 wont work under 1.3, code thats compiled with the Java 1.5 compiler wont run on previous versions of the JVM. Even if a program written with the JDK 1.5 doesnt use any of the latest features or APIs, it cant run on systems that are running older JREs. This lack of backward compatibility has long been an issue, but isnt one that seems likely to be rectified. Because of this, developers need to determine what version of the JRE most of their customers are using, and then use the suitable JDK to develop projects for that version"
Justify with an example how you may have seen or heard of various emulators available that allow your computer to run programs written for another computer,"You may have seen or heard of various emulators available that allow your computer to run programs written for another computer .For example, CCS64 is a program for Windows that allows you to run old Commodore 64 games and programs on your PC.This and other emulators that allow your computer to function as different computers and game systems (like PlayStation and Xbox) can be found at www.emulator-zone.com","www.syngress.com 12/18/06 Page 237 java.net.ServerSocket.accept() java.lang.System.print() In the Sandbox java.lang.Math.sin() java.lang.System.exit() All Java code is executed in the JVM, which is essentially an interpreter that translates the Java code and allows it to run on your PCsort of like an intermediary between your Java code and your operating system. A JVM also exists in your browser. As soon as a user surfs to your Web page with a browser, your Java applet will begin executing on the browser virtual machine. You may have seen or heard of various emulators available that allow your computer to run programs written for another computer. For example, CCS64 is a program for Windows that allows you to run old Commodore 64 games and programs on your PC.This and other emulators that allow your computer to function as different computers and game systems (like PlayStation and Xbox) can be found at www.emulator-zone.com. There is even a Commodore 64 emulator available at www.dreamfabric.com completely written in Java. How cool is that? Even though you dont actually own a Commodore 64, you have a virtual machine of a Commodore 64 running on your PC.The JVM is like an emulator that allows Java bytecode to execute on almost any operating system. Because the code is run through a virtual machine, it allows restrictions to be placed on what the code is allowed to do under different circumstances. Normally, when a program is run on a local machine, it has the capability to read and write to the hard drive at will, and can send and receive information to any computer it can contact on a network. If the code is programmed as an applet, however, it becomes more restricted in what it can do. www.syngress.com 363_Web_App_07.qxd 12/18/06 Page 238 Security and Java Applets In JDK 1.1 and earlier, a schism occurred between Java programs and Java applets"
"Justify with an example howthe mathematics behind the algorithms does not have to be understood to use the system, but if used properly, your message should be close to 100-percent secure","The mathematics behind the algorithms does not have to be understood to use the system, but if used properly, your message should be close to 100-percent secure .For example, lets say you are designing a client program that receives messages from central headquarters.The design spec for the program says you absolutely positively have to be sure the message was not intercepted on its way from HQ to the client and modified","Private Signature + Verification Public Signature 12/18/06 Page 269 The creator of a message uses the private key. Using an algorithm (supplied in the java.security package) and the private key, a user can create a signature.This signature is unique to the message it was created with.The message and the signature are then sent to someone else. When she receives the message, she can verify the signature. An algorithm is run that uses the message, the signature, and the public key. It can then verify that the public key matches the signature.The important thing to remember about this is that only the private key can create the signature.The public key cannot be used to create a signature (otherwise, this would invalidate the entire security model). In addition, a private key cannot be derived from a public key. The beauty of this method is that it allows secure transactions over insecure transport modes, such as the Internet.The mathematics behind the algorithms does not have to be understood to use the system, but if used properly, your message should be close to 100-percent secure. For example, lets say you are designing a client program that receives messages from central headquarters.The design spec for the program says you absolutely positively have to be sure the message was not intercepted on its way from HQ to the client and modified. In this instance, you could embed the HQs public key right in the program. The HQ server program would contain the private key, and would include a digital signature with each message it sent out.The client program would use the public key to verify the message was not altered, and it originated at HQ.This security implementation is both simple andmore importantlyinvisible to the users"
Justify with an example how Authentication Digital signatures on their own work fine for verification of a limited number of people you are familiar with,"Authentication Digital signatures on their own work fine for verification of a limited number of people you are familiar with .For example, if your friend Julie sends you a message, and you check the signature with the public signature on her Web page, you can verify that Julie in fact sent you the message and it was not altered","// verifying signature: PublicKey pubKey = pair.getPublic(); try { Signature sigVerify = Signature.getInstance(""DSA""); sigVerify.initVerify(pubKey); boolean passed = sigVerify.verify(signature); System.out.println(""""); System.out.println(""Did the verification pass? "" + passed); } catch(Exception e) {} This code first grabbed the public key from the key pair.Then, the code created and initialized a Signature object with the public key. It then used the method verify() 4:07 PM to check if the signature matched with the public key (which it should in this example). Digital signatures are at the heart of authentication, which is our next topic. Authentication Digital signatures on their own work fine for verification of a limited number of people you are familiar with. For example, if your friend Julie sends you a message, and you check the signature with the public signature on her Web page, you can verify that Julie in fact sent you the message and it was not altered. What if you receive a message from someone you dont know, say from a small company in Scotland interested in cloning your pets? They may have sent a signature, and you can go to their Web site and verify the signature against the one posted there, but how do you know they are who they say they are? Just because the signature is verified doesnt really mean anything. After all, anyone can obtain a key-pair and sign a message, but could be pretending to be someone he is not"
Justify with an example how it is up to the trust company to verify that people are who they say they are and there are various levels of authentication they can receive,"It is up to the trust company to verify that people are who they say they are and there are various levels of authentication they can receive .For example, a VeriSign Class 1 ID means they just have a valid e-mail address from the entity, but the name could be faked","A certificate is a collection of data that contains, among other things, the name of an entity being certified (the stranger), the name of a signer of a certificate (a trust company usually), the public key of the entity being certified, and the signature of the trusted entity (trust company). If an individual or company wants to obtain a digital ID, they first obtain a key-pair (see Figure 7.19). As usual, they keep the private key to themselves, but hand the public key to a trust company.The trust company digitally signs the public key with its own private key, and this is sent to you with the message from the individual. Using the trust companys public key, you verify that the public key of the individual is authentic, and then apply the public key to the message to verify the signature. It is up to the trust company to verify that people are who they say they are and there are various levels of authentication they can receive. For example, a VeriSign Class 1 ID means they just have a valid e-mail address from the entity, but the name could be faked. Higher levels of trust can be obtained through using a notary public, who can even check on the financial rating of the company. Most Internet applications use the X.509 certificate for carrying out this trust system. 363_Web_App_07.qxd 4:07 PM Securing Your Java Code Chapter 7 Stranger Stranger signs message with private key. Public key A held by Trust Company"
Justify with an example howthe bytecode verifier just checks your code for everything the compiler checks,"The bytecode verifier just checks your code for everything the compiler checks .For example, is the code trying to access a private variable? Are all the variables initialized? If someone alters the bytecode but it still conforms to the compiler checks, the code be executed by the JVM.To make sure it hasnt been changed, either a message digest or a digital signature must be used. Q: What is the difference between a message digest and a digital signature? A: A message digest is a unique hash that represents a message","However, what if the object needs to use or create another class that does not exist in your class path? In this case, if your program tries to use the class, it will not find it in the class path.The class will need to be loaded into the JVM using a class loader of your own. Q: Does the bytecode verifier check if the code has been altered? A: No it doesnt.The bytecode verifier just checks your code for everything the compiler checks. For example, is the code trying to access a private variable? Are all the variables initialized? If someone alters the bytecode but it still conforms to the compiler checks, the code be executed by the JVM.To make sure it hasnt been changed, either a message digest or a digital signature must be used. Q: What is the difference between a message digest and a digital signature? A: A message digest is a unique hash that represents a message. It can be checked to ensure a message has not been altered. A digital signature uses a private key to create a hash that can be verified by the public key.This ensures the message has not been altered, and belongs to the holder of the private key"
"Justify with an example how all too often, Web pages will add ActiveX controls to a site when something less powerful could achieve the same functionality","All too often, Web pages will add ActiveX controls to a site when something less powerful could achieve the same functionality .For example, DHTML or scripting might provide the same features of an ActiveX control, thereby removing the need to use such a control on a site","www.syngress.com 12/18/06 Page 327 (http://msdn.microsoft.com/library/default.asp?url=/workshop/components/activex /security.asp). The main reason for this is that because ActiveX controls are a COM object, it has the capability to do anything on the computer the user who is currently logged in can do. In other words, if the user has the ability to write to the registry, or has full access to the hard drive, so does the ActiveX control. The ends to this depend on whether the person who wrote the control did so for benign or malicious reasons. Even if the programmer was sincere in his or her intentions, an application can exploit vulnerabilities in the control and use it for other purposes. Because of the power an ActiveX control can have on a system, its important for Web page designers and developers to decide whether ActiveX is even necessary on a page. All too often, Web pages will add ActiveX controls to a site when something less powerful could achieve the same functionality. For example, DHTML or scripting might provide the same features of an ActiveX control, thereby removing the need to use such a control on a site. By limiting ActiveX, you are also limiting the potential that your site could be used to exploit ActiveX vulnerabilities. Another issue with ActiveX controls is the use of Authenticode technology to digitally sign an ActiveX control. Microsoft feels they can guarantee to the user where the control came from and that it has not been tampered with since it was created. In most cases, this is true, but there are several things Microsoft does not do, which pose a serious threat to the security of your individual machine and your network.The first and most obvious danger is that Microsoft doesnt limit the access the control has after it is installed on your local machine.This is one of the key differences between ActiveX and Java. Java uses a method known as sandboxing. By sandboxing a Java applet, you ensure the application is running in its own protected memory area, which isolates it from things like the file system and other applications.This puts some serious limitations on what you can do with a control. ActiveX controls, on the other hand, have the same rights as the user who is running them after they are installed on a computer. Microsoft also does not guarantee the author is the one using the control, or it is being used in the way it was intended, or on a site or pages it was intended for. Microsoft also cannot guarantee that the owner of the site or someone else has not modified the pages since the control was put in place.The exploitation of these vulnerabilities poses the greatest danger associated with using ActiveX controls. An excellent example of how viruses can use ActiveX controls is the Scriptlet.Typelib vulnerability that caused major problems for Microsoft users in 1999. Scriptlet.Typelib is a Microsoft ActiveX control developers use to generate Type Libraries for Windows Script Components (WSCs). One of the functions of this control is that it allows files to be created or modified on the local computer. Obviously, this ActiveX control should be protected from untrusted programs. According to the CERT Coordination Center (CERT/CC), this control was www.syngress.com 363_Web_App_09.qxd 12/18/06 Page 328 incorrectly marked as safe for scripting when it was shipped and could be used to write malicious code to access and execute this control without your ever knowing it has happened.Two well-known viruses have exploited this vulnerability: kak and BubbleBoy. Both are delivered through HTML formatted e-mail and affect the Windows registry and other system files. Microsoft issued a patch for both viruses in 1999"
Justify with an example how both provide different versions of their certificates depending on what platform development work is being completed,"Both provide different versions of their certificates depending on what platform development work is being completed .For example, different certificates exist for Microsoft Authenticode, Netscape Object, Microsoft Office 2000 and VBA, Marimba, Macromedia Shockwave, Apple, and others","The method used to instill this trust is known as control signing. www.syngress.com 12/18/06 Page 339 Control Signing To sign a control, you need a digital code-signing certificate or ID (see Figure 9.7) from a certificate authority (CA).The two leading CAs for signing ActiveX controls in the United States are VeriSign (www.verisign.com) and Thawte (www.thawte.com). Both provide different versions of their certificates depending on what platform development work is being completed. For example, different certificates exist for Microsoft Authenticode, Netscape Object, Microsoft Office 2000 and VBA, Marimba, Macromedia Shockwave, Apple, and others. Both CAs offer the same general type of product, each with its own positive points, sort of like a Cadillac and a Chevrolet. Both are good products; one is a little more affordable, one comes with a few more bells and whistles, but both will get you where youre going. If you are a European developer, you may prefer to do business with a European CA.Two of the most popular European CAs are GlobalSign (www.globalsign.net) and BT (formerly TrustWise) (www.btglobalservices.com/en/products/trustservices/). So, now that you have this digital certificate, what do you do with it? Well, because this chapter is about ActiveX controls, we concentrate on signing code for the Microsoft platform and Microsoft Authenticode"
Justify with an example how another way is to cause the server to run a resource intensive process multiple times,"Another way is to cause the server to run a resource intensive process multiple times .For example, in 2006, commands sent to the ColdFusion Flash Remoting Gateway created an infinite loop that eventually caused the ColdFusion server to crash","Denial of Service Denial-of-service (DoS) attacks are designed to slow or crash a machine. Usually, these occur when a huge number of packets are sent to the server in question. Another way is to cause the server to run a resource intensive process multiple times. For example, in 2006, commands sent to the ColdFusion Flash Remoting Gateway created an infinite loop that eventually caused the ColdFusion server to crash. Certain ColdFusion tags are subject to this problem. To be honest, the tags in question are not meant to be accessible to the public and exist as admin operation tags, but if they are accessible, they can be used.The main tag that fits into this category is the CFINDEX tag.This tag will take either a directory path or the results of a query and index them using verity. Depending on the size of the data to be indexed, this could take a while and be very processor intensive. If a template with this tag is exposed to a user, he could take down your machine with it after using it a number of times in succession. Even if you do not make use of this tag, some ColdFusion software packages do, and they should be protected.The one to watch out for is the CFDOCS. As stated earlier, these should www.syngress.com 12/19/06 Page 375 never be installed on a production machine and if so, they should be password protected. Finally, note that almost any ColdFusion tag can be used as a DoS attack if the operation: Turning Off Tags Certain ColdFusion tags are just too dangerous to use. An experienced developer may make use of them occasionally, but in many cases, its just easier not to.This really becomes an issue on a shared box where other people can upload and run their own code. In these situations, its easier to turn these tags off than to allow a potential security hole to exist.The three main tags to look out for are: CFREGISTRY Allows access and control over the local registry.The registry is the heart and soul of any Windows machine, and an attacker who has access to it can rewrite it to do almost anything"
"Justify with an example how e-mail applications capable of securing their data via encryption, or corporate Intranet applications that use certificates, go a long way in preventing information leaks","E-mail applications capable of securing their data via encryption, or corporate Intranet applications that use certificates, go a long way in preventing information leaks .For example, a corporate Intranet site might be a good place for keeping employee information","The Benefits of Using Security-Enabled Applications On first inspection, one would say the reasons why we need security built into applications are ridiculously obvious, but principles this essential are worth reviewing: www.syngress.com 12/18/06 Page 395 Developing Security-Enabled Applications Chapter 11 A decent hacker can exploit weaknesses in any application after he is familiar with the language it was created in. Take, for instance, the Melissa virus or other viruses that affect Microsoft Office applications. A hacker with a good knowledge of Visual Basic for Applications (VBA), Visual Basic, or Visual C++ could wreak havoc (as has already been demonstrated by the Melissa virus) on systems running MS Office. Security here would serve to at least warn unsuspecting users that the e-mail attachment they are about to open has macros that are potentially dangerous, and would offer to disable the macros, thereby rendering the hackers code useless. Not everyone in your organization needs access to all information. Security in this case would not allow access to a user unless she can prove she should be granted access by her identity. Data should be protected from undesirable eyes at all times, especially data that traverses the Internet. E-mail applications capable of securing their data via encryption, or corporate Intranet applications that use certificates, go a long way in preventing information leaks. For example, a corporate Intranet site might be a good place for keeping employee information. Not everyone in the Human Resources department should have access to all the information, nor should everyone in the company. Building an intranet employing PKI standards for access control would give access to only those people who need to view or manipulate this information. A means of authentication, authorization, and nonrepudiation is an integral part of securing your applications, both on the Web and within your private networks. Applications with built-in security methods make it easier to safely conduct business on any network. In addition, knowing how to easily secure applications makes it simpler to build an entire security infrastructure around them. Many types of major security breaches can be avoided if Web administrators and developers consider more than just the functionality of their systems"
Justify with an example how digital signatures contain proof of identity of the originator of whatever it is that is digitally signed,"Digital signatures contain proof of identity of the originator of whatever it is that is digitally signed .For example, an e-mail message with a digital signature proves that the sender of the message is really who he says he is","At this point, you may be thinking that these security tools all sound like something that should be handled at the network administrator level, but that depends on how your organization is structured, and the level of understanding developers and network administrators have for each of these issues. Even if these areas are not actually something we may have to do within our current organizations, we become better professionals if we understand how each of these tools works. Digital Signatures Digitally signing code establishes the identity of the legal creator of the application the code makes up. Digital signatures contain proof of identity of the originator of whatever it is that is digitally signed. For example, an e-mail message with a digital signature proves that the sender of the message is really who he says he is. Digital signatures can also verify the identity of a software manufacturer or the issuing authority of a document, e-mail message, or software package. Digital signatures are usually contained within digital certificates. Digital signatures can be used in documents whether they are encrypted or not.The true value in digital signatures is that they unequivocally identify the originator of the document and detect whether the document was altered even in to the minutest degree from its original form. Signatures can even be time stamped to record the exact moment a document was sent. How digital signatures work is relatively straightforward. When a message is composed, a mathematical calculation of the document called a hashing is created. If encryption is used on the message or document, the hash is encrypted and becomes the digital signature. When the intended recipient of the message receives it, the hashing of the received message is calculated again.Then, the message is decrypted, and the enclosed hashing and the newly calculated hashing are compared. If the values of the new hashing and the original hashing are the same, the message is valid and has not been tampered with. Digital signatures are supported in almost all popwww.syngress.com 12/18/06 Page 397 ular e-mail clients, including Microsoft Outlook and Lotus Notes. Figure 11.1 illustrates the principle of digital signatures. Digital signatures are one way to ensure a message gets to its recipient safely.The other methods discussed in the following sections, PGP and S/MIME, use encryption algorithms instead of hashing algorithms to perform their duties"
"Justify with an example how after 30 days, the features of the full version are removed from your system, and it reverts to the features that existed in legacy PGP freeware","After 30 days, the features of the full version are removed from your system, and it reverts to the features that existed in legacy PGP freeware .For example, for the first 30 days, you can encrypt your hard disk, but after the end of the 30 days, your hard disk will decrypt","PGP is the property of the PGP Corporation, but versions and source code are available for download on the Web at www.pgp.com/downloads/index.html. 4:15 PM PGP Its Kind of Like Freeware You can still find older freeware versions of PGP on the Internet, but the closest thing to a freeware copy of the latest versions is the trial version of PGP. After PGP 8.x, you have to pay for a fully functional version, but a 30-day trial version is available. After 30 days, the features of the full version are removed from your system, and it reverts to the features that existed in legacy PGP freeware. For example, for the first 30 days, you can encrypt your hard disk, but after the end of the 30 days, your hard disk will decrypt. You also have the option during installation to disregard the trial, and simply start using PGP with the features of 8.x and lower. Despite losing these features, you can still access any encrypted data, encrypt and sign files, encrypt e-mail, and use other features popular in older versions"
"Justify with an example how however, if a hacker modified values in the cookie, inaccurate data is returned to the Web server","However, if a hacker modified values in the cookie, inaccurate data is returned to the Web server .For example, imagine you were purchasing some items online, and added them to a shopping cart","Because cookies are supposed to be saved to a computer so the site can later read the data, it assumes this data remains unchanged during that time. However, if a hacker modified values in the cookie, inaccurate data is returned to the Web server. For example, imagine you were purchasing some items online, and added them to a shopping cart. If the server stored a cookie on your computer and included the price of each item or a running total, you could change these values and potentially be charged less than you were supposed to. Another problem with information stored in a cookie is the potential that the cookie can be stolen. Since it is expected that a cookie will remain on the computer it was initially stored on, a server retrieving the data from it assumes its coming from the intended computer. Hackers could steal a cookie from your machine and put it on another one. Depending on what was in the cookie, the cookie theft would then allow them to access a site as if they were you.The Web server would look at the cookie information stored on the hackers computer, and if it contained a password, it would give the attacker access to secure areas you have access to. For example, if the site had a user profile area, the hacker could view your name, address, credit card numbers, and any other information stored in the profile"
"Justify with an example howthe Web server would look at the cookie information stored on the hackers computer, and if it contained a password, it would give the attacker access to secure areas you have access to","The Web server would look at the cookie information stored on the hackers computer, and if it contained a password, it would give the attacker access to secure areas you have access to .For example, if the site had a user profile area, the hacker could view your name, address, credit card numbers, and any other information stored in the profile","For example, imagine you were purchasing some items online, and added them to a shopping cart. If the server stored a cookie on your computer and included the price of each item or a running total, you could change these values and potentially be charged less than you were supposed to. Another problem with information stored in a cookie is the potential that the cookie can be stolen. Since it is expected that a cookie will remain on the computer it was initially stored on, a server retrieving the data from it assumes its coming from the intended computer. Hackers could steal a cookie from your machine and put it on another one. Depending on what was in the cookie, the cookie theft would then allow them to access a site as if they were you.The Web server would look at the cookie information stored on the hackers computer, and if it contained a password, it would give the attacker access to secure areas you have access to. For example, if the site had a user profile area, the hacker could view your name, address, credit card numbers, and any other information stored in the profile. Because cookies can be used to store any kind of textual data, it is important that theyre secure. As a developer, of course, the best way to protect people from having information stored in cookies being viewed is not to store any personal or www.syngress.com 12/18/06 Page 415 sensitive information in a cookie.This isnt always an option, but its always wise to never store more information than is needed in a cookie"
"Justify with an example how in some environments, such as the intelligence community, external data can be combined with technical analyses to detect abuse","In some environments, such as the intelligence community, external data can be combined with technical analyses to detect abuse .For example, financial records, spending patterns, etc., can be examined to detect inappropriate sources of income.","It is not possible to prevent or detect misuse by purely technical means, except in special situations. Generally speaking, the most that can be done is monitoring for unusual patterns or quantities of requests. Detailed logging can be useful if the person falls under suspicion for other reasons. In some environments, such as the intelligence community, external data can be combined with technical analyses to detect abuse. For example, financial records, spending patterns, etc., can be examined to detect inappropriate sources of income. (Such data can also be missed. The CIA never noticed that Aldrich Ames drove a car that cost more than his annual salary.) 2.2 Defense Bypass Insiders generally have a major inherent advantage over outsiders: theyre already past some defense layers. For example, many companies rely on firewalls as part of their cybersecurity. More or less by definition, insiders are on the inside of the firewall; they are thus not blocked by it. Similarly, insiders generally have some sort of login access to an organizations computer systems; this permits local attacks, rather than only attacks against network services"
Justify with an example how2 Defense Bypass Insiders generally have a major inherent advantage over outsiders: theyre already past some defense layers,"2 Defense Bypass Insiders generally have a major inherent advantage over outsiders: theyre already past some defense layers .For example, many companies rely on firewalls as part of their cybersecurity","In some environments, such as the intelligence community, external data can be combined with technical analyses to detect abuse. For example, financial records, spending patterns, etc., can be examined to detect inappropriate sources of income. (Such data can also be missed. The CIA never noticed that Aldrich Ames drove a car that cost more than his annual salary.) 2.2 Defense Bypass Insiders generally have a major inherent advantage over outsiders: theyre already past some defense layers. For example, many companies rely on firewalls as part of their cybersecurity. More or less by definition, insiders are on the inside of the firewall; they are thus not blocked by it. Similarly, insiders generally have some sort of login access to an organizations computer systems; this permits local attacks, rather than only attacks against network services. Again, it is hard to conceive of purely technical defenses. Insiders, by definition, are inside; they thus have more opportunities to commit mischief. Detection mechanisms can work well; in particular, they can look for either anomalous behavior or actual attacks on nominally-protected systems"
"Justify with an example how if the organization fails to reset expectations, the level of unmet expectations may continue to rise, causing disgruntlement on the part of the insider","If the organization fails to reset expectations, the level of unmet expectations may continue to rise, causing disgruntlement on the part of the insider .For example, the organization can attempt to lower the level of unmet expectations regarding system use and job responsibilities by a number of proactive countermeasures: The organization institutes an acceptable use policy, describing the employees roles and responsibilities when using the organizations information systems","Insider Attack and Cyber Security insider's unmet expectation insider's expectation personal predisposition expectation fulfillment precipitating event expectation setting Fig. 5: Early Mitigation through Expectation Setting Fig. 5 describes the influence expectation setting can have on the insiders unmet expectations. When the expectations of the insider are in line with the organizations practices and policies, unmet expectations are not an issue. However, if a precipitating event impacts expectation fulfillment, action by management to reset expectations might decrease the level of unmet expectations. If the organization fails to reset expectations, the level of unmet expectations may continue to rise, causing disgruntlement on the part of the insider. For example, the organization can attempt to lower the level of unmet expectations regarding system use and job responsibilities by a number of proactive countermeasures: The organization institutes an acceptable use policy, describing the employees roles and responsibilities when using the organizations information systems. The policy should be given to each employee as part of their orientation to the organization. As changes to the policy occur, employees need to be made aware of the changes and the impact to them. In addition, the policy should be consistently enforced for all employees so that no employees may feel that they are above the rules. Managers, in conjunction with Human Resources, can clearly define job responsibilities for each employee in the organization. Processes such as performance reviews can be used to check and set expectations periodically"
Justify with an example how precursors may be both technical and behavioral in nature,"Precursors may be both technical and behavioral in nature .For example, the sharing of passwords between Ian and a coworker facilitated the attack","Also relevant is the organizations focus, prior to the attack, almost exclusively on the growth of the company with little or no recognition of the risks associated with that growth or with Ians actions in particular. Another key question is why iAssemble fired Ian before cutting off all access. This naturally leads to the definition of an access path, and the fact that Ian had access paths into the computer net- Insider Attack and Cyber Security works about which the organization did not know. For example, Ian was able to use his coworkers account to plant the logic bomb because they had shared passwords months earlier. In addition, the logic bomb itself can be viewed as an (unknown) access path in that it allows the insider to take action within the organizations network even when all of his direct connections have been severed. One focus of this question is to understand the importance of actions or events that occurred, or conditions that existed, prior to the insiders attack. Precursors may be both technical and behavioral in nature. For example, the sharing of passwords between Ian and a coworker facilitated the attack. The password sharing also opened an access path to the insider that the organization did not know about. In this case, the organization may have closed this avenue of attack by prohibiting password sharing by policy, reinforced through periodic security awareness training. instituting regular password changes, including administrator or other group accounts"
"Justify with an example how once data leaves a database, the main defense against theft or leaks is traditional access controls such as operating system file ACLs","Once data leaves a database, the main defense against theft or leaks is traditional access controls such as operating system file ACLs .For example, a file export or report may sit on a desktop hard drive or network file share, but should have an access control list (ACL) that prevents anyone besides its rightful owner from reading it","Furthermore, sensitive data sometimes migrates from production environments into development or quality assurance environments because the quality and quantity of real production data is generally preferable to artificial data for testing purposes. Data scrubbing tools should be in place to permit programmers or testers to perform their work with sanitized data, eliminating the need to provide them live production data. However adoption and deployment of such tools is far from ubiquitous, and maturity of these solutions varies by platform. Once data leaves a database, the main defense against theft or leaks is traditional access controls such as operating system file ACLs. For example, a file export or report may sit on a desktop hard drive or network file share, but should have an access control list (ACL) that prevents anyone besides its rightful owner from reading it. Unfortunately such an ACL usually allows privileged or root users with OS administrator rights to access the file. Personnel (HR) rules and procedures for employees include soft administrative controls intended to prevent confidential data leakage. Examples include a corporate customer privacy policy or employee ethics training"
"Justify with an example how regulations and laws require confidential customer data must be handled with care, thus making data leaks a compliance risk as well as a business risk","Regulations and laws require confidential customer data must be handled with care, thus making data leaks a compliance risk as well as a business risk .For example, PCI [15] requires credit and debit card information be tightly controlled, as described in data security standards (DSS) rules that are quite detailed and prescriptive","Corporate security or privacy policies may attempt to prescribe correct handling of sensitive information. However policies that arent supported by clear procedures, training, and tools are generally doomed to be ineffective or disregarded. Regulations and laws require confidential customer data must be handled with care, thus making data leaks a compliance risk as well as a business risk. For example, PCI [15] requires credit and debit card information be tightly controlled, as described in data security standards (DSS) rules that are quite detailed and prescriptive. As of this writing, the State of Minnesota has legislated PCI DSS rules into law, and at least four other states including California are poised to follow suit. Other regulations governing customer data privacy include California SB1386 [14] and similar state laws governing breach disclosure, HIPAA, FERPA, and the Gramm-Leach-Bliley Act (GLBA). Insider Attack and Cyber Security Residual Risk Administrative or soft controls are necessary, and to some extent do prevent accidental data leaks by educating the good employees about what behaviors are expected or disallowed with regard to confidential data handling. However such controls do little or nothing to deter intentionally wrongful behavior among the bad employees. Therefore their preventive value is inherently limited (not that they shouldnt be improved where possible). Even among the good employees their value is limited. Many data leaks are not malicious, and were not even seen as leaks by the perpetrator but rather were intended to serve a business purpose and reflect only someones ignorance of policies, procedures, and risks. This highlights the inherent weakness of unenforced soft controls"
Justify with an example how there are dark corners of an enterprise where the DLP tool may not be able to reach,"There are dark corners of an enterprise where the DLP tool may not be able to reach .For example, commercial products are on the market which specialize in filtering email, scanning web sites, or scanning network file shares","Report on it Trigger immediate alert Destroy it Relocate it Block its transmission Encrypt it Considerable work has been done by Burton Group [2], Gartner [3] and Forrester [4] in categorizing and comparing commercial DLP/ILP vendors. Even an enterprise deploying a robust DLP suite may need to supplement it with point solutions designed to discover and classify information in very specific niches. There are dark corners of an enterprise where the DLP tool may not be able to reach. For example, commercial products are on the market which specialize in filtering email, scanning web sites, or scanning network file shares. All these data discovery and classification niche tools need to be carefully assessed and compared to any DLP suite the enterprise chooses. Some may prove Insider Attack and Cyber Security redundant and should be retired. But others will complement (or add defense in depth to) the DLP suite and deserve a place in the enterprise toolkit"
"Justify with an example how in order to understand how to detect malicious insider actions, we have to understand the many forms of attack that have been reported","Insider Attacks In order to understand how to detect malicious insider actions, we have to understand the many forms of attack that have been reported [29] .For example: Unauthorized extraction, duplication, or exfiltration of data Tampering with data (unauthorized changes of data or records) Destruction and deletion of critical assets Downloading from unauthorized sources or use of pirated software which might contain backdoors or malicious code Eavesdropping and packet sniffing Spoofing and impersonating other users Social engineering attacks Misuse of resources for non-business related or unauthorized activities Purposefully installing malicious software Each of these actions can be considered malicious, but not every one of them may leave an audit trail which can be easily accessed","In the following sections, we provide a general overview of the literature on the insider problem driven primarily by various methods of profiling user actions and the systems they use. Much of the work reports on studies describing various audit sources and algorithms to profile users that are tested on simulated masquerade attack data. Researchers have also distinguished between network-level and hostlevel detection systems. Most of this work is specific to masquerade attack detection, although some work is reported on trap-based defenses aimed to the traitor detection problem using honeypots and honeytokens. We conclude with a view of what we see as the state-of-the-art of the insider attack detection problem, and we provide recommendations on future research directions. Insider Attacks In order to understand how to detect malicious insider actions, we have to understand the many forms of attack that have been reported [29]. For example: Unauthorized extraction, duplication, or exfiltration of data Tampering with data (unauthorized changes of data or records) Destruction and deletion of critical assets Downloading from unauthorized sources or use of pirated software which might contain backdoors or malicious code Eavesdropping and packet sniffing Spoofing and impersonating other users Social engineering attacks Misuse of resources for non-business related or unauthorized activities Purposefully installing malicious software Each of these actions can be considered malicious, but not every one of them may leave an audit trail which can be easily accessed. Several of these actions do leave some trail in some log file which can be linked to the actions of a user after the fact. Hence, when a malfeasance is detected, there is some hope forensics could lead to the perpetrator. Log analysis remains the state-of-the-art in insider attack detection, after a breach has been discovered. Naturally, sophisticated attackers may expend much effort trying to cover their tracks and attacking the logging or auditing sources to remain stealthy. If an organization is not actively monitoring their systems (and users) with sufficient controls preventing tampering with monitor logs, an inside attacker will undoubtedly rarely be detected. In an insider threat study in the banking and finance sector, Randazzo et al. [31] list the characteristics of insider attacks. Their analysis of validated cases of insider attack indicated that: Most incidents required little technical sophistication Actions were planned Motivation was financial gain Acts were committed while on the job Incidents were usually detected by non-security personnel Incidents were usually detected through manual procedures These observations should motivate any organization to field monitoring systems to have any hope of automatically and reliably detecting, and deterring, insider attack. We note from this study that most insider attacks on hosts seem to occur at the application level and not at the network-level and hence host-based monitoring is not a desiderata, it is a requirement"
Justify with an example how it may not be enough to know of a malicious act merely from knowing that a user has issued an abnormal command sequence unless that sequence could violate a security policy,"It may not be enough to know of a malicious act merely from knowing that a user has issued an abnormal command sequence unless that sequence could violate a security policy .For example, we conjecture that modeling a users search behavior may be one way of capturing a users intent to seek information for malicious purposes, something that a masquerader, and possibly a traitor, is likely to do early in their attack behavior","Honeypots and related decoy technologies are proposed as suitable technologies for traitor detection, as well as masquerader detection. Alternatively, it is unclear how well an insider attack may be detected from Unix System Call anomalies, and hence we rate the utility of this audit source as low. We are unaware of any formal study of each audit source validating or refuting these assumptions. This table may serve as a guide for future research in monitoring technologies for insider attack detection. A Survey of Insider Attack Detection Research Two-Class Classifiers: Unix Command Sequences Masquerader High Unfamiliar with local environment and user behavior One-Class: Unix Command quences High Unfamiliar with local environment and user behavior Unix Audit Events Medium Given proper credentials and might not trigger alerts Medium Might not violate system call profile Medium Given proper credentials and might not trigger alerts Medium unless malicious programs access Registry Medium If attack uses network and attribution is possible High Unfamiliar with local information and likely to interact with honeypot Network Activity Audit Honeypots and Decoy Technologies Internal Traitor Medium Can possibly mimic another normal user or train the classifier Medium Can possibly mimic another normal user or train the classifier Low Application level malicious acts may not manifest as unusual events Low Application level malicious acts may not manifest as unusual events Low Application level malicious acts may not manifest as unusual events Medium unless malicious programs access Registry High If attack uses network and attribution is possible Medium Unlikely to interact if aware of the location of honeypots User profiling as a means of identifying abnormal user behavior is well established as a primary methodology for masquerader attack detection. As we have noted, a masquerader impersonates another persona and it is unlikely the victims behavior will be easily mimicked. Hence, abnormal behavior is a good indicator of a potential masquerade attack as a consequence of identity theft. User profiling may also be useful in detecting a traitor, if subtle but significant changes in a users behavior indicate a malicious activity. We believe that it will be important Insider Attack and Cyber Security to derive user profile models that reveal user intent in order to hone in on insider actions that are suspicious and likely malicious. It may not be enough to know of a malicious act merely from knowing that a user has issued an abnormal command sequence unless that sequence could violate a security policy. For example, we conjecture that modeling a users search behavior may be one way of capturing a users intent to seek information for malicious purposes, something that a masquerader, and possibly a traitor, is likely to do early in their attack behavior. Too much searching, or searching in abnormal directories or locations, seems more than odd, it may seem sinister in intent. A major challenge of insider attack detection research is the lack of real data in order to study and measure general solutions and models. It is hard, if not impossible, to collect data from normal users in many different environments. It is especially hard to acquire real data from a masquerader or traitor while performing their malicious actions. It is hard to obtain real intrusions for ground truth test and evaluation for a number of reasons: Researchers generally do not have direct access to real attacks Attacks may be undetected and thus unavailable for study Organizations do not admit that they were attacked and hence shy away from cooperating with researchers Attacks might be mistaken for incompetence Even if such data were available, it is more likely to be out of reach and controlled under the rules of evidence, rather than being a source of valuable information for research purposes. Because of the scarcity of real data, Chinchani et al"
Justify with an example how interposition-based methods rely on inserting an independent inspection layer between two or more interacting entities,"Interposition-based methods rely on inserting an independent inspection layer between two or more interacting entities .For example, most intrusion detection systems hook into the OS system calls thereby interposing their own heuristics engine to analyze system call usage","The design goals for VFIT are the following. The first requirement is for the system to be applicable to off-the-shelf software. Our framework should be able to enforce information tracing on currently available operating systems, applications and hardware, with none to minor modifications of applications, but no operating system and hardware modifications, since these are not under the control of an application programmer. Our second requirement is that the system should impose a low overhead. We note that the overhead of typical information tracing mechanisms will be relative to the operational activity of the application and the workload on the overall system. We want to be able to characterize the CPU utilization of our mechanism and reduce this overhead. Our third requirement is to be able to protect sensitive information versus just detect information leakage. VFIT should go beyond detection, and should be able to protect against information leakage and inadvertent dissemination. In the inadvertent dissemination case, the insider is not malicious; however information misuse is one path by which information may leak. Our fourth requirement is for the system to be flexible enough so that data use is not hindered. The information tracing system should not prevent use and transformation of traced data in an authorized manner and should not Insider Attack and Cyber Security require an upheaval of existing infrastructure. Allowing for information to be modified is a key difference of the information tracing problem which differentiates it from other related problems such as Digital Rights Management (DRM) in which the digital content created by the publisher is not allowed to be copied or modified after initial delivery. Our final requirement is to be able to enforce accountability with the information traceability system. The tracing system should ensure that traced data is used only on systems that have the capability to audit the information usage. Additionally, the system should be capable to allow the originator of the data make access decisions on the data. Finally, the system should be able to answer queries such as which user had access to the data. 3.1. Models of Policy Enforcement Existing work on policy enforcement on computer systems has been primarily in the following categories: encryption, access control, interposition, and languagebased methods. End-to-end encryption-based methods rely on trust establishment between two parties (local or on a network), using cryptography-based protocols such as IPSec [6] and SSL [7]. These methods assume a secure execution environment for the communicating end-points so that the keys established for secure communication are not exposed. Interposition-based methods rely on inserting an independent inspection layer between two or more interacting entities. For example, most intrusion detection systems hook into the OS system calls thereby interposing their own heuristics engine to analyze system call usage. Such interposition layers can be used to apply rules on the information exchanged between two or more parties. In order for strict policy enforcement, the interposition layer must itself rely on a protected execution environment. Interposition-based methods can be instantiated using various approaches, for example, hooking privilege OS code; executing software on a hardware simulator or in a virtual machine, and operating in a physically separate appliance. All of these interposition methods rely on separation of privilege to protect the interposition layer. Access control enforces other models on files and other objects that an entity may access; however current methods of access-control are not useful against malicious software that is able to circumvent access checks or even worse tamper with access-control lists effectively rendering them insufficient. Language-based methods [8] specify language primitives or extensions to enable verification of information flow when handled by the programs using program annotation, compile-time checks and runtime type safety checks. 3.2. Hardware Virtualization Virtualization refers to the technique of partitioning a machine into Virtual Machines (VMs). Although its history stretches back decades, virtualization has seen resurgence in interest recently---as exemplified by the VT-x technology from Intel. A hypervisor manages VMs by operating at the highest software privilege level (VMX-root mode or ring-0p in VT-x). A control transfer into the hypervisor is called a VMExit and transfer of control to a VM is called a VMEntry. A VM can explicitly cause a VMExit by using a VMCall instruction (a hypercall). A guest OS runs in VMX-non-root mode which ensures that critical OS operations that can violate the memory separation of the OS or the hypervisor cause a VMExit, which allows the hypervisor to enforce access-control rules. The hypervisor manages launch/shutdown of VMs, memory/device isolation, control register/MSR accesses, interrupts and instruction virtualization. Most importantly, the hypervisor supervises the use of physical memory. The hypervisor achieves this by managing shadow page tables for each VM running on the platform. In hardware VM, the OS is not aware of the hypervisor and hence maintains its own page tables, called the Guest Page Tables (GPTs). The shadow page tables are called the Active Page Tables (APTs) and are used by the processor for address translation. The hypervisor synchronizes APTs with GPTs using a family of algorithms called the Virtual Translation Look-aside Buffer (VTLB) algorithms which emulate the processor TLB. The algorithms leverage hardware virtualization to trap on page-faults and execution of certain instructions such as INVLPG, MOV CR3 that are used by an Operating System to manage virtual memory"
Justify with an example how we define unintended modifications as those that represent a violation of the intended behavior of a program defined by its source code,"We define unintended modifications as those that represent a violation of the intended behavior of a program defined by its source code .For example, this includes the operating system or root user trying to write directly to a memory location that contains critical data, or malicious modification of a pointer in a program, causing it to modify an object other than the one intended by the source code","A side-channel attack exploits unintentional information leakage sources (e.g., power consumption, timing behavior, electromagnetic radiations) in the implementation. At present, little work has investigated the feasibility of such attacks against FPGAs. Nevertheless, attacks using power consumption and specific to RSA are known in the literature. For instance, Simple Power Analysis and Differential Power Analysis exploit the fact that a straightforward implementation of the Right-to-Left Binary Algorithm (widely used in RSA hardware circuits, including our RSA Processor) has power consumption that changes in time with the bit-sequence of the RSA key (thus, monitoring the FPGA power consumption allows discovering the RSA key). Simple countermeasures can be found in [13. In our case, power attacks are more difficult to launch, since multiple RSA Processors operate concurrently and asynchronously, effectively masking the information that can be revealed by the overall FPGA power consumption. We note that hardware-implemented cryptographic co-processor engines limit the types of secure computations that the user can perform to only the implemented cryptographic routines. In the next section the Trusted Computing Base is Insider Attack and Cyber Security We now present a technique, information flow signature checking [29], to protect application critical data from unintended modifications, even by the operating system or an insider with root privileges, and describe its implementation. We define unintended modifications as those that represent a violation of the intended behavior of a program defined by its source code. For example, this includes the operating system or root user trying to write directly to a memory location that contains critical data, or malicious modification of a pointer in a program, causing it to modify an object other than the one intended by the source code. The application developer wishing to employ this technique defines which data is critical, such as a database or structure containing login information in a server application. Using the precise pointer analysis of the IMPACT compiler [27], the automated technique extracts the backward computation tree [25] of instructions which are allowed by the source code of the application to directly or indirectly modify critical program data2. This backwards tree of dependencies is encoded in the form of a signature, referred to as the Information-flow signature (IFS). The signature is enforced during application execution using a combination of software and programmable hardware. Since the analysis is based on the properties of the program according to its source code, hence there are no false-positives, and valid code is never rejected3. The proposed technique is based on the well-known observation that the possibility of unintended modifications to data arises from the gap between an applications source code and how it is executed during runtime"
"Justify with an example how the threat model assumes that the attacker can execute arbitrary code, as an insider might be able to, and overwrite program variables stored in memory and processor registers as long as the malicious memory accesses are performed through the processor","The threat model assumes that the attacker can execute arbitrary code, as an insider might be able to, and overwrite program variables stored in memory and processor registers as long as the malicious memory accesses are performed through the processor .For example, malicious DMA transfers are not covered by the threat model for this technique","Reconfigurable Tamper-resistant Hardware Support Against Insider Threats 4.1 Threat Model The aim of the technique is to preserve data integrity rather than its confidentiality: hence, the technique does not address side-channel attacks [24]. The threat model assumes that the attacker can execute arbitrary code, as an insider might be able to, and overwrite program variables stored in memory and processor registers as long as the malicious memory accesses are performed through the processor. For example, malicious DMA transfers are not covered by the threat model for this technique. Specifically, an attacker could use an IEEE 1394 interface port to initiate transfers to main memory of a system which are not visible to the processor [26]. We also assume that the initialization of the technique is performed correctly. Later in this paper we explore the required mechanisms to ensure both a trusted initialization path and the mitigation physical attacks and attacks which bypass the processor of the system. If initialized properly, the technique is immune to attacks on the operating system after program loading is completed. Examples of attacks covered in the threat model include: Classical memory corruption attacks such as buffer overflow, format string, and heap corruption attacks that overwrite non-control data in the application. These attacks violate the source-level semantics of the program and are caught by the technique. We assume that other techniques such as control-flow integrity [21] or program shepherding [19] have been deployed to protect control-data in the application"
Justify with an example how applications should have the ability to attest to the existence of the TCE during runtime,"Further, applications should have the ability to attest to the existence of the TCE during runtime .For example, this allows a client application to require a server application to be executing on a TCE before connecting, thus ensuring that an un-tampered binary with data integrity guarantees is running on the server","During initialization of the system, the hardware within the TCE is automatically programmed by the NVRAM. During runtime, the secure coprocessor awaits for a security-critical application to be verified and loaded into the TCE RAM by the crypto processor. The crypto processor also facilitates any transac- Insider Attack and Cyber Security tions between the secure coprocessor and the host system. When a securitycritical application is run on the TCE, the local TCE RAM (not accessible directly by the host system CPU) is used by the application. In case of size limitations on the internal RAM, the crypto processor may be used to encrypt and swap memory out to the host system RAM. 5.1 Protecting Against Insider Attack With User-level Privileges: Runtime Guarantees Critical data integrity is maintained by the Information Flow Signatures-enabled secure coprocessor as long as the Hardware-Based Security Checks (HBSC) are (i) initialized as intended, (ii) not re-configured during runtime, and (iii) are not subverted to gain access to critical data. Further, applications should have the ability to attest to the existence of the TCE during runtime. For example, this allows a client application to require a server application to be executing on a TCE before connecting, thus ensuring that an un-tampered binary with data integrity guarantees is running on the server. In this scenario we assume that: (i) the user has only remote access to the system through remote login and (ii) the HBSC are correctly initialized. Based on these assumptions we focus only on providing guarantees during runtime operation. The following section delves into the issues associated with trusted initialization of the HBSC. We now describe how the TCE with an IFS-enabled secure coprocessor enforces runtime guarantees"
"Justify with an example how authentication subsystems are critical to the security of any system, yet they are extremely vulnerable to simple insider attacks","First, authentication subsystems are critical to the security of any system, yet they are extremely vulnerable to simple insider attacks .For example, if an administrator simply makes a file storing one-way encrypted passwords readable, no significant harm is supposed to be possible, and yet this practice would enable off-line dictionary attacks and lead to wholesale theft of passwords and corresponding identities","A useful application of survivability principles, which would blend good theory with design practice, would be a user authentication subsystem. Such a subsystem should be resilient to attacks by systems administrators and operators who are free to act simultaneously as insiders and outsiders. We suggest this application area for three reasons. First, authentication subsystems are critical to the security of any system, yet they are extremely vulnerable to simple insider attacks. For example, if an administrator simply makes a file storing one-way encrypted passwords readable, no significant harm is supposed to be possible, and yet this practice would enable off-line dictionary attacks and lead to wholesale theft of passwords and corresponding identities. Second, authentication subsystems offer a good case study on how operational, cost, and usability constraints enable tradeoffs among competing interpretations of survivability principles. For example, partitioning sensitive data among several diverse, redundant servers managed by administrators whose duties are separated to a very fine granularity may be an implementation of sound interpretation of survivability principles. However, they may impose substantial recurrent opera- Surviving Insider Attacks: A Call for System Experiments tional costs (e.g., personnel costs) and usability costs (e.g., physical separation and security may require significant and costly space upgrades)"
"Justify with an example how second, authentication subsystems offer a good case study on how operational, cost, and usability constraints enable tradeoffs among competing interpretations of survivability principles","Second, authentication subsystems offer a good case study on how operational, cost, and usability constraints enable tradeoffs among competing interpretations of survivability principles .For example, partitioning sensitive data among several diverse, redundant servers managed by administrators whose duties are separated to a very fine granularity may be an implementation of sound interpretation of survivability principles","First, authentication subsystems are critical to the security of any system, yet they are extremely vulnerable to simple insider attacks. For example, if an administrator simply makes a file storing one-way encrypted passwords readable, no significant harm is supposed to be possible, and yet this practice would enable off-line dictionary attacks and lead to wholesale theft of passwords and corresponding identities. Second, authentication subsystems offer a good case study on how operational, cost, and usability constraints enable tradeoffs among competing interpretations of survivability principles. For example, partitioning sensitive data among several diverse, redundant servers managed by administrators whose duties are separated to a very fine granularity may be an implementation of sound interpretation of survivability principles. However, they may impose substantial recurrent opera- Surviving Insider Attacks: A Call for System Experiments tional costs (e.g., personnel costs) and usability costs (e.g., physical separation and security may require significant and costly space upgrades). Third, but by no means least significant, is the fact that cryptographic protocol theory provides resiliency techniques; viz., protocols for password-based authenticated key exchange [10,11]. Hence, one need not be sidetracked by the need to develop new theory, and focus exclusively on architectural design of the authentication subsystem. Other equally compelling examples of critical infrastructure subsystems that could benefit from the application of survivability principles include the Domain Name System and distributed directory services and protocols (e.g., Microsofts Active Directory, or LDAP)"
"Justify with an example how typical architecture features used in fault tolerance, namely spatial separation and replication of system components, offer insufficient protection against insider attacks","Typical architecture features used in fault tolerance, namely spatial separation and replication of system components, offer insufficient protection against insider attacks .For example, system administrators or operators still have unencumbered access to all functions that could shut down system operation or, worst yet, that could corrupt critical functions in an undetectable manner over a long period of time","Avoidance of a single point of failure Independence of Failure Modes and Attack Vulnerabilities Fast Recovery from Failure and Attacks Attack Deterence Least Privilege Authorization Insider Attack and Cyber Security Other important principles, such as defense-in-depth, are important, but their application to countering insider attacks is less compelling. Our thesis is that only by applying selected survivability principles together with well-accepted security, reliability and cryptographic techniques can confidence in system-architecture resiliency to insider threats emerge. 2.1 Avoidance of a Single Point of Failure The common characteristic of single points of failure is that an attack by either an insider or an outsider that exploits a single vulnerability can lead to a system compromise. Typical architecture features used in fault tolerance, namely spatial separation and replication of system components, offer insufficient protection against insider attacks. For example, system administrators or operators still have unencumbered access to all functions that could shut down system operation or, worst yet, that could corrupt critical functions in an undetectable manner over a long period of time. Separation of duty [5, 6, 18] requires that certain system functions and components are accessible only by different insiders, thereby assuring that the erroneous or deliberately malicious actions of a single insider cannot affect all critical functions at once. By definition, separation of duty requires that insider roles be defined with separate access permissions, and that permission separation be supported by the underlying system. A typical example of separation of duty that has been used in business enterprises for many years is the separation and assignment of different employees to the accounts payable and purchasing departments. Violations of this type of separation would allow an employee who invents a fictitious company to issue purchase orders to that company as well as pay invoices received from that company, and effectively defraud his/her own employer. A direct application of this principle to system security administration has already been made in high-assurance systems where the duties of security administrators and operators are separated from other administrative functions [9, 13]"
"Justify with an example how the system should be designed in such a way that only if the number of critical-function partitions that are compromised by attacks exceeds some non-tivial threshold, the whole critical function is compromised","The system should be designed in such a way that only if the number of critical-function partitions that are compromised by attacks exceeds some non-tivial threshold, the whole critical function is compromised .For example, in the case of user authentication function and data, the ability to access an encrypted-password file cannot be easily denied to a system administrator; e.g., physical access by administrative personnel to such files is always possible","Surviving Insider Attacks: A Call for System Experiments Critical function and data partitioning Although separation of duty divides a set of critical functions of an application (e.g., an accounts payable, command and control, security administration) among multiple insiders, a single insider can still compromise a critical function that might lead to overall system failure. While simple separation of duty is necessary, it is not always sufficient to assure the integrity of individual critical functions accessible to insiders after duties are separated. To counter the possible misuse of a single critical system function by an insider, that function and its data must be partitioned and distributed across multiple system components, such that some or most components remain inaccessible to any single insider. The system should be designed in such a way that only if the number of critical-function partitions that are compromised by attacks exceeds some non-tivial threshold, the whole critical function is compromised. For example, in the case of user authentication function and data, the ability to access an encrypted-password file cannot be easily denied to a system administrator; e.g., physical access by administrative personnel to such files is always possible. Yet, an unscrupulous administrator who can merely reads such a file can launch off-line dictionary attacks against one-way encrypted passwords. Cryptographic protocols that partition encrypted passwords and place them in separately protected files such that no single encrypted password is readable by any single administrator counter such attacks [10, 11]. The partitioning of a critical function and its data for the purpose of denying an insider access complete access to that function can lead to a single point of failure, which is precisely what we are trying to avoid. Failure of any function partition possibly induced by an outsiders, not just and insiders, attack would cause the failure of the entire function. To avoid such failures without giving up the advantage of function and data partitioning, would require the replication of each partition and the implementation of multiple-replica update protocols. Protocols for multiple replica updates have been in use for more than two decades and their design properties are well-understood"
Justify with an example how design diversity ensures that generic flaws cannot arise that would affect multiple separated replicas of a critical component,"Design diversity ensures that generic flaws cannot arise that would affect multiple separated replicas of a critical component .For example, practice shows that different operating system families (e.g., MS Windows family and Unix/Linux family) are unlikely to be plagued by identical flaws","2.2 Independence of Failure Modes and Attack Vulnerabilities Avoidance of a single point of failure and its related design methods discussed above cannot counter multiple non-independent (related) failures or attacks against separated replicas of a system, duties (e.g., roles), or against criticalfunction partitions. For example, generic design flaws may affect all spatially separated replicas of a critical function using the same design, and could make that Insider Attack and Cyber Security function susceptible to compromise. The same generic flaw could lead to identical (and hence non-independent) failures or penetrations of all critical component replicas. Similarly, separated duties (e.g., roles) would not prevent system compromise if two or more insiders collude to violate system integrity by joint malicious actions. Design diversity ensures that generic flaws cannot arise that would affect multiple separated replicas of a critical component. For example, practice shows that different operating system families (e.g., MS Windows family and Unix/Linux family) are unlikely to be plagued by identical flaws. For any one of the common flaw types (e.g., buffer overflow, failure to validate input parameters or to enforce resource bounds), it is usually not possible to craft a single exploit that would work across diverse platforms. Hence, critical component replicas running different operating systems are more likely to survive an attack than if all replicas run the same operating system. Different forms of diversity have been used in practical designs [1,2]. Insider personnel diversity seeks to provide similar benefits as those of design diversity. First, different individuals or entities must be assigned to different duties (e.g., roles) and critical functions. Second, different individuals or entities that have different interests (e.g., financial, corporate reporting lines) are less likely to collude. Third, different individuals must have the required skills to operate the diverse component platforms and applications (e.g., even if a Windows system administrator may have the skills to administer a Unix-based system, s/he may not have the skills to administer a specific applications on either system)"
"Justify with an example how the principle of least privilege teaches keeping each box as sparse as possible; the fewer actions one is allowed to take, the less the chance that, by accident or malice, one can cause damage","The principle of least privilege teaches keeping each box as sparse as possible; the fewer actions one is allowed to take, the less the chance that, by accident or malice, one can cause damage .For example, the authors of this chapter often remove their own write permission from critical program or text files, in order to lessen the chance of accidentally modifying them while examining them with an editor","This basic model (e.g., Lampson 1974) lets us start thinking about initial principles. The principle of least privilege teaches keeping each box as sparse as possible; the fewer actions one is allowed to take, the less the chance that, by accident or malice, one can cause damage. For example, the authors of this chapter often remove their own write permission from critical program or text files, in order to lessen the chance of accidentally modifying them while examining them with an editor. The principle of escalation allows a subject to add back certain rights to an object. (Essentially, the rights-box for that object itself becomes an object in the matrix.) For example, when we really need to change one of those critical files, we can do so---after first adding our privilege back. Some enterprises make this process more heavyweight: e.g., by requiring the employee to explicitly request the privilege from a manager, or to explicitly acknowledge that the elevation is significant and will be audited (the latter is mechanism is sometimes called breakglass, used as a noun: there was a break-glass on that record). Some researchers have even formalized this notion as optimistic security [Povey, 1999]"
Justify with an example how does one do fingerprint recognition or voice recognition on a masked and gloved medical technician in an operating room? Biometric methods of de-authentication can detect when a human body is no longer present (and thus trigger the logout of the affiliated user),"How does one do fingerprint recognition or voice recognition on a masked and gloved medical technician in an operating room? Biometric methods of de-authentication can detect when a human body is no longer present (and thus trigger the logout of the affiliated user) .For example, pressure-sensitive mats, body heat sensors, and proximity detectors might all be useful solutions","5.2 Biometrics: Physiology-Based Authentication In addition to identifying users based on something they know, another approach is to authenticate users via something they are. (Security textbooks also teach multifactor authentication: authenticating users by using more than one of these approaches to provide extra assurance.) Common techniques here include fingerprints, hand geometry, voice recognition, and even retina and iris imaging. In theory, biometrics have usability and security advantages. Its much harder for a user to forget a thumb than a password; its also much harder to lend ones thumb to a colleague for a while. However, there are downsides as well. The effectiveness of the biometrics always seems to be in doubt; it seems vendors tend to claim stronger reliability than reality. Users also can find them intimidating or awkward to use (e.g., Sasse 2007). Another issue in many enterprise settings is whether a users biometric will always be available or readable. How does one do fingerprint recognition or voice recognition on a masked and gloved medical technician in an operating room? Biometric methods of de-authentication can detect when a human body is no longer present (and thus trigger the logout of the affiliated user). For example, pressure-sensitive mats, body heat sensors, and proximity detectors might all be useful solutions. Unfortunately, the same IT managers for whom session timeouts were not successful also experienced difficulties getting commercial proximity sensors to work effectively; the sensors either lead to false negatives (logging the person who temporarily stepped out of range) or false positives (leaving departed Alice logged in because her machine faces a busy corridor). This kind of technology might be more useful in domains where users did not need to step briefly away from the computer, or where computers were not surrounded by so much traffic. 5.3 Tokens: Possession-Based Authentication In the standard security textbook mantra, the third main approach to authenticating users is via a token: something they possess. Token-based authentication is common in many workplace environments: employees carry and display badges, or carry identification cards in their wallets. These tokens often can directly interact with the enterprises IT infrastructure: for example, a badge might have a machine-readable bar code, or use radio frequency identification (RFID) to identify itself without physical contact. (The RFID approach raises some interesting opportunities and privacy challenges, because the enterprise can easily interact with an employees token without the employee even being aware. This can help the enterprise find that critical manager when they need her; however, a perceived loss of privacy can also negatively impact employee morale.) Tokens can also interact over direct electronic connections; smart cards---credit-card-sized cards with small integrated circuits---communicate over standard electronic contacts, whereas USB devices utilize the common device interface to connect to computers. Newer technology such as Bluetooth can move this more involved interaction to radio"
Justify with an example how this is a large problem space that requires advances in research artifacts and public/organization policies and practices,"This is a large problem space that requires advances in research artifacts and public/organization policies and practices .For example, Hunker suggests that CERT (or a similar organization) provide a trusted first-response service to insider abuse incidents, and simultaneously act as a natural data aggregation point","Hard Problems and Research Challenges Concluding Remarks Angelos D. Keromytis Computer Science Department, Columbia University The purpose of the workshop whose proceedings you are holding was to define the nature and scope of the insider attack problem, describe the known state of the art in defenses, and to outline an agenda for future research. One of the findings of the workshop, as discussed in Hunkers paper, Taking Stock and Looking Forward, is that even the seemingly simple task of defining the problem boundaries is hard, not least because of the lack of appropriate definitions and contextual information, data for analysis, experimentation and, ultimately, validation of proposed solutions. This lack of data is driven by a variety of factors, the most prominent of which appears to be the sensitivity of the topic: organizations that have been the victims of insider attacks tend to handle such (known) incidents as quietly as possible. As described by both Pfleeger, in Reflections on the Insider Threat, and Hunker, the lack of a good definitions relating to the problem confounds data collection and organization. Lacking good sources of both anecdotal and quantifiable information on insider attack incidents means that, in practice, we can only begin to outline the dimensions of the problem. The workshop made good progress in this space. Bellovins introductory paper, The Insider Attack Problem Nature and Scope, helped us frame the problem, and to begin developing a shared vocabulary. Furthermore, as we saw in Moore and Cappellis paper, The Big Picture of Insider IT Sabotage Across U.S. Cricital Infrastructures, advances in understanding the problem have been made in those cases where access to useful data was made possible. Thus, it is clear that a necessary component for successfully addressing the insider problem is the development of ways for sharing sensitive data pertaining to such attacks in a way that assuages the concerns of the organizations involved while providing useful material for study and experimentation to researchers. This is a large problem space that requires advances in research artifacts and public/organization policies and practices. For example, Hunker suggests that CERT (or a similar organization) provide a trusted first-response service to insider abuse incidents, and simultaneously act as a natural data aggregation point. The second finding from the workshop is that further research and technical work is needed in a variety of areas that can be brought to bear on the problem"
"Justify with an example how the trigger for those major problems, which we call the precipitating event, tends to be anything that removes or restricts the freedom or recognition to which the insider has become accustomed","The trigger for those major problems, which we call the precipitating event, tends to be anything that removes or restricts the freedom or recognition to which the insider has become accustomed .For instance, the hiring of a new supervisor who suddenly enforces the organizations acceptable use policy can cause extreme disgruntlement in the employees","Policies and management controls are needed to keep employee expectations in check. As illustrated in reinforcing loop (R1), with lax management controls the insiders expectation grows commensurate with the expectation fulfillment. As expectation grows and is fulfilled, expectation grows even more. disgruntlement insider's unmet expectation insider's expectation personal predisposition expectation fulfillment precipitating event 6 Ninety-six percent of the insiders in the Insider Threat Study who committed IT sabotage were Lax management that permits continually increasing employee expectation can result in major problems later, especially if the insider is so predisposed. The trigger for those major problems, which we call the precipitating event, tends to be anything that removes or restricts the freedom or recognition to which the insider has become accustomed. For instance, the hiring of a new supervisor who suddenly enforces the organizations acceptable use policy can cause extreme disgruntlement in the employees. Other precipitating events include the insider being passed up for a promotion, sanctions by management, or termination of the insider. 3.2 Escalation of Disgruntlement Often the first sign of disgruntlement is the onset of behavioral precursors, observable aspects of the insiders social (non-technical) behavior inside or outside the workplace that might be deemed inappropriate or disruptive in some way"
Justify with an example how other technical precursors simply enable the insider to conceal his malicious acts,"Other technical precursors simply enable the insider to conceal his malicious acts .For instance, insiders often create fictitious (backdoor) accounts for their surreptitious entry to the system at a later date","This depends on perceptive management and targeted behavioral monitoring. Technical precursors to an attack are even more serious and usually follow but may come in parallel with behavioral precursors. They may, by themselves, cause disruption in the organizations systems. They often indicate steps taken to set up a future attack on the organizations systems, possibly unbeknownst to the organization, such as creation of malicious code. Other technical precursors simply enable the insider to conceal his malicious acts. For instance, insiders often create fictitious (backdoor) accounts for their surreptitious entry to the system at a later date. This is an example of an access path that is not known by management. The organization needs to have technical monitoring in place to be able to detect such precursors at an early stage and they must take appropriate actions. While behavioral precursors, by themselves, are indicative of insider threat risk, the combination of technical and behavioral precursors indicates an even greater risk of insider attack. The Big Picture of Insider IT Sabotage Across U.S. Critical Infrastructures Question 4: What should iAssemble do in the future? This question requires that participants take a step back from the details of the particular scenario to describe what iAssemble should do in the future to ensure that the risk of insider IT sabotage is acceptably mitigated. Effective risk mitigation strategies should focus as much on understanding and reducing the impact of possible attacks as it does on preventing them in the first place. Organizational focus should be on those malicious acts with the largest potential impact to the organization"
Justify with an example how we posit that malicious insider actions on computer systems are likely to occur at the application level,"We posit that malicious insider actions on computer systems are likely to occur at the application level .For instance, a customer service employee in a call center may access more customer records on one particular day than he/she typically accesses on other days, possibly to commit a crime to sell confidential information","It is generally unknown what types of audit sources are most discriminatory to reliably detect insider malicious behavior. Moreover, it is not obvious what amount of data is needed for modeling, nor how long the training or data collection period should be. We posit that malicious insider actions on computer systems are likely to occur at the application level. For instance, a customer service employee in a call center may access more customer records on one particular day than he/she typically accesses on other days, possibly to commit a crime to sell confidential information. Detecting such unusual events can only occur at the business application level, and application-level knowledge is needed to understand the users intent and confirm whether the intent of user actions is possibly malicious. This may be detectable using host-based sensors and audit sources, and possibly through network-based sensors if the application is accessed remotely and the content flow on the network were exposed for analysis"
"Justify with an example how if the detector looks at every command typed at the command line, regardless of whether it results in a program being run, a masquerader can easily introduce NBSCs with nonsense commands","If the detector looks at every command typed at the command line, regardless of whether it results in a program being run, a masquerader can easily introduce NBSCs with nonsense commands .For instance, if the masquerader types nonsense such as alksf, the command-line interface will simply print an error message, but naive Bayes will treat the nonsense command as an NBSC.","A masquerader who tailors his or her attack so that the majority of commands typed are NBSCs stands a good chance of getting away undetected. In this domain, where the commands are typed at the Unix command line, there are several ways a masquerader can introduce NBSCs to cloak an attack.4 1. Type nonsense. If the detector looks at every command typed at the command line, regardless of whether it results in a program being run, a masquerader can easily introduce NBSCs with nonsense commands. For instance, if the masquerader types nonsense such as alksf, the command-line interface will simply print an error message, but naive Bayes will treat the nonsense command as an NBSC.5 2. Use aliases. A masquerader can create never-before-seen aliases to commands that he or she wants to run. For instance, if a masquerader issues the command alias alksf 'rm -rf' (using C-shell syntax), it is then possible to remove files with the command alksf. To cloak an attack is to modify it to take advantage of weak spots in a detectors coverage, and hence go undetected. See [14] for an example"
Justify with an example how a masquerader can create never-before-seen aliases to commands that he or she wants to run,"A masquerader can create never-before-seen aliases to commands that he or she wants to run .For instance, if a masquerader issues the command alias alksf 'rm -rf' (using C-shell syntax), it is then possible to remove files with the command alksf","A masquerader who tailors his or her attack so that the majority of commands typed are NBSCs stands a good chance of getting away undetected. In this domain, where the commands are typed at the Unix command line, there are several ways a masquerader can introduce NBSCs to cloak an attack.4 1. Type nonsense. If the detector looks at every command typed at the command line, regardless of whether it results in a program being run, a masquerader can easily introduce NBSCs with nonsense commands. For instance, if the masquerader types nonsense such as alksf, the command-line interface will simply print an error message, but naive Bayes will treat the nonsense command as an NBSC.5 2. Use aliases. A masquerader can create never-before-seen aliases to commands that he or she wants to run. For instance, if a masquerader issues the command alias alksf 'rm -rf' (using C-shell syntax), it is then possible to remove files with the command alksf. To cloak an attack is to modify it to take advantage of weak spots in a detectors coverage, and hence go undetected. See [14] for an example"
Justify with an example how any detector that can detect foreign symbols would act as suitable fortification,"Any detector that can detect foreign symbols would act as suitable fortification .For instance, stide [3] has been shown able to detect foreign symbols [15], and the PHAD/PAD algorithm [5, 13] could also be adapted to serve this role","8.1 The Fortified Detector Fortification is simply a matter of identifying the weakness in naive Bayes, and building an auxiliary detector that is strong where naive Bayes is weak.6 The previous sections have shown naive Bayes to be susceptible to evasion via NBSCs. However, NBSCs are nothing more than foreign symbols, i.e., commands that never appear in the training data. Any detector that can detect foreign symbols would act as suitable fortification. For instance, stide [3] has been shown able to detect foreign symbols [15], and the PHAD/PAD algorithm [5, 13] could also be adapted to serve this role. However, these detectors do not limit themselves to detecting only foreign symbols, and so they are more complex than what is needed here. A simple foreign-symbol detector was created, called the NBSC detector. This novel, but simple, NBSC detector uses a standard look-up table to track NBSCs. There are two phases: training and testing. During training, the NBSC detector uses all of the data from all of the users (both self and nonself) to populate a look-up table. During testing, the NBSC detector counts how many NBSCs appear in a given test block, as follows. First, a counter (of NBSCs) is initialized to zero. Then, each command in the test block is sought in the look-up table. If the command cannot be found, the counter is incremented (since the command is an NBSC). Finally, the counter is compared to a threshold, and if the count exceeds the threshold, the NBSC detector generates an alarm. In our experiments, the 6 Other fortification strategies exist, e.g., normalizing the pseudocount to scale with the size of the training data, or refining naive Bayes to estimate the conditional probability of NBSCs from the training data. The current strategy was chosen because it was simple and likely to work"
Justify with an example how attacks using power consumption and specific to RSA are known in the literature,"Nevertheless, attacks using power consumption and specific to RSA are known in the literature .For instance, Simple Power Analysis and Differential Power Analysis exploit the fact that a straightforward implementation of the Right-to-Left Binary Algorithm (widely used in RSA hardware circuits, including our RSA Processor) has power consumption that changes in time with the bit-sequence of the RSA key (thus, monitoring the FPGA power consumption allows discovering the RSA key)","A read-back attack accesses/reads the FPGA configuration file from the FPGA chip (using the read-back functionality generally available on the FPGA device for debugging purposes), after which the attacker reverse-engineers the obtained bitstream. To prevent the read-back attack, most manufacturers provide the option of disabling the read-back functionality. Moreover, even though theoretically possible to interpret and/or to modify the bit-stream of an FPGA, major vendors (e.g., Xilinx, Actel) maintain that it is virtually impossible. The irregular row and column pattern of the hierarchical interconnection network exacerbates the inherent complexity of the reverse-engineering process [12]. A side-channel attack exploits unintentional information leakage sources (e.g., power consumption, timing behavior, electromagnetic radiations) in the implementation. At present, little work has investigated the feasibility of such attacks against FPGAs. Nevertheless, attacks using power consumption and specific to RSA are known in the literature. For instance, Simple Power Analysis and Differential Power Analysis exploit the fact that a straightforward implementation of the Right-to-Left Binary Algorithm (widely used in RSA hardware circuits, including our RSA Processor) has power consumption that changes in time with the bit-sequence of the RSA key (thus, monitoring the FPGA power consumption allows discovering the RSA key). Simple countermeasures can be found in [13. In our case, power attacks are more difficult to launch, since multiple RSA Processors operate concurrently and asynchronously, effectively masking the information that can be revealed by the overall FPGA power consumption. We note that hardware-implemented cryptographic co-processor engines limit the types of secure computations that the user can perform to only the implemented cryptographic routines. In the next section the Trusted Computing Base is Insider Attack and Cyber Security We now present a technique, information flow signature checking [29], to protect application critical data from unintended modifications, even by the operating system or an insider with root privileges, and describe its implementation. We define unintended modifications as those that represent a violation of the intended behavior of a program defined by its source code. For example, this includes the operating system or root user trying to write directly to a memory location that contains critical data, or malicious modification of a pointer in a program, causing it to modify an object other than the one intended by the source code"
Justify with an example how the field of networking is now mature enough that a number of fundamentally important issues can be identified,"The field of networking is now mature enough that a number of fundamentally important issues can be identified .For example, in the transport layer, the fundamental issues include reliable communication over an unreliable network layer, connection establishment/ teardown and handshaking, congestion and flow control, and multiplexing","They know that the Internet has been a revolutionary and disruptive technology and can see that it is profoundly changing our world. Given the enormous relevance of the Internet, students are naturally curious about what is under the hood. Thus, it is easy for an instructor to get students excited about basic principles when using the Internet as the guiding focus. Teaching Networking Principles Two of the unique features of the bookits top-down approach and its focus on the Internethave appeared in the titles of our book. If we could have squeezed a third phrase into the subtitle, it would have contained the word principles. The field of networking is now mature enough that a number of fundamentally important issues can be identified. For example, in the transport layer, the fundamental issues include reliable communication over an unreliable network layer, connection establishment/ teardown and handshaking, congestion and flow control, and multiplexing. Three fundamentally important network-layer issues are determining good paths between two routers, interconnecting a large number of heterogeneous networks, and managing the complexity of a modern network. In the link layer, a fundamental problem is sharing a multiple access channel. In network security, techniques for providing confidentiality, authentication, and message integrity are all based on cryptographic fundamentals. This text identifies fundamental networking issues and studies approaches towards addressing these issues. The student learning these principles will gain knowledge with a long shelf lifelong after todays network standards and protocols have become obsolete, the principles they embody will remain important and relevant. We believe that the combination of using the Internet to get the students foot in the door and then emphasizing fundamental issues and solution approaches will allow the student to quickly understand just about any networking technology"
"Justify with an example how as we have added new material in each edition of our book, weve had to remove coverage of some existing topics to keep the book at manageable length","As we have added new material in each edition of our book, weve had to remove coverage of some existing topics to keep the book at manageable length .For example, to make room for the new material in this edition, weve removed material on FTP, distributed hash tables, and multicasting, Material that appeared in earlier editions of the text is still of interest, and thus can be found on the books Web site","The Website Each new copy of this textbook includes twelve months of access to a Companion Website for all book readers at http://www.pearsonglobaleditions.com/kurose, which includes: Interactive learning material. The books Companion Website contains VideoNotesvideo presentations of important topics throughout the book done by the authors, as well as walkthroughs of solutions to problems similar to those at the end of the chapter. Weve seeded the Web site with VideoNotes and online problems for chapters 1 through 5 and will continue to actively add and update this material over time. As in earlier editions, the Web site contains the interactive Java applets that animate many key networking concepts. The site also has interactive quizzes that permit students to check their basic understanding of the subject matter. Professors can integrate these interactive features into their lectures or use them as mini labs. Additional technical material. As we have added new material in each edition of our book, weve had to remove coverage of some existing topics to keep the book at manageable length. For example, to make room for the new material in this edition, weve removed material on FTP, distributed hash tables, and multicasting, Material that appeared in earlier editions of the text is still of interest, and thus can be found on the books Web site. Programming assignments. The Web site also provides a number of detailed programming assignments, which include building a multithreaded Web server, building an e-mail client with a GUI interface, programming the sender and receiver sides of a reliable data transport protocol, programming a distributed routing algorithm, and more"
Justify with an example how all activity in the Internet that involves two or more communicating remote entities is governed by a protocol,"All activity in the Internet that involves two or more communicating remote entities is governed by a protocol .For example, hardware-implemented protocols in two physically connected computers control the flow of bits on the wire between the two network interface cards; congestion-control protocols in end systems control the rate at which packets are transmitted between sender and receiver; protocols in routers determine a packets path from source to destination","Once again, we see that the transmission and receipt of messages, and a set of conventional actions taken when these messages are sent and received, are at the heart of this question-and-answer protocol. Network Protocols A network protocol is similar to a human protocol, except that the entities exchanging messages and taking actions are hardware or software components of some device (for example, computer, smartphone, tablet, router, or other network-capable device). All activity in the Internet that involves two or more communicating remote entities is governed by a protocol. For example, hardware-implemented protocols in two physically connected computers control the flow of bits on the wire between the two network interface cards; congestion-control protocols in end systems control the rate at which packets are transmitted between sender and receiver; protocols in routers determine a packets path from source to destination. Protocols are running everywhere in the Internet, and consequently much of this book is about computer network protocols. As an example of a computer network protocol with which you are probably familiar, consider what happens when you make a request to a Web server, that is, when you type the URL of a Web page into your Web browser. The scenario is illustrated in the right half of Figure 1.2. First, your computer will send a connection request message to the Web server and wait for a reply. The Web server will eventually receive your connection request message and return a connection reply message. Knowing that it is now OK to request the Web document, your computer then sends the name of the Web page it wants to fetch from that Web server in a GET message. Finally, the Web server returns the Web page (file) to your computer"
"Justify with an example how for example, attackers, via the Internet, might be able to hack into IoT devices or into the servers collecting data from IoT devices","For example, attackers, via the Internet, might be able to hack into IoT devices or into the servers collecting data from IoT devices .For example, an attacker could hijack an Internet-connected doll and talk directly with a child; or an attacker could hack into a database that stores personal health and activity information collected from wearable devices","By some estimates, as of 2015 there are already 5 billion things connected to the Internet, and the number could reach 25 billion by 2020 [Gartner 2014]. These things include our smartphones, which already follow us around in our homes, offices, and cars, reporting our geo-locations and usage data to our ISPs and Internet applications. But in addition to our smartphones, a wide-variety of non-traditional things are already available as products. For example, there are Internet-connected wearables, including watches (from Apple and many others) and eye glasses. Internet-connected glasses can, for example, upload everything we see to the cloud, allowing us to share our visual experiences with people around the world in real-time. There are Internetconnected things already available for the smart home, including Internet-connected thermostats that can be controlled remotely from our smartphones, and Internetconnected body scales, enabling us to graphically review the progress of our diets from our smartphones. There are Internet-connected toys, including dolls that recognize and interpret a childs speech and respond appropriately. The IoT offers potentially revolutionary benefits to users. But at the same time there are also huge security and privacy risks. For example, attackers, via the Internet, might be able to hack into IoT devices or into the servers collecting data from IoT devices. For example, an attacker could hijack an Internet-connected doll and talk directly with a child; or an attacker could hack into a database that stores personal health and activity information collected from wearable devices. These security and privacy concerns could undermine the consumer confidence necessary for the technologies to meet their full potential and may result in less widespread adoption [FTC 2015]. terms hosts and end systems interchangeably; that is, host = end system. Hosts are sometimes further divided into two categories: clients and servers. Informally, clients tend to be desktop and mobile PCs, smartphones, and so on, whereas servers tend to be more powerful machines that store and distribute Web pages, stream video, relay e-mail, and so on. Today, most of the servers from which we receive search results, e-mail, Web pages, and videos reside in large data centers. For example, Google has 50-100 data centers, including about 15 large centers, each with more than 100,000 servers"
"Justify with an example how today, most of the servers from which we receive search results, e-mail, Web pages, and videos reside in large data centers","Today, most of the servers from which we receive search results, e-mail, Web pages, and videos reside in large data centers .For example, Google has 50-100 data centers, including about 15 large centers, each with more than 100,000 servers. 1.2.1 Access Networks Having considered the applications and end systems at the edge of the network, lets next consider the access networkthe network that physically connects an end system to the first router (also known as the edge router) on a path from the end system to any other distant end system","The IoT offers potentially revolutionary benefits to users. But at the same time there are also huge security and privacy risks. For example, attackers, via the Internet, might be able to hack into IoT devices or into the servers collecting data from IoT devices. For example, an attacker could hijack an Internet-connected doll and talk directly with a child; or an attacker could hack into a database that stores personal health and activity information collected from wearable devices. These security and privacy concerns could undermine the consumer confidence necessary for the technologies to meet their full potential and may result in less widespread adoption [FTC 2015]. terms hosts and end systems interchangeably; that is, host = end system. Hosts are sometimes further divided into two categories: clients and servers. Informally, clients tend to be desktop and mobile PCs, smartphones, and so on, whereas servers tend to be more powerful machines that store and distribute Web pages, stream video, relay e-mail, and so on. Today, most of the servers from which we receive search results, e-mail, Web pages, and videos reside in large data centers. For example, Google has 50-100 data centers, including about 15 large centers, each with more than 100,000 servers. 1.2.1 Access Networks Having considered the applications and end systems at the edge of the network, lets next consider the access networkthe network that physically connects an end system to the first router (also known as the edge router) on a path from the end system to any other distant end system. Figure 1.4 shows several types of access National or Global ISP Mobile Network Local or Regional ISP Enterprise Network 1.2 THE NETWORK EDGE networks with thick, shaded lines and the settings (home, enterprise, and wide-area mobile wireless) in which they are used"
"Justify with an example how if, during a short interval of time, the arrival rate of packets to the router (when converted to bits per second) exceeds 15 Mbps, congestion will occur at the router as packets queue in the links output buffer before being transmitted onto the link","If, during a short interval of time, the arrival rate of packets to the router (when converted to bits per second) exceeds 15 Mbps, congestion will occur at the router as packets queue in the links output buffer before being transmitted onto the link .For example, if Host A and B each send a burst of five packets back-to-back at the same time, then most of these packets will spend some time waiting in the queue","packets are represented by three-dimensional slabs. The width of a slab represents the number of bits in the packet. In this figure, all packets have the same width and hence the same length. Suppose Hosts A and B are sending packets to Host E. Hosts A and B first send their packets along 100 Mbps Ethernet links to the first router. The router then directs these packets to the 15 Mbps link. If, during a short interval of time, the arrival rate of packets to the router (when converted to bits per second) exceeds 15 Mbps, congestion will occur at the router as packets queue in the links output buffer before being transmitted onto the link. For example, if Host A and B each send a burst of five packets back-to-back at the same time, then most of these packets will spend some time waiting in the queue. The situation is, in fact, entirely analogous to many common-day situationsfor example, when we wait in line for a bank teller or wait in front of a tollbooth. Well examine this queuing delay in more detail in Section 1.4. Forwarding Tables and Routing Protocols Earlier, we said that a router takes a packet arriving on one of its attached communication links and forwards that packet onto another one of its attached communication links. But how does the router determine which link it should forward the packet onto? Packet forwarding is actually done in different ways in different types of computer networks. Here, we briefly describe how it is done in the Internet"
"Justify with an example how for TDM, the transmission rate of a circuit is equal to the frame rate multiplied by the number of bits in a slot","For TDM, the transmission rate of a circuit is equal to the frame rate multiplied by the number of bits in a slot .For example, if the link transmits 8,000 frames per second and each slot consists of 8 bits, then the transmission rate of each circuit is 64 kbps","FDM 4KHz Link 4KHz TDM 3 1 2 4 Frame Time Key: All slots labeled 2 are dedicated to a specific sender-receiver pair. With FDM, each circuit continuously gets a fraction of the bandwidth. With TDM, each circuit gets all of the bandwidth periodically during brief intervals of time (that is, during slots) up to four circuits. For FDM, the frequency domain is segmented into four bands, each of bandwidth 4 kHz. For TDM, the time domain is segmented into frames, with four time slots in each frame; each circuit is assigned the same dedicated slot in the revolving TDM frames. For TDM, the transmission rate of a circuit is equal to the frame rate multiplied by the number of bits in a slot. For example, if the link transmits 8,000 frames per second and each slot consists of 8 bits, then the transmission rate of each circuit is 64 kbps. Proponents of packet switching have always argued that circuit switching is wasteful because the dedicated circuits are idle during silent periods. For example, when one person in a telephone call stops talking, the idle network resources (frequency bands or time slots in the links along the connections route) cannot be used by other ongoing connections. As another example of how these resources can be underutilized, consider a radiologist who uses a circuit-switched network to remotely access a series of x-rays"
Justify with an example how proponents of packet switching have always argued that circuit switching is wasteful because the dedicated circuits are idle during silent periods,,"With FDM, each circuit continuously gets a fraction of the bandwidth. With TDM, each circuit gets all of the bandwidth periodically during brief intervals of time (that is, during slots) up to four circuits. For FDM, the frequency domain is segmented into four bands, each of bandwidth 4 kHz. For TDM, the time domain is segmented into frames, with four time slots in each frame; each circuit is assigned the same dedicated slot in the revolving TDM frames. For TDM, the transmission rate of a circuit is equal to the frame rate multiplied by the number of bits in a slot. For example, if the link transmits 8,000 frames per second and each slot consists of 8 bits, then the transmission rate of each circuit is 64 kbps. Proponents of packet switching have always argued that circuit switching is wasteful because the dedicated circuits are idle during silent periods. For example, when one person in a telephone call stops talking, the idle network resources (frequency bands or time slots in the links along the connections route) cannot be used by other ongoing connections. As another example of how these resources can be underutilized, consider a radiologist who uses a circuit-switched network to remotely access a series of x-rays. The radiologist sets up a connection, requests an image, contemplates the image, and then requests a new image. Network resources are allocated to the connection but are not used (i.e., are wasted) during the radiologists contemplation periods. Proponents of packet switching also enjoy pointing out that establishing end-to-end circuits and reserving end-to-end transmission capacity is complicated and requires complex signaling software to coordinate the operation of the switches along the end-to-end path"
"Justify with an example how with circuit switching, 100 kbps must be reserved for each user at all times","With circuit switching, 100 kbps must be reserved for each user at all times .For example, with circuit-switched TDM, if a one-second frame is divided into 10 time slots of 100 ms each, then each user would be allocated one time slot per frame","Critics of packet switching have often argued that packet switching is not suitable for real-time services (for example, telephone calls and video conference calls) because of its variable and unpredictable end-to-end delays (due primarily to variable and unpredictable queuing delays). Proponents of packet switching argue that (1) it offers better sharing of transmission capacity than circuit switching and (2) it is simpler, more efficient, and less costly to implement than circuit switching. An interesting discussion of packet switching versus circuit switching is [MolineroFernandez 2002]. Generally speaking, people who do not like to hassle with restaurant reservations prefer packet switching to circuit switching. Why is packet switching more efficient? Lets look at a simple example. Suppose users share a 1 Mbps link. Also suppose that each user alternates between periods of activity, when a user generates data at a constant rate of 100 kbps, and periods of inactivity, when a user generates no data. Suppose further that a user is active only 10 percent of the time (and is idly drinking coffee during the remaining 90 percent of the time). With circuit switching, 100 kbps must be reserved for each user at all times. For example, with circuit-switched TDM, if a one-second frame is divided into 10 time slots of 100 ms each, then each user would be allocated one time slot per frame. Thus, the circuit-switched link can support only 10 ( = 1 Mbps/100 kbps) simultaneous users. With packet switching, the probability that a specific user is active is 0.1 (that is, 10 percent). If there are 35 users, the probability that there are 11 or more simultaneously active users is approximately 0.0004. (Homework Problem P8 outlines how this probability is obtained.) When there are 10 or fewer simultaneously active users (which happens with probability 0.9996), the aggregate arrival rate of data is less than or equal to 1 Mbps, the output rate of the link. Thus, when there are 10 or fewer active users, users packets flow through the link essentially without delay, as is the case with circuit switching. When there are more than 10 simultaneously active users, then the aggregate arrival rate of packets exceeds the output capacity of the link, and the output queue will begin to grow. (It continues to grow until the aggregate input rate falls back below 1 Mbps, at which point the queue will begin to diminish in length.) Because the probability of having more than 10 simultaneously active users is minuscule in this example, packet switching provides essentially the same performance as circuit switching, but does so while allowing for more than three times the number of users"
"Justify with an example how to further complicate matters, in some regions, there may be a larger regional ISP (possibly spanning an entire country) to which the smaller regional ISPs in that region connect; the larger regional ISP then connects to a tier-1 ISP","To further complicate matters, in some regions, there may be a larger regional ISP (possibly spanning an entire country) to which the smaller regional ISPs in that region connect; the larger regional ISP then connects to a tier-1 ISP .For example, in China, there are access ISPs in each city, which connect to provincial ISPs, which in turn connect to national ISPs, which finally connect to tier-1 ISPs [Tian 2012]","Network Structure 2, just described, is a two-tier hierarchy with global transit providers residing at the top tier and access ISPs at the bottom tier. This assumes that global transit ISPs are not only capable of getting close to each and every access ISP, but also find it economically desirable to do so. In reality, although some ISPs do have impressive global coverage and do directly connect with many access ISPs, no ISP has presence in each and every city in the world. Instead, in any given region, there may be a regional ISP to which the access ISPs in the region connect. Each regional ISP then connects to tier-1 ISPs. Tier-1 ISPs are similar to our (imaginary) global transit ISP; but tier-1 ISPs, which actually do exist, do not have a presence in every city in the world. There are approximately a dozen tier-1 ISPs, including Level 3 Communications, AT&T, Sprint, and NTT. Interestingly, no group officially sanctions tier-1 status; as the saying goesif you have to ask if youre a member of a group, youre probably not. Returning to this network of networks, not only are there multiple competing tier-1 ISPs, there may be multiple competing regional ISPs in a region. In such a hierarchy, each access ISP pays the regional ISP to which it connects, and each regional ISP pays the tier-1 ISP to which it connects. (An access ISP can also connect directly to a tier-1 ISP, in which case it pays the tier-1 ISP). Thus, there is customerprovider relationship at each level of the hierarchy. Note that the tier-1 ISPs do not pay anyone as they are at the top of the hierarchy. To further complicate matters, in some regions, there may be a larger regional ISP (possibly spanning an entire country) to which the smaller regional ISPs in that region connect; the larger regional ISP then connects to a tier-1 ISP. For example, in China, there are access ISPs in each city, which connect to provincial ISPs, which in turn connect to national ISPs, which finally connect to tier-1 ISPs [Tian 2012]. We refer to this multi-tier hierarchy, which is still only a crude approximation of todays Internet, as Network Structure 3. To build a network that more closely resembles todays Internet, we must add points of presence (PoPs), multi-homing, peering, and Internet exchange points (IXPs) to the hierarchical Network Structure 3. PoPs exist in all levels of the hierarchy, except for the bottom (access ISP) level. A PoP is simply a group of one or more routers (at the same location) in the providers network where customer ISPs can connect into the provider ISP. For a customer network to connect to a providers PoP, it can lease a high-speed link from a third-party telecommunications provider to directly connect one of its routers to a router at the PoP. Any ISP (except for tier-1 ISPs) may choose to multi-home, that is, to connect to two or more provider ISPs. So, for example, an access ISP may multi-home with two regional ISPs, or it may multihome with two regional ISPs and also with a tier-1 ISP. Similarly, a regional ISP may multi-home with multiple tier-1 ISPs. When an ISP multi-homes, it can continue to send and receive packets into the Internet even if one of its providers has a failure"
"Justify with an example how unlike the other three delays (namely, dproc, dtrans, and dprop), the queuing delay can vary from packet to packet","Unlike the other three delays (namely, dproc, dtrans, and dprop), the queuing delay can vary from packet to packet .For example, if 10 packets arrive at an empty queue at the same time, the first packet transmitted will suffer no queuing delay, while the last packet transmitted will suffer a relatively large queuing delay (while it waits for the other nine packets to be transmitted)","If we let dproc, dqueue, dtrans, and dprop denote the processing, queuing, transmission, and propagation delays, then the total nodal delay is given by dnodal = dproc + dqueue + dtrans + dprop The contribution of these delay components can vary significantly. For example, dprop can be negligible (for example, a couple of microseconds) for a link connecting two routers on the same university campus; however, dprop is hundreds of milliseconds for two routers interconnected by a geostationary satellite link, and can be the dominant term in dnodal. Similarly, dtrans can range from negligible to significant. Its contribution is typically negligible for transmission rates of 10 Mbps and higher (for example, for LANs); however, it can be hundreds of milliseconds for large Internet packets sent over low-speed dial-up modem links. The processing delay, dproc, is often negligible; however, it strongly influences a routers maximum throughput, which is the maximum rate at which a router can forward packets. 1.4.2 Queuing Delay and Packet Loss The most complicated and interesting component of nodal delay is the queuing delay, dqueue. In fact, queuing delay is so important and interesting in computer networking that thousands of papers and numerous books have been written about it [Bertsekas 1991; Daigle 1991; Kleinrock 1975, Kleinrock 1976; Ross 1995]. We give only a high-level, intuitive discussion of queuing delay here; the more curious reader may want to browse through some of the books (or even eventually write a PhD thesis on the subject!). Unlike the other three delays (namely, dproc, dtrans, and dprop), the queuing delay can vary from packet to packet. For example, if 10 packets arrive at an empty queue at the same time, the first packet transmitted will suffer no queuing delay, while the last packet transmitted will suffer a relatively large queuing delay (while it waits for the other nine packets to be transmitted). Therefore, when characterizing queuing delay, one typically uses statistical measures, such as average queuing delay, variance of queuing delay, and the probability that the queuing delay exceeds some specified value. When is the queuing delay large and when is it insignificant? The answer to this question depends on the rate at which traffic arrives at the queue, the transmission rate of the link, and the nature of the arriving traffic, that is, whether the traffic arrives periodically or arrives in bursts. To gain some insight here, let a denote the average rate at which packets arrive at the queue (a is in units of packets/sec). Recall that R is the transmission rate; that is, it is the rate (in bits/sec) at which bits are pushed out of the queue. Also suppose, for simplicity, that all packets consist of L bits. Then the average rate at which bits arrive at the queue is La bits/sec. Finally, assume that the queue is very big, so that it can hold essentially an infinite number of bits. The ratio La/R, called the traffic intensity, often plays an important role in estimating the extent of the queuing delay. If La/R > 1, then the average rate at which bits arrive at the queue exceeds the rate at which the bits can be transmitted from the queue. In this unfortunate situation, the queue will tend to increase without bound and the queuing delay will approach infinity! Therefore, one of the golden rules in traffic engineering is: Design your system so that the traffic intensity is no greater than 1"
"Justify with an example how on the other hand, if packets arrive in bursts but periodically, there can be a significant average queuing delay","On the other hand, if packets arrive in bursts but periodically, there can be a significant average queuing delay .For example, suppose N packets arrive simultaneously every (L/R)N seconds","When is the queuing delay large and when is it insignificant? The answer to this question depends on the rate at which traffic arrives at the queue, the transmission rate of the link, and the nature of the arriving traffic, that is, whether the traffic arrives periodically or arrives in bursts. To gain some insight here, let a denote the average rate at which packets arrive at the queue (a is in units of packets/sec). Recall that R is the transmission rate; that is, it is the rate (in bits/sec) at which bits are pushed out of the queue. Also suppose, for simplicity, that all packets consist of L bits. Then the average rate at which bits arrive at the queue is La bits/sec. Finally, assume that the queue is very big, so that it can hold essentially an infinite number of bits. The ratio La/R, called the traffic intensity, often plays an important role in estimating the extent of the queuing delay. If La/R > 1, then the average rate at which bits arrive at the queue exceeds the rate at which the bits can be transmitted from the queue. In this unfortunate situation, the queue will tend to increase without bound and the queuing delay will approach infinity! Therefore, one of the golden rules in traffic engineering is: Design your system so that the traffic intensity is no greater than 1. Now consider the case La/R 1. Here, the nature of the arriving traffic impacts the queuing delay. For example, if packets arrive periodicallythat is, one packet arrives every L/R secondsthen every packet will arrive at an empty queue and CHAPTER 1 COMPUTER NETWORKS AND THE INTERNET there will be no queuing delay. On the other hand, if packets arrive in bursts but periodically, there can be a significant average queuing delay. For example, suppose N packets arrive simultaneously every (L/R)N seconds. Then the first packet transmitted has no queuing delay; the second packet transmitted has a queuing delay of L/R seconds; and more generally, the nth packet transmitted has a queuing delay of (n - 1)L/R seconds. We leave it as an exercise for you to calculate the average queuing delay in this example. The two examples of periodic arrivals described above are a bit academic"
"Justify with an example how most of these routers have a name, and all of them have addresses","Most of these routers have a name, and all of them have addresses .For example, the name of Router 3 is border4-rt-gi-1-3.gw.umass.edu and its address is 128.119.2.194","cs-gw (128.119.240.254) 1.009 ms 0.899 ms 0.993 ms 128.119.3.154 (128.119.3.154) 0.931 ms 0.441 ms 0.651 ms -border4-rt-gi-1-3.gw.umass.edu (128.119.2.194) 1.032 ms 0.484 ms 0.451 ms -acr1-ge-2-1-0.Boston.cw.net (208.172.51.129) 10.006 ms 8.150 ms 8.460 ms -agr4-loopback.NewYork.cw.net (206.24.194.104) 12.272 ms 14.344 ms 13.267 ms -acr2-loopback.NewYork.cw.net (206.24.194.62) 13.225 ms 12.292 ms 12.148 ms -pos10-2.core2.NewYork1.Level3.net (209.244.160.133) 12.218 ms 11.823 ms 11.793 ms -gige9-1-52.hsipaccess1.NewYork1.Level3.net (64.159.17.39) 13.081 ms 11.556 ms 13.297 ms -p0-0.polyu.bbnplanet.net (4.25.109.122) 12.716 ms 13.052 ms 12.786 ms cis.poly.edu (128.238.32.126) 14.080 ms 13.035 ms 12.802 ms In the trace above there are nine routers between the source and the destination. Most of these routers have a name, and all of them have addresses. For example, the name of Router 3 is border4-rt-gi-1-3.gw.umass.edu and its address is 128.119.2.194. Looking at the data provided for this same router, we see that in the first of the three trials the round-trip delay between the source and the router was 1.03 msec. The round-trip delays for the subsequent two trials were 0.48 and 0.45 msec. These round-trip delays include all of the delays just discussed, including transmission delays, propagation delays, router processing delays, and queuing delays. Because the queuing delay is varying with time, the round-trip delay of packet n sent to a router n can sometimes be longer than the round-trip delay of packet n+1 sent to router n+1. Indeed, we observe this phenomenon in the above example: the delays to Router 6 are larger than the delays to Router 7! Want to try out Traceroute for yourself? We highly recommended that you visit http://www.traceroute.org, which provides a Web interface to an extensive list of sources for route tracing. You choose a source and supply the hostname for any destination. The Traceroute program then does all the work. There are a number of free software programs that provide a graphical interface to Traceroute; one of our favorites is PingPlotter [PingPlotter 2016]. End System, Application, and Other Delays In addition to processing, transmission, and propagation delays, there can be additional significant delays in the end systems. For example, an end system wanting to transmit a packet into a shared medium (e.g., as in a WiFi or cable modem scenario) may purposefully delay its transmission as part of its protocol for sharing the medium with other end systems; well consider such protocols in detail in Chapter 6"
"Justify with an example how End System, Application, and Other Delays In addition to processing, transmission, and propagation delays, there can be additional significant delays in the end systems","End System, Application, and Other Delays In addition to processing, transmission, and propagation delays, there can be additional significant delays in the end systems .For example, an end system wanting to transmit a packet into a shared medium (e.g., as in a WiFi or cable modem scenario) may purposefully delay its transmission as part of its protocol for sharing the medium with other end systems; well consider such protocols in detail in Chapter 6","Most of these routers have a name, and all of them have addresses. For example, the name of Router 3 is border4-rt-gi-1-3.gw.umass.edu and its address is 128.119.2.194. Looking at the data provided for this same router, we see that in the first of the three trials the round-trip delay between the source and the router was 1.03 msec. The round-trip delays for the subsequent two trials were 0.48 and 0.45 msec. These round-trip delays include all of the delays just discussed, including transmission delays, propagation delays, router processing delays, and queuing delays. Because the queuing delay is varying with time, the round-trip delay of packet n sent to a router n can sometimes be longer than the round-trip delay of packet n+1 sent to router n+1. Indeed, we observe this phenomenon in the above example: the delays to Router 6 are larger than the delays to Router 7! Want to try out Traceroute for yourself? We highly recommended that you visit http://www.traceroute.org, which provides a Web interface to an extensive list of sources for route tracing. You choose a source and supply the hostname for any destination. The Traceroute program then does all the work. There are a number of free software programs that provide a graphical interface to Traceroute; one of our favorites is PingPlotter [PingPlotter 2016]. End System, Application, and Other Delays In addition to processing, transmission, and propagation delays, there can be additional significant delays in the end systems. For example, an end system wanting to transmit a packet into a shared medium (e.g., as in a WiFi or cable modem scenario) may purposefully delay its transmission as part of its protocol for sharing the medium with other end systems; well consider such protocols in detail in Chapter 6. Another important delay is media packetization delay, which is present in Voiceover-IP (VoIP) applications. In VoIP, the sending side must first fill a packet with encoded digitized speech before passing the packet to the Internet. This time to fill a packetcalled the packetization delaycan be significant and can impact the userperceived quality of a VoIP call. This issue will be further explored in a homework problem at the end of this chapter"
Justify with an example how the services provided by the link layer depend on the specific link-layer protocol that is employed over the link,"The services provided by the link layer depend on the specific link-layer protocol that is employed over the link .For example, some link-layer protocols provide reliable delivery, from transmitting node, over one link, to receiving node","Link Layer The Internets network layer routes a datagram through a series of routers between the source and destination. To move a packet from one node (host or router) to the next node in the route, the network layer relies on the services of the link layer. In particular, at each node, the network layer passes the datagram down to the link layer, which delivers the datagram to the next node along the route. At this next node, the link layer passes the datagram up to the network layer. The services provided by the link layer depend on the specific link-layer protocol that is employed over the link. For example, some link-layer protocols provide reliable delivery, from transmitting node, over one link, to receiving node. Note that this reliable delivery service is different from the reliable delivery service of TCP, which provides reliable delivery from one end system to another. Examples of linklayer protocols include Ethernet, WiFi, and the cable access networks DOCSIS protocol. As datagrams typically need to traverse several links to travel from source to destination, a datagram may be handled by different link-layer protocols at different links along its route. For example, a datagram may be handled by Ethernet on one link and by PPP on the next link. The network layer will receive a different service from each of the different link-layer protocols. In this book, well refer to the linklayer packets as frames. Physical Layer While the job of the link layer is to move entire frames from one network element to an adjacent network element, the job of the physical layer is to move the individual bits within the frame from one node to the next. The protocols in this layer are again link dependent and further depend on the actual transmission medium of the link (for example, twisted-pair copper wire, single-mode fiber optics). For example, Ethernet has many physical-layer protocols: one for twisted-pair copper wire, another for coaxial cable, another for fiber, and so on. In each case, a bit is moved across the link in a different way"
"Justify with an example how as datagrams typically need to traverse several links to travel from source to destination, a datagram may be handled by different link-layer protocols at different links along its route","As datagrams typically need to traverse several links to travel from source to destination, a datagram may be handled by different link-layer protocols at different links along its route .For example, a datagram may be handled by Ethernet on one link and by PPP on the next link","Link Layer The Internets network layer routes a datagram through a series of routers between the source and destination. To move a packet from one node (host or router) to the next node in the route, the network layer relies on the services of the link layer. In particular, at each node, the network layer passes the datagram down to the link layer, which delivers the datagram to the next node along the route. At this next node, the link layer passes the datagram up to the network layer. The services provided by the link layer depend on the specific link-layer protocol that is employed over the link. For example, some link-layer protocols provide reliable delivery, from transmitting node, over one link, to receiving node. Note that this reliable delivery service is different from the reliable delivery service of TCP, which provides reliable delivery from one end system to another. Examples of linklayer protocols include Ethernet, WiFi, and the cable access networks DOCSIS protocol. As datagrams typically need to traverse several links to travel from source to destination, a datagram may be handled by different link-layer protocols at different links along its route. For example, a datagram may be handled by Ethernet on one link and by PPP on the next link. The network layer will receive a different service from each of the different link-layer protocols. In this book, well refer to the linklayer packets as frames. Physical Layer While the job of the link layer is to move entire frames from one network element to an adjacent network element, the job of the physical layer is to move the individual bits within the frame from one node to the next. The protocols in this layer are again link dependent and further depend on the actual transmission medium of the link (for example, twisted-pair copper wire, single-mode fiber optics). For example, Ethernet has many physical-layer protocols: one for twisted-pair copper wire, another for coaxial cable, another for fiber, and so on. In each case, a bit is moved across the link in a different way"
Justify with an example how worms are malware that can enter a device without any explicit user interaction,"Worms are malware that can enter a device without any explicit user interaction .For example, a user may be running a vulnerable network application to which an attacker can send malware","Since we dont yet have expertise in computer networking and Internet protocols, well begin here by surveying some of todays more prevalent security-related problems. This will whet our appetite for more substantial discussions in the upcoming chapters. So we begin here by simply asking, what can go wrong? How are computer networks vulnerable? What are some of the more prevalent types of attacks today? The Bad Guys Can Put Malware into Your Host Via the Internet We attach devices to the Internet because we want to receive/send data from/to the Internet. This includes all kinds of good stuff, including Instagram posts, Internet search results, streaming music, video conference calls, streaming movies, and so on. But, unfortunately, along with all that good stuff comes malicious stuff collectively known as malwarethat can also enter and infect our devices. Once malware infects our device it can do all kinds of devious things, including deleting our files and installing spyware that collects our private information, such as social security numbers, passwords, and keystrokes, and then sends this (over the Internet, of course!) back to the bad guys. Our compromised host may also be enrolled in a network of thousands of similarly compromised devices, collectively known as a botnet, which the bad guys control and leverage for spam e-mail distribution or distributed denial-of-service attacks (soon to be discussed) against targeted hosts. Much of the malware out there today is self-replicating: once it infects one host, from that host it seeks entry into other hosts over the Internet, and from the newly infected hosts, it seeks entry into yet more hosts. In this manner, self-replicating malware can spread exponentially fast. Malware can spread in the form of a virus or a worm. Viruses are malware that require some form of user interaction to infect the users device. The classic example is an e-mail attachment containing malicious executable code. If a user receives and opens such an attachment, the user inadvertently runs the malware on the device. Typically, such e-mail viruses are self-replicating: once executed, the virus may send an identical message with an identical malicious attachment to, for example, every recipient in the users address book. Worms are malware that can enter a device without any explicit user interaction. For example, a user may be running a vulnerable network application to which an attacker can send malware. In some cases, without any user intervention, the application may accept the malware from the Internet and run it, creating a worm. The worm in the newly infected device then scans the Internet, searching for other hosts running the same vulnerable network application. When it finds other vulnerable hosts, it sends a copy of itself to those hosts"
"Justify with an example how the client-server architecture is shown in Often in a client-server application, a single-server host is incapable of keeping up with all the requests from clients","The client-server architecture is shown in Often in a client-server application, a single-server host is incapable of keeping up with all the requests from clients .For example, a popular social-networking site can quickly become overwhelmed if it has only one server handling all of its requests","In a client-server architecture, there is an always-on host, called the server, which services requests from many other hosts, called clients. A classic example is the Web application for which an always-on Web server services requests from browsers running on client hosts. When a Web server receives a request for an object from a client host, it responds by sending the requested object to the client host. Note that with the client-server architecture, clients do not directly communicate with each other; for example, in the Web application, two browsers do not directly communicate. Another characteristic of the client-server architecture is that the server has a fixed, well-known address, called an IP address (which well discuss soon). Because the server has a fixed, well-known address, and because the server is always on, a client can always contact the server by sending a packet to the servers IP address. Some of the better-known applications with a client-server architecture include the Web, FTP, Telnet, and e-mail. The client-server architecture is shown in Often in a client-server application, a single-server host is incapable of keeping up with all the requests from clients. For example, a popular social-networking site can quickly become overwhelmed if it has only one server handling all of its requests. For this reason, a data center, housing a large number of hosts, is often used to create a powerful virtual server. The most popular Internet servicessuch as search engines (e.g., Google, Bing, Baidu), Internet commerce (e.g., Amazon, eBay, Alibaba), Web-based e-mail (e.g., Gmail and Yahoo Mail), social networking (e.g., Facebook, Instagram, Twitter, and WeChat)employ one or more data centers. As discussed in Section 1.3.3, Google has 30 to 50 data centers distributed around the world, which collectively handle search, YouTube, Gmail, and other services. A data center can have hundreds of thousands of servers, which must be powered and maintained. Additionally, the service providers must pay recurring interconnection and bandwidth costs for sending data from their data centers. In a P2P architecture, there is minimal (or no) reliance on dedicated servers in data centers. Instead the application exploits direct communication between pairs of intermittently connected hosts, called peers. The peers are not owned by the service provider, but are instead desktops and laptops controlled by users, with most of the a. Client-server architecture PRINCIPLES OF NETWORK APPLICATIONS (a) Client-server architecture; (b) P2P architecture peers residing in homes, universities, and offices. Because the peers communicate without passing through a dedicated server, the architecture is called peer-to-peer"
"Justify with an example how we mention that some applications have hybrid architectures, combining both client-server and P2P elements","We mention that some applications have hybrid architectures, combining both client-server and P2P elements .For example, for many instant messaging applications, servers are used to track the IP addresses of users, but user-to-user messages are sent directly between user hosts (without passing through intermediate servers)","In a P2P architecture, there is minimal (or no) reliance on dedicated servers in data centers. Instead the application exploits direct communication between pairs of intermittently connected hosts, called peers. The peers are not owned by the service provider, but are instead desktops and laptops controlled by users, with most of the a. Client-server architecture PRINCIPLES OF NETWORK APPLICATIONS (a) Client-server architecture; (b) P2P architecture peers residing in homes, universities, and offices. Because the peers communicate without passing through a dedicated server, the architecture is called peer-to-peer. Many of todays most popular and traffic-intensive applications are based on P2P architectures. These applications include file sharing (e.g., BitTorrent), peer-assisted download acceleration (e.g., Xunlei), and Internet telephony and video conference (e.g., Skype). The P2P architecture is illustrated in Figure 2.2(b). We mention that some applications have hybrid architectures, combining both client-server and P2P elements. For example, for many instant messaging applications, servers are used to track the IP addresses of users, but user-to-user messages are sent directly between user hosts (without passing through intermediate servers). One of the most compelling features of P2P architectures is their selfscalability. For example, in a P2P file-sharing application, although each peer generates workload by requesting files, each peer also adds service capacity to the system by distributing files to other peers. P2P architectures are also cost effective, since they normally dont require significant server infrastructure and server bandwidth (in contrast with clients-server designs with datacenters). However, P2P applications face challenges of security, performance, and reliability due to their highly decentralized structure"
Justify with an example how one of the most compelling features of P2P architectures is their selfscalability,"One of the most compelling features of P2P architectures is their selfscalability .For example, in a P2P file-sharing application, although each peer generates workload by requesting files, each peer also adds service capacity to the system by distributing files to other peers","Many of todays most popular and traffic-intensive applications are based on P2P architectures. These applications include file sharing (e.g., BitTorrent), peer-assisted download acceleration (e.g., Xunlei), and Internet telephony and video conference (e.g., Skype). The P2P architecture is illustrated in Figure 2.2(b). We mention that some applications have hybrid architectures, combining both client-server and P2P elements. For example, for many instant messaging applications, servers are used to track the IP addresses of users, but user-to-user messages are sent directly between user hosts (without passing through intermediate servers). One of the most compelling features of P2P architectures is their selfscalability. For example, in a P2P file-sharing application, although each peer generates workload by requesting files, each peer also adds service capacity to the system by distributing files to other peers. P2P architectures are also cost effective, since they normally dont require significant server infrastructure and server bandwidth (in contrast with clients-server designs with datacenters). However, P2P applications face challenges of security, performance, and reliability due to their highly decentralized structure. 2.1.2 Processes Communicating Before building your network application, you also need a basic understanding of how the programs, running in multiple end systems, communicate with each other"
Justify with an example how Client and Server Processes A network application consists of pairs of processes that send messages to each other over a network,"Client and Server Processes A network application consists of pairs of processes that send messages to each other over a network .For example, in the Web application a client browser process exchanges messages with a Web server process","Processes on two different end systems communicate with each other by exchanging messages across the computer network. A sending process creates and sends messages into the network; a receiving process receives these messages and possibly responds by sending messages back. Figure 2.1 illustrates that processes communicating with each other reside in the application layer of the five-layer protocol stack. Client and Server Processes A network application consists of pairs of processes that send messages to each other over a network. For example, in the Web application a client browser process exchanges messages with a Web server process. In a P2P file-sharing system, a file is transferred from a process in one peer to a process in another peer. For each pair of communicating processes, we typically label one of the two processes as the client and the other process as the server. With the Web, a browser is a client process and a Web server is a server process. With P2P file sharing, the peer that is downloading the file is labeled as the client, and the peer that is uploading the file is labeled as the server. You may have observed that in some applications, such as in P2P file sharing, a process can be both a client and a server. Indeed, a process in a P2P file-sharing system can both upload and download files. Nevertheless, in the context of any given communication session between a pair of processes, we can still label one process as the client and the other process as the server. We define the client and server processes as follows: In the context of a communication session between a pair of processes, the process that initiates the communication (that is, initially contacts the other process at the beginning of the session) is labeled as the client. The process that waits to be contacted to begin the session is the server"
Justify with an example how popular applications have been assigned specific port numbers,"Popular applications have been assigned specific port numbers .For example, a Web server is identified by port number 80","In the Internet, the host is identified by its IP address. Well discuss IP addresses in great detail in Chapter 4. For now, all we need to know is that an IP address is a 32-bit quantity that we can think of as uniquely identifying the host. In addition to knowing the address of the host to which a message is destined, the sending process must also identify the receiving process (more specifically, the receiving socket) running in the host. This information is needed because in general a host could be running many network applications. A destination port number serves this purpose. Popular applications have been assigned specific port numbers. For example, a Web server is identified by port number 80. A mail server process (using the SMTP protocol) is identified by port number 25. A list of well-known port numbers for all Internet standard protocols can be found at www.iana.org. Well examine port numbers in detail in Chapter 3. 2.1.3 Transport Services Available to Applications Recall that a socket is the interface between the application process and the transport-layer protocol. The application at the sending side pushes messages through the socket. At the other side of the socket, the transport-layer protocol has the responsibility of getting the messages to the socket of the receiving process"
Justify with an example how many other application-layer protocols are proprietary and intentionally not available in the public domain,"Many other application-layer protocols are proprietary and intentionally not available in the public domain .For example, Skype uses proprietary application-layer protocols. It is important to distinguish between network applications and application-layer protocols","Application Underlying Transport Protocol SMTP [RFC 5321] Remote terminal access TCP HTTP [RFC 2616] File transfer TCP HTTP (e.g., YouTube) Internet telephony SIP [RFC 3261], RTP [RFC 3550], or proprietary (e.g., Skype) Popular Internet applications, their application-layer protocols, and their underlying transport protocols 2.1.5 Application-Layer Protocols We have just learned that network processes communicate with each other by sending messages into sockets. But how are these messages structured? What are the meanings of the various fields in the messages? When do the processes send the messages? These questions bring us into the realm of application-layer protocols. An application-layer protocol defines how an applications processes, running on different end systems, pass messages to each other. In particular, an application-layer protocol defines: The types of messages exchanged, for example, request messages and response messages The syntax of the various message types, such as the fields in the message and how the fields are delineated The semantics of the fields, that is, the meaning of the information in the fields Rules for determining when and how a process sends messages and responds to messages Some application-layer protocols are specified in RFCs and are therefore in the public domain. For example, the Webs application-layer protocol, HTTP (the HyperText Transfer Protocol [RFC 2616]), is available as an RFC. If a browser developer follows the rules of the HTTP RFC, the browser will be able to retrieve Web pages from any Web server that has also followed the rules of the HTTP RFC. Many other application-layer protocols are proprietary and intentionally not available in the public domain. For example, Skype uses proprietary application-layer protocols. It is important to distinguish between network applications and application-layer protocols. An application-layer protocol is only one piece of a network application (albeit, a very important piece of the application from our point of view!). Lets look at a couple of examples. The Web is a client-server application that allows users to obtain documents from Web servers on demand. The Web application consists of many components, including a standard for document formats (that is, HTML), Web browsers (for example, Firefox and Microsoft Internet Explorer), Web servers (for example, Apache and Microsoft servers), and an application-layer protocol. The Webs application-layer protocol, HTTP, defines the format and sequence of messages exchanged between browser and Web server. Thus, HTTP is only one piece (albeit, an important piece) of the Web application. As another example, an Internet e-mail application also has many components, including mail servers that house user mailboxes; mail clients (such as Microsoft Outlook) that allow users to read and create messages; a standard for defining the structure of an e-mail message; and application-layer protocols that define how messages are passed between servers, how messages are passed between servers and mail clients, and how the contents of message headers are to be interpreted. The principal application-layer protocol for electronic mail is SMTP (Simple Mail Transfer Protocol) [RFC 5321]. Thus, e-mails principal application-layer protocol, SMTP, is only one piece (albeit an important piece) of the e-mail application"
Justify with an example how cookies can thus be used to create a user session layer on top of stateless HTTP,"Cookies can thus be used to create a user session layer on top of stateless HTTP .For example, when a user logs in to a Web-based e-mail application (such as Hotmail), the browser sends cookie information to the server, permitting the server to identify the user throughout the users session with the application","If Susan returns to Amazons site, say, one week later, her browser will continue to put the header line Cookie: 1678 in the request messages. Amazon also recommends products to Susan based on Web pages she has visited at Amazon in the past. If Susan also registers herself with Amazonproviding full name, e-mail address, postal address, and credit card informationAmazon can then include this information in its database, thereby associating Susans name with her identification number (and all of the pages she has visited at the site in the past!). This is how Amazon and other e-commerce sites provide one-click shoppingwhen Susan chooses to purchase an item during a subsequent visit, she doesnt need to re-enter her name, credit card number, or address. From this discussion we see that cookies can be used to identify a user. The first time a user visits a site, the user can provide a user identification (possibly his or her name). During the subsequent sessions, the browser passes a cookie header to the server, thereby identifying the user to the server. Cookies can thus be used to create a user session layer on top of stateless HTTP. For example, when a user logs in to a Web-based e-mail application (such as Hotmail), the browser sends cookie information to the server, permitting the server to identify the user throughout the users session with the application. Although cookies often simplify the Internet shopping experience for the user, they are controversial because they can also be considered as an invasion of privacy"
Justify with an example how a host with a complicated hostname can have one or more alias names,"A host with a complicated hostname can have one or more alias names .For example, a hostname such as relay1.west-coast .enterprise.com could have, say, two aliases such as enterprise.com and www.enterprise.com","We see from this example that DNS adds an additional delaysometimes substantialto the Internet applications that use it. Fortunately, as we discuss below, the desired IP address is often cached in a nearby DNS server, which helps to reduce DNS network traffic as well as the average DNS delay. DNS provides a few other important services in addition to translating hostnames to IP addresses: Host aliasing. A host with a complicated hostname can have one or more alias names. For example, a hostname such as relay1.west-coast .enterprise.com could have, say, two aliases such as enterprise.com and www.enterprise.com. In this case, the hostname relay1 .west-coast.enterprise.com is said to be a canonical hostname. Alias hostnames, when present, are typically more mnemonic than canonical hostnames. DNS can be invoked by an application to obtain the canonical hostname for a supplied alias hostname as well as the IP address of the host. Mail server aliasing. For obvious reasons, it is highly desirable that e-mail addresses be mnemonic. For example, if Bob has an account with Yahoo Mail, Bobs e-mail address might be as simple as bob@yahoo.mail. However, the hostname of the Yahoo mail server is more complicated and much less mnemonic than simply yahoo.com (for example, the canonical hostname might be something like relay1.west-coast.yahoo.com). DNS can be invoked by a mail application to obtain the canonical hostname for a supplied alias hostname as well as the IP address of the host. In fact, the MX record (see below) permits a companys mail server and Web server to have identical (aliased) hostnames; for example, a companys Web server and mail server can both be called enterprise.com"
"Justify with an example how for obvious reasons, it is highly desirable that e-mail addresses be mnemonic","For obvious reasons, it is highly desirable that e-mail addresses be mnemonic .For example, if Bob has an account with Yahoo Mail, Bobs e-mail address might be as simple as bob@yahoo.mail","DNS provides a few other important services in addition to translating hostnames to IP addresses: Host aliasing. A host with a complicated hostname can have one or more alias names. For example, a hostname such as relay1.west-coast .enterprise.com could have, say, two aliases such as enterprise.com and www.enterprise.com. In this case, the hostname relay1 .west-coast.enterprise.com is said to be a canonical hostname. Alias hostnames, when present, are typically more mnemonic than canonical hostnames. DNS can be invoked by an application to obtain the canonical hostname for a supplied alias hostname as well as the IP address of the host. Mail server aliasing. For obvious reasons, it is highly desirable that e-mail addresses be mnemonic. For example, if Bob has an account with Yahoo Mail, Bobs e-mail address might be as simple as bob@yahoo.mail. However, the hostname of the Yahoo mail server is more complicated and much less mnemonic than simply yahoo.com (for example, the canonical hostname might be something like relay1.west-coast.yahoo.com). DNS can be invoked by a mail application to obtain the canonical hostname for a supplied alias hostname as well as the IP address of the host. In fact, the MX record (see below) permits a companys mail server and Web server to have identical (aliased) hostnames; for example, a companys Web server and mail server can both be called enterprise.com. Load distribution. DNS is also used to perform load distribution among replicated servers, such as replicated Web servers. Busy sites, such as cnn.com, are replicated over multiple servers, with each server running on a different end system and each having a different IP address. For replicated Web servers, a set of IP addresses is thus associated with one canonical hostname. The DNS database contains this set of IP addresses. When clients make a DNS query for a name mapped to a set of addresses, the server responds with the entire set of IP addresses, but rotates the ordering of the addresses within each reply. Because a client typically sends its HTTP request message to the IP address that is listed first in the set, DNS rotation distributes the traffic among the replicated servers. DNS rotation is also used for e-mail so that multiple mail servers can have the same alias name. Also, content distribution companies such as Akamai have used DNS in more sophisticated ways [Dilley 2002] to provide Web content distribution (see Section 2.6.3)"
"Justify with an example how we can also use compression to create multiple versions of the same video, each at a different quality level","We can also use compression to create multiple versions of the same video, each at a different quality level .For example, we can use compression to create, say, three versions of the same video, at rates of 300 kbps, 1 Mbps, and 3 Mbps","By far, the most important performance measure for streaming video is average endto-end throughput. In order to provide continuous playout, the network must provide an average throughput to the streaming application that is at least as large as the bit rate of the compressed video. We can also use compression to create multiple versions of the same video, each at a different quality level. For example, we can use compression to create, say, three versions of the same video, at rates of 300 kbps, 1 Mbps, and 3 Mbps. Users can then decide which version they want to watch as a function of their current available bandwidth. Users with high-speed Internet connections might choose the 3 Mbps version; users watching the video over 3G with a smartphone might choose the 300 kbps version. 2.6.2 HTTP Streaming and DASH In HTTP streaming, the video is simply stored at an HTTP server as an ordinary file with a specific URL. When a user wants to see the video, the client establishes a TCP connection with the server and issues an HTTP GET request for that URL"
"Justify with an example how however, we have said little about how TCP and UDP provide these service models","However, we have said little about how TCP and UDP provide these service models .For example, we know that TCP provides a reliable data service, but we havent said yet how it does so","However, we have said little about how TCP and UDP provide these service models. For example, we know that TCP provides a reliable data service, but we havent said yet how it does so. In the next chapter well take a careful look at not only the what, but also the how and why of transport protocols. Equipped with knowledge about Internet application structure and applicationlevel protocols, were now ready to head further down the protocol stack and examine the transport layer in Chapter 3"
Justify with an example how more than one transport-layer protocol may be available to network applications,"More than one transport-layer protocol may be available to network applications .For example, the Internet has two protocolsTCP and UDP","More than one transport-layer protocol may be available to network applications. For example, the Internet has two protocolsTCP and UDP. Each of these protocols provides a different set of transport-layer services to the invoking application. 3.1.1 Relationship Between Transport and Network Layers Recall that the transport layer lies just above the network layer in the protocol stack. Whereas a transport-layer protocol provides logical communication between National or Global ISP Mobile Network Network Data link Physical Network Data link Physical Local or Regional ISP Application Transport Data link -to Data link Physical Home Network Log ica l en d Network -en Network Data link Physical spo Application Transport Enterprise Network Network Data link Physical The transport layer provides logical rather than physical communication between application processes CHAPTER 3 TRANSPORT LAYER processes running on different hosts, a network-layer protocol provides logicalcommunication between hosts. This distinction is subtle but important. Lets examine this distinction with the aid of a household analogy"
Justify with an example how certain services can be offered by a transport protocol even when the underlying network protocol doesnt offer the corresponding service at the network layer,"certain services can be offered by a transport protocol even when the underlying network protocol doesnt offer the corresponding service at the network layer .For example, as well see in this chapter, a transport protocol can offer reliable data transfer service to an application even when the underlying network protocol is unreliable, that is, even when the network protocol loses, garbles, or duplicates packets","The possible services that Ann and Bill can provide are clearly constrained by the possible services that the postal service provides. For example, if the postal service doesnt provide a maximum bound on how long it can take to deliver mail between the two houses (for example, three days), then there is no way that Ann and Bill can guarantee a maximum delay for mail delivery between any of the cousin pairs. In a similar manner, the services that a transport protocol can provide are often constrained by the service model of the underlying network-layer protocol. If the network-layer protocol cannot provide delay or bandwidth guarantees for transportlayer segments sent between hosts, then the transport-layer protocol cannot provide delay or bandwidth guarantees for application messages sent between processes. Nevertheless, certain services can be offered by a transport protocol even when the underlying network protocol doesnt offer the corresponding service at the network layer. For example, as well see in this chapter, a transport protocol can offer reliable data transfer service to an application even when the underlying network protocol is unreliable, that is, even when the network protocol loses, garbles, or duplicates packets. As another example (which well explore in Chapter 8 when we discuss network security), a transport protocol can use encryption to guarantee that application messages are not read by intruders, even when the network layer cannot guarantee the confidentiality of transport-layer segments. 3.1.2 Overview of the Transport Layer in the Internet Recall that the Internet makes two distinct transport-layer protocols available to the application layer. One of these protocols is UDP (User Datagram Protocol), which provides an unreliable, connectionless service to the invoking application. The second of these protocols is TCP (Transmission Control Protocol), which provides a reliable, connection-oriented service to the invoking application. When designing a network application, the application developer must specify one of these two transport protocols. As we saw in Section 2.7, the application developer selects between UDP and TCP when creating sockets"
Justify with an example how the application data occupies the data field of the UDP segment,"The application data occupies the data field of the UDP segment .For example, for DNS, the data field contains either a query message or a response message","Before discussing the UDP segment structure, we mention that it is possible for an application to have reliable data transfer when using UDP. This can be done if reliability is built into the application itself (for example, by adding acknowledgment and retransmission mechanisms, such as those well study in the next section). We mentioned earlier that the QUIC protocol [Iyengar 2015] used in Googles Chrome browser implements reliability in an application-layer protocol on top of UDP. But this is a nontrivial task that would keep an application developer busy debugging for a long time. Nevertheless, building reliability directly into the application allows the application to have its cake and eat it too. That is, application processes can communicate reliably without being subjected to the transmission-rate constraints imposed by TCPs congestion-control mechanism. 3.3.1 UDP Segment Structure The UDP segment structure, shown in Figure 3.7, is defined in RFC 768. The application data occupies the data field of the UDP segment. For example, for DNS, the data field contains either a query message or a response message. For a streaming audio application, audio samples fill the data field. The UDP header has only four fields, each consisting of two bytes. As discussed in the previous section, the port numbers allow the destination host to pass the application data to the correct process running on the destination end system (that is, to perform the demultiplexing function). The length field specifies the number of bytes in the UDP segment (header plus data). An explicit length value is needed since the size of the data field may differ from one UDP segment to the next. The checksum is used by the receiving host to check whether errors have been introduced into the segment. In truth, the checksum is also calculated over a few of the fields in the IP header in addition to the UDP segment. But we ignore this detail in order to see the forest through the trees"
"Justify with an example how in this section, we will incrementally develop the sender and receiver sides of a reliable data transfer protocol, considering increasingly complex models of the underlying channel","In this section, we will incrementally develop the sender and receiver sides of a reliable data transfer protocol, considering increasingly complex models of the underlying channel .For example, well consider what protocol mechanisms are Sending process Application layer PRINCIPLES OF RELIABLE DATA TRANSFER Receiver process Transport layer Reliable channel Reliable data transfer protocol (sending side) Reliable data transfer protocol (receiving side) rdt_rcv() Network layer Unreliable channel b","It is the responsibility of a reliable data transfer protocol to implement this service abstraction. This task is made difficult by the fact that the layer below the reliable data transfer protocol may be unreliable. For example, TCP is a reliable data transfer protocol that is implemented on top of an unreliable (IP) end-to-end network layer. More generally, the layer beneath the two reliably communicating end points might consist of a single physical link (as in the case of a link-level data transfer protocol) or a global internetwork (as in the case of a transport-level protocol). For our purposes, however, we can view this lower layer simply as an unreliable pointto-point channel. In this section, we will incrementally develop the sender and receiver sides of a reliable data transfer protocol, considering increasingly complex models of the underlying channel. For example, well consider what protocol mechanisms are Sending process Application layer PRINCIPLES OF RELIABLE DATA TRANSFER Receiver process Transport layer Reliable channel Reliable data transfer protocol (sending side) Reliable data transfer protocol (receiving side) rdt_rcv() Network layer Unreliable channel b. Service implementation Key: Data Packet Reliable data transfer: Service model and service implementation needed when the underlying channel can corrupt bits or lose entire packets. One assumption well adopt throughout our discussion here is that packets will be delivered in the order in which they were sent, with some packets possibly being lost; that is, the underlying channel will not reorder packets. Figure 3.8(b) illustrates the interfaces for our data transfer protocol. The sending side of the data transfer protocol will be invoked from above by a call to rdt_send(). It will pass the data to be delivered to the upper layer at the receiving side. (Here rdt stands for reliable data transfer protocol and _send indicates that the sending side of rdt is being called. The first step in developing any protocol is to choose a good name!) On the receiving side, rdt_rcv() will be called when a packet arrives from the receiving side of the channel. When the rdt protocol wants to deliver data to the upper layer, it will do so by calling deliver_data(). In the following we use the terminology packet rather than transport-layer segment. Because the theory developed in this section applies to computer networks in general and not just to the Internet transport layer, the generic term packet is perhaps more appropriate here"
Justify with an example how a common approach is for the TCP sender to increase cwnd by MSS bytes (MSS/cwnd) whenever a new acknowledgment arrives,"A common approach is for the TCP sender to increase cwnd by MSS bytes (MSS/cwnd) whenever a new acknowledgment arrives .For example, if MSS is 1,460 bytes and cwnd is 14,600 bytes, then 10 segments are being sent within an RTT","But when should this exponential growth end? Slow start provides several answers to this question. First, if there is a loss event (i.e., congestion) indicated by a timeout, the TCP sender sets the value of cwnd to 1 and begins the slow start process anew. It also sets the value of a second state variable, ssthresh (shorthand for slow start threshold) to cwnd/2half of the value of the congestion window value when congestion was detected. The second way in which slow start may end is directly tied to the value of ssthresh. Since ssthresh is half the value of cwnd when congestion was last detected, it might be a bit reckless to keep doubling cwnd when it reaches or surpasses the value of ssthresh. Thus, when the value of cwnd equals ssthresh, slow start ends and TCP transitions into congestion avoidance mode. As well see, TCP increases cwnd more cautiously when in congestionavoidance mode. The final way in which slow start can end is if three duplicate ACKs are detected, in which case TCP performs a fast retransmit (see Section 3.5.4) and enters the fast recovery state, as discussed below. TCPs behavior in slow start is summarized in the FSM description of TCP congestion control in Figure 3.51. The slow-start algorithm traces it roots to [Jacobson 1988]; an approach similar to slow start was also proposed independently in [Jain 1986]. Congestion Avoidance On entry to the congestion-avoidance state, the value of cwnd is approximately half its value when congestion was last encounteredcongestion could be just around the corner! Thus, rather than doubling the value of cwnd every RTT, TCP adopts a more conservative approach and increases the value of cwnd by just a single MSS every RTT [RFC 5681]. This can be accomplished in several ways. A common approach is for the TCP sender to increase cwnd by MSS bytes (MSS/cwnd) whenever a new acknowledgment arrives. For example, if MSS is 1,460 bytes and cwnd is 14,600 bytes, then 10 segments are being sent within an RTT. Each arriving ACK (assuming one ACK per segment) increases the congestion window size by 1/10 MSS, and thus, the value of the congestion window will have increased by one MSS after ACKs when all 10 segments have been received. But when should congestion avoidances linear increase (of 1 MSS per RTT) end? TCPs congestion-avoidance algorithm behaves the same when a timeout occurs"
Justify with an example how you may have noticed that it is possible for a destination address to match more than one entry,"You may have noticed that it is possible for a destination address to match more than one entry .For example, the first 24 bits of the address 11001000 00010111 00011000 10101010 match the second entry in the table, and the first 21 bits of the address match the third entry in the table","Lets now consider the simplest case that the output port to which an incoming packet is to be switched is based on the packets destination address. In the case of 32-bit IP addresses, a brute-force implementation of the forwarding table would have one entry for every possible destination address. Since there are more than 4 billion possible addresses, this option is totally out of the question. Line termination Data link processing (protocol, decapsulation) Lookup, fowarding, queuing Switch fabric As an example of how this issue of scale can be handled, lets suppose that our router has four links, numbered 0 through 3, and that packets are to be forwarded to the link interfaces as follows: Destination Address Range through 11001000 00010111 00011000 00000000 through 11001000 00010111 00011001 00000000 through Otherwise Clearly, for this example, it is not necessary to have 4 billion entries in the routers forwarding table. We could, for example, have the following forwarding table with just four entries: Prefix 11001000 00010111 00011000 Otherwise Link Interface 1 3 With this style of forwarding table, the router matches a prefix of the packets destination address with the entries in the table; if theres a match, the router forwards the packet to a link associated with the match. For example, suppose the packets destination address is 11001000 00010111 00010110 10100001; because the 21-bit prefix of this address matches the first entry in the table, the router forwards the packet to link interface 0. If a prefix doesnt match any of the first three entries, then the router forwards the packet to the default interface 3. Although this sounds simple enough, theres a very important subtlety here. You may have noticed that it is possible for a destination address to match more than one entry. For example, the first 24 bits of the address 11001000 00010111 00011000 10101010 match the second entry in the table, and the first 21 bits of the address match the third entry in the table. When there are multiple matches, the router uses the longest prefix matching rule; that is, it finds the longest matching entry in the table and forwards the packet to the link interface associated with the longest prefix match. Well see exactly why this longest prefix-matching rule is used when we study Internet addressing in more detail in Section 4.3. Given the existence of a forwarding table, lookup is conceptually simple hardware logic just searches through the forwarding table looking for the longest prefix match. But at Gigabit transmission rates, this lookup must be performed in nanoseconds (recall our earlier example of a 10 Gbps link and a 64-byte IP datagram). Thus, not only must lookup be performed in hardware, but techniques beyond a simple linear search through a large table are needed; surveys of fast lookup algorithms can be found in [Gupta 2001, Ruiz-Sanchez 2001]. Special attention must also be paid to memory access times, resulting in designs with embedded on-chip DRAM and faster SRAM (used as a DRAM cache) memories. In practice, Ternary Content Addressable Memories (TCAMs) are also often used for lookup [Yu 2004]"
"Justify with an example how some protocols can carry big datagrams, whereas other protocols can carry only little datagrams","Some protocols can carry big datagrams, whereas other protocols can carry only little datagrams .For example, Ethernet frames can carry up to 1,500 bytes of data, whereas frames for some wide-area links can carry no more than 576 bytes","If the datagram carries a TCP segment, then each (non-fragmented) datagram carries a total of 40 bytes of header (20 bytes of IP header plus 20 bytes of TCP header) along with the application-layer message. 4.3.2 IPv4 Datagram Fragmentation Well see in Chapter 6 that not all link-layer protocols can carry network-layer packets of the same size. Some protocols can carry big datagrams, whereas other protocols can carry only little datagrams. For example, Ethernet frames can carry up to 1,500 bytes of data, whereas frames for some wide-area links can carry no more than 576 bytes. The maximum amount of data that a link-layer frame can carry is called the maximum transmission unit (MTU). Because each IP datagram is encapsulated within the link-layer frame for transport from one router to the next router, the MTU of the link-layer protocol places a hard limit on the length of an IP datagram. Having a hard limit on the size of an IP datagram is not much of a problem. What is a problem is that each of the links along the route between sender and destination can use different link-layer protocols, and each of these protocols can have different MTUs. To understand the forwarding issue better, imagine that you are a router that interconnects several links, each running different link-layer protocols with different MTUs"
"Justify with an example how these addresses are typically written in so-called dotted-decimal notation, in which each byte of the address is written in its decimal form and is separated by a period (dot) from other bytes in the address","These addresses are typically written in so-called dotted-decimal notation, in which each byte of the address is written in its decimal form and is separated by a period (dot) from other bytes in the address .For example, consider the IP address 193.32.216.9","Before discussing IP addressing, however, well need to say a few words about how hosts and routers are connected into the Internet. A host typically has only a single link into the network; when IP in the host wants to send a datagram, it does so over this link. The boundary between the host and the physical link is called an interface. Now consider a router and its interfaces. Because a routers job is to receive a datagram on one link and forward the datagram on some other link, a router necessarily has two or more links to which it is connected. The boundary between the router and any one of its links is also called an interface. A router thus has multiple interfaces, one for each of its links. Because every host and router is capable of sending and receiving IP datagrams, IP requires each host and router interface to have its own IP address. Thus, an IP address is technically associated with an interface, rather than with the host or router containing that interface. Each IP address is 32 bits long (equivalently, 4 bytes), and there are thus a total of 232 (or approximately 4 billion) possible IP addresses. These addresses are typically written in so-called dotted-decimal notation, in which each byte of the address is written in its decimal form and is separated by a period (dot) from other bytes in the address. For example, consider the IP address 193.32.216.9. The 193 is the decimal equivalent of the first 8 bits of the address; the 32 is the decimal equivalent of the second 8 bits of the address, and so on. Thus, the address 193.32.216.9 in binary notation is Each interface on every host and router in the global Internet must have an IP address that is globally unique (except for interfaces behind NATs, as discussed in Section 4.3.4). These addresses cannot be chosen in a willy-nilly manner, however. A portion of an interfaces IP address will be determined by the subnet to which it is connected. one router (with three interfaces) is used to interconnect seven hosts. Take a close look at the IP addresses assigned to the host and router interfaces, as there are several things to notice. The three hosts in the upper-left portion of Figure 4.18, and the router interface to which they are connected, all have an IP address of the form 223.1.1.xxx. That is, they all have the same leftmost 24 bits in their IP address. These four interfaces are also interconnected to each other by a network that contains no routers. This network could be interconnected by an Ethernet LAN, in which case the interfaces would be interconnected by an Ethernet switch (as well discuss in the internals of such networks in Chapters 6 and 7"
"Justify with an example how) Firewalls inspect the datagram and segment header fields, denying suspicious datagrams entry into the internal network",") Firewalls inspect the datagram and segment header fields, denying suspicious datagrams entry into the internal network .For example, a firewall may be configured to block all ICMP echo request packets (see Section 5.6), thereby preventing an attacker from doing a traditional port scan across your IP address range","FOCUS ON SECURITY INSPECTING DATAGRAMS: FIREWALLS AND INTRUSION DETECTION SYSTEMS Suppose you are assigned the task of administering a home, departmental, university, or corporate network. Attackers, knowing the IP address range of your network, can easily send IP datagrams to addresses in your range. These datagrams can do all kinds of devious things, including mapping your network with ping sweeps and port scans, crashing vulnerable hosts with malformed packets, scanning for open TCP/UDP ports on servers in your network, and infecting hosts by including malware in the packets. As the network administrator, what are you going to do about all those bad guys out there, each capable of sending malicious packets into your network? Two popular defense mechanisms to malicious packet attacks are firewalls and intrusion detection systems (IDSs). As a network administrator, you may first try installing a firewall between your network and the Internet. (Most access routers today have firewall capability.) Firewalls inspect the datagram and segment header fields, denying suspicious datagrams entry into the internal network. For example, a firewall may be configured to block all ICMP echo request packets (see Section 5.6), thereby preventing an attacker from doing a traditional port scan across your IP address range. Firewalls can also block packets based on source and destination IP addresses and port numbers. Additionally, firewalls can be configured to track TCP connections, granting entry only to datagrams that belong to approved connections. Additional protection can be provided with an IDS. An IDS, typically situated at the network boundary, performs deep packet inspection, examining not only header fields but also the payloads in the datagram (including application-layer data). An IDS has a database of packet signatures that are known to be part of attacks. This database is automatically updated as new attacks are discovered. As packets pass through the IDS, the IDS attempts to match header fields and payloads to the signatures in its signature database. If such a match is found, an alert is created. An intrusion prevention system (IPS) is similar to an IDS, except that it actually blocks packets in addition to creating alerts. In Can firewalls and IDSs fully shield your network from all attacks? The answer is clearly no, as attackers continually find new attacks for which signatures are not yet available"
Justify with an example how flow table entries may also have wildcards,"Flow table entries may also have wildcards .For example, an IP address of 128.119.*.* in a flow table will match the corresponding address field of any datagram that has 128.119 as the first 16 bits of its address","The ingress port refers to the input port at the packet switch on which a packet is received. The packets IP source address, IP destination address, IP protocol field, and IP type of service fields were discussed earlier in Section 4.3.1. The transport-layer source and destination port number fields can also be matched. Flow table entries may also have wildcards. For example, an IP address of 128.119.*.* in a flow table will match the corresponding address field of any datagram that has 128.119 as the first 16 bits of its address. Each flow table entry also has an associated priority. If a packet matches multiple flow table entries, the selected match and corresponding action will be that of the highest priority entry with which the packet matches. Lastly, we observe that not all fields in an IP header can be matched. For example OpenFlow does not allow matching on the basis of TTL field or datagram length field. Why are some fields allowed for matching, while others are not? Undoubtedly, the answer has to do with the tradeoff between functionality and complexity. The art in choosing an abstraction is to provide for enough functionality to accomplish a task (in this case to implement, configure, and manage a wide range of networklayer functions that had previously been implemented through an assortment of TCP/UDP Src Port TCP/UDP Dst Port network-layer devices), without over-burdening the abstraction with so much detail and generality that it becomes bloated and unusable. Butler Lampson has famously noted [Lampson 1983]: Do one thing at a time, and do it well. An interface should capture the minimum essentials of an abstraction. Dont generalize; generalizations are generally wrong"
"Justify with an example how lastly, we observe that not all fields in an IP header can be matched","Lastly, we observe that not all fields in an IP header can be matched .For example OpenFlow does not allow matching on the basis of TTL field or datagram length field","Flow table entries may also have wildcards. For example, an IP address of 128.119.*.* in a flow table will match the corresponding address field of any datagram that has 128.119 as the first 16 bits of its address. Each flow table entry also has an associated priority. If a packet matches multiple flow table entries, the selected match and corresponding action will be that of the highest priority entry with which the packet matches. Lastly, we observe that not all fields in an IP header can be matched. For example OpenFlow does not allow matching on the basis of TTL field or datagram length field. Why are some fields allowed for matching, while others are not? Undoubtedly, the answer has to do with the tradeoff between functionality and complexity. The art in choosing an abstraction is to provide for enough functionality to accomplish a task (in this case to implement, configure, and manage a wide range of networklayer functions that had previously been implemented through an assortment of TCP/UDP Src Port TCP/UDP Dst Port network-layer devices), without over-burdening the abstraction with so much detail and generality that it becomes bloated and unusable. Butler Lampson has famously noted [Lampson 1983]: Do one thing at a time, and do it well. An interface should capture the minimum essentials of an abstraction. Dont generalize; generalizations are generally wrong. Given OpenFlows success, one can surmise that its designers indeed chose their abstraction well. Additional details of OpenFlow matching can be found in [OpenFlow 2009, ONF 2016]"
"Justify with an example how in particular, in order to reap the benefits of IPsec, we dont need to replace the protocol stacks in all the routers and hosts in the Internet","In particular, in order to reap the benefits of IPsec, we dont need to replace the protocol stacks in all the routers and hosts in the Internet .For example, using the transport mode (one of two IPsec modes), if two hosts want to securely communicate, IPsec needs to be available only in those two hosts","b. Using your answer to part (a), provide the forwarding tables (using longest prefix matching) for each of the three routers. IPsec has been designed to be backward compatible with IPv4 and IPv6. In particular, in order to reap the benefits of IPsec, we dont need to replace the protocol stacks in all the routers and hosts in the Internet. For example, using the transport mode (one of two IPsec modes), if two hosts want to securely communicate, IPsec needs to be available only in those two hosts. Discuss the services provided by an IPsec session. Consider sending a 1,600-byte datagram into a link that has an MTU of 500 bytes. Suppose the original datagram is stamped with the identification number 291. How many fragments are generated? What are the values in the various fields in the IP datagram(s) generated related to fragmentation? Suppose datagrams are limited to 1,500 bytes (including header) between source Host A and destination Host B. Assuming a 20-byte IP header, how many datagrams would be required to send an MP3 consisting of 5 million bytes? Explain how you computed your answer"
"Justify with an example how after receiving the updates, each node recomputes its own distance vector","After receiving the updates, each node recomputes its own distance vector .For example, node x computes Dx(x) = 0 Dx(y) = min5 c(x,y) + Dy(y), c(x,z) + Dz(y) 6 = min5 2 + 0, 7 + 16 = 2 Dx(z) = min5 c(x,y) + Dy(z), c(x,z) + Dz(z) 6 = min5 2 + 1, 7 + 06 = 3 The second column therefore displays, for each node, the nodes new distance vector along with distance vectors just received from its neighbors","The leftmost column of the figure displays three initial routing tables for each of the three nodes. For example, the table in the upper-left corner is node xs initial routing table. Within a specific routing table, each row is a distance vector specifically, each nodes routing table includes its own distance vector and that of each of its neighbors. Thus, the first row in node xs initial routing table is Dx = [Dx(x), Dx(y), Dx(z)] = [0, 2, 7]. The second and third rows in this table are the most recently received distance vectors from nodes y and z, respectively. Because at initialization node x has not received anything from node y or z, the entries in the second and third rows are initialized to infinity. After initialization, each node sends its distance vector to each of its two neighbors. This is illustrated in Figure 5.6 by the arrows from the first column of tables to the second column of tables. For example, node x sends its distance vector Dx = [0, 2, 7] to both nodes y and z. After receiving the updates, each node recomputes its own distance vector. For example, node x computes Dx(x) = 0 Dx(y) = min5 c(x,y) + Dy(y), c(x,z) + Dz(y) 6 = min5 2 + 0, 7 + 16 = 2 Dx(z) = min5 c(x,y) + Dy(z), c(x,z) + Dz(z) 6 = min5 2 + 1, 7 + 06 = 3 The second column therefore displays, for each node, the nodes new distance vector along with distance vectors just received from its neighbors. Note, for example, that y x z ` ` ` ` ` ` x y z 2 0 1 cost to x y z from x y z cost to x y z from cost to x y z x y z 2 0 1 ` ` ` ` ` ` x y z 2 0 1 cost to x y z from x y z cost to x y z from cost to x y z x y z 2 0 1 ` ` ` ` ` ` x y z 2 0 1 cost to x y z from x y z cost to x y z from cost to x y z x y z 2 0 1 Distance-vector (DV) algorithm in operation node xs estimate for the least cost to node z, Dx(z), has changed from 7 to 3. Also note that for node x, neighboring node y achieves the minimum in line 14 of the DV algorithm; thus at this stage of the algorithm, we have at node x that v*(y) = y and v*(z) = y. After the nodes recompute their distance vectors, they again send their updated distance vectors to their neighbors (if there has been a change). This is illustrated in tables. Note that only nodes x and z send updates: node ys distance vector didnt change so node y doesnt send an update. After receiving the updates, the nodes then recompute their distance vectors and update their routing tables, which are shown in the third column"
"Justify with an example how these applications represent the brains of the SDN control plane, using the APIs provided by the SDN controller to specify and control the data plane in the network devices","These applications represent the brains of the SDN control plane, using the APIs provided by the SDN controller to specify and control the data plane in the network devices .For example, a routing network-control application might determine the end-end paths between sources and destinations (e.g., by executing Dijkstras algorithm using the node-state and link-state information maintained by the SDN controller)","Network control functions: external to data-plane switches. Given that the S in SDN is for software, its perhaps not surprising that the SDN control plane is implemented in software. Unlike traditional routers, however, this software executes on servers that are both distinct and remote from the networks switches. As shown in Figure 5.14, the control plane itself consists of two componentsan SDN controller (or network operating system [Gude 2008]) and a set of network-control applications. The controller maintains accurate network state information (e.g., the state of remote links, switches, and hosts); provides this information to the networkcontrol applications running in the control plane; and provides the means through which these applications can monitor, program, and control the underlying network devices. Although the controller in Figure 5.14 is shown as a single central server, in practice the controller is only logically centralized; it is typically implemented on several servers that provide coordinated, scalable performance and high availability. A programmable network. The network is programmable through the networkcontrol applications running in the control plane. These applications represent the brains of the SDN control plane, using the APIs provided by the SDN controller to specify and control the data plane in the network devices. For example, a routing network-control application might determine the end-end paths between sources and destinations (e.g., by executing Dijkstras algorithm using the node-state and link-state information maintained by the SDN controller). Another network application might perform access control, i.e., determine which packets are to be blocked at a switch, as in our third example in Section 4.4.3"
Justify with an example how the most typical use of ICMP is for error reporting,"The most typical use of ICMP is for error reporting .For example, when running an HTTP session, you may have encountered an error message such as Destination network unreachable","Southbound abstractions and protocols. The southbound abstractions mask the heterogeneity of the underlying hosts, links, switches, and protocols, allowing the distributed core to be both device and protocol agnostic. Because of this abstraction, the southbound interface below the distributed core is logically higher than in our canonical controller in Figure 5.14 or the ODL controller in Figure 5.17. 5.6 ICMP: The Internet Control Message Protocol The Internet Control Message Protocol (ICMP), specified in [RFC 792], is used by hosts and routers to communicate network-layer information to each other. The most typical use of ICMP is for error reporting. For example, when running an HTTP session, you may have encountered an error message such as Destination network unreachable. This message had its origins in ICMP. At some point, an IP router was unable to find a path to the host specified in your HTTP request. That router created and sent an ICMP message to your host indicating the error. ICMP is often considered part of IP, but architecturally it lies just above IP, as ICMP messages are carried inside IP datagrams. That is, ICMP messages are carried as IP payload, just as TCP or UDP segments are carried as IP payload. Similarly, when a host receives an IP datagram with ICMP specified as the upper-layer protocol (an upper-layer protocol number of 1), it demultiplexes the datagrams contents to ICMP, just as it would demultiplex a datagrams content to TCP or UDP"
"Justify with an example how perhaps more importantly, it also may be desirable to limit LAN broadcast traffic for security/privacy reasons","Perhaps more importantly, it also may be desirable to limit LAN broadcast traffic for security/privacy reasons .For example, if one group contains the companys executive management team and another group contains disgruntled employees running Wireshark packet sniffers, the network manager may well prefer that the executives traffic never even reaches employee hosts","For more discussion of the pros and cons of switched versus routed networks, as well as a discussion of how switched LAN technology can be extended to accommodate two orders of magnitude more hosts than todays Ethernets, see [Meyers 2004; Kim 2008]. 6.4.4 Virtual Local Area Networks (VLANs) In our earlier discussion of Figure 6.15, we noted that modern institutional LANs are often configured hierarchically, with each workgroup (department) having its own switched LAN connected to the switched LANs of other groups via a switch hierarchy. While such a configuration works well in an ideal world, the real world is often far from ideal. Three drawbacks can be identified in the configuration in Lack of traffic isolation. Although the hierarchy localizes group traffic to within a single switch, broadcast traffic (e.g., frames carrying ARP and DHCP messages or frames whose destination has not yet been learned by a self-learning switch) must still traverse the entire institutional network. Limiting the scope of such broadcast traffic would improve LAN performance. Perhaps more importantly, it also may be desirable to limit LAN broadcast traffic for security/privacy reasons. For example, if one group contains the companys executive management team and another group contains disgruntled employees running Wireshark packet sniffers, the network manager may well prefer that the executives traffic never even reaches employee hosts. This type of isolation could be provided by replacing the center switch in Figure 6.15 with a router. Well see shortly that this isolation also can be achieved via a switched (layer 2) solution. Inefficient use of switches. If instead of three groups, the institution had 10 groups, then 10 first-level switches would be required. If each group were small, say less than 10 people, then a single 96-port switch would likely be large enough to accommodate everyone, but this single switch would not provide traffic isolation"
Justify with an example how this vast knowledge base will have the potential of leveling the playing field for students all over the world,"This vast knowledge base will have the potential of leveling the playing field for students all over the world .For example, motivated students in any country will be able to access the best-class Web sites, multimedia lectures, and teaching materials","I often learn more from these students than they learn from me. Educating and motivating the underachievers present a major challenge. What impacts do you foresee technology having on learning in the future? Eventually, almost all human knowledge will be accessible through the Internet, which will be the most powerful tool for learning. This vast knowledge base will have the potential of leveling the playing field for students all over the world. For example, motivated students in any country will be able to access the best-class Web sites, multimedia lectures, and teaching materials. Already, it was said that the IEEE and ACM digital libraries have accelerated the development of computer science researchers in China. In time, the Internet will transcend all geographic barriers to learning. CHAPTER Wireless and Mobile Networks In the telephony world, the past 20 years have arguably been the golden years of cellular telephony. The number of worldwide mobile cellular subscribers increased from 34 million in 1993 to nearly 7.0 billion subscribers by 2014, with the number of cellular subscribers now surpassing the number of wired telephone lines. There are now a larger number of mobile phone subscriptions than there are people on our planet. The many advantages of cell phones are evident to allanywhere, anytime, untethered access to the global telephone network via a highly portable lightweight device. More recently, laptops, smartphones, and tablets are wirelessly connected to the Internet via a cellular or WiFi network. And increasingly, devices such as gaming consoles, thermostats, home security systems, home appliances, watches, eye glasses, cars, traffic control systems and more are being wirelessly connected to the Internet"
Justify with an example how radio sources transmitting in the same frequency band will interfere with each other,"Radio sources transmitting in the same frequency band will interfere with each other .For example, 2.4 GHz wireless phones and 802.11b wireless LANs transmit in the same frequency band","Indeed, we can find a number of important differences between a wired link and a wireless link: Decreasing signal strength. Electromagnetic radiation attenuates as it passes through matter (e.g., a radio signal passing through a wall). Even in free space, the signal will disperse, resulting in decreased signal strength (sometimes referred to as path loss) as the distance between sender and receiver increases. Interference from other sources. Radio sources transmitting in the same frequency band will interfere with each other. For example, 2.4 GHz wireless phones and 802.11b wireless LANs transmit in the same frequency band. Thus, the 802.11b wireless LAN user talking on a 2.4 GHz wireless phone can expect that neither the network nor the phone will perform particularly well. In addition to interference from transmitting sources, electromagnetic noise within the environment (e.g., a nearby motor, a microwave) can result in interference. Multipath propagation. Multipath propagation occurs when portions of the electromagnetic wave reflect off objects and the ground, taking paths of different lengths between a sender and receiver. This results in the blurring of the received signal at the receiver. Moving objects between the sender and receiver can cause multipath propagation to change over time"
Justify with an example how a WiFi jungle is any physical location where a wireless station receives a sufficiently strong signal from two or more APs,"A WiFi jungle is any physical location where a wireless station receives a sufficiently strong signal from two or more APs .For example, in many cafs in New York City, a wireless station can pick up a signal from numerous nearby APs","When a network administrator installs an AP, the administrator assigns a oneor two-word Service Set Identifier (SSID) to the access point. (When you choose Wi-Fi under Setting on your iPhone, for example, a list is displayed showing the SSID of each AP in range.) The administrator must also assign a channel number to the AP. To understand channel numbers, recall that 802.11 operates in the frequency range of 2.4 GHz to 2.4835 GHz. Within this 85 MHz band, 802.11 defines 11 partially overlapping channels. Any two channels are non-overlapping if and only if they are separated by four or more channels. In particular, the set of channels 1, 6, and 11 is the only set of three non-overlapping channels. This means that an administrator could create a wireless LAN with an aggregate maximum transmission rate of 33 Mbps by installing three 802.11b APs at the same physical location, assigning channels 1, 6, and 11 to the APs, and interconnecting each of the APs with a switch. Now that we have a basic understanding of 802.11 channels, lets describe an interesting (and not completely uncommon) situationthat of a WiFi jungle. A WiFi jungle is any physical location where a wireless station receives a sufficiently strong signal from two or more APs. For example, in many cafs in New York City, a wireless station can pick up a signal from numerous nearby APs. One of the APs might be managed by the caf, while the other APs might be in residential apartments near the caf. Each of these APs would likely be located in a different IP subnet and would have been independently assigned a channel. Now suppose you enter such a WiFi jungle with your phone, tablet, or laptop, seeking wireless Internet access and a blueberry muffin. Suppose there are five APs in the WiFi jungle. To gain Internet access, your wireless device needs to join exactly one of the subnets and hence needs to associate with exactly one of the APs"
"Justify with an example how while we may tend to think that bigger and faster is better, not all network applications need high bandwidth and the consequent higher costs (both economic and power costs)","While we may tend to think that bigger and faster is better, not all network applications need high bandwidth and the consequent higher costs (both economic and power costs) .For example, home temperature and light sensors, security devices, and wallmounted switches are all very simple, low-power, low-duty-cycle, low-cost devices","For more information about WPANs, the interested reader should consult the Bluetooth references [Held 2001, Bisdikian 2001] or the official IEEE 802.15 Web site [IEEE 802.15 2012]. Zigbee A second personal area network standardized by the IEEE is the 802.15.4 standard [IEEE 802.15 2012] known as Zigbee. While Bluetooth networks provide a cable replacement data rate of over a Megabit per second, Zigbee is targeted at lowerpowered, lower-data-rate, lower-duty-cycle applications than Bluetooth. While we may tend to think that bigger and faster is better, not all network applications need high bandwidth and the consequent higher costs (both economic and power costs). For example, home temperature and light sensors, security devices, and wallmounted switches are all very simple, low-power, low-duty-cycle, low-cost devices. Zigbee is thus well-suited for these devices. Zigbee defines channel rates of 20, 40, 100, and 250 Kbps, depending on the channel frequency"
Justify with an example how security considerations are prominent throughout the mobile IP standard,"Security considerations are prominent throughout the mobile IP standard .For example, authentication of a mobile node is clearly needed to ensure that a malicious user does not register a bogus care-of address with a home agent, which could cause all datagrams addressed to an IP address to be redirected to the malicious user","Security considerations are prominent throughout the mobile IP standard. For example, authentication of a mobile node is clearly needed to ensure that a malicious user does not register a bogus care-of address with a home agent, which could cause all datagrams addressed to an IP address to be redirected to the malicious user. Mobile IP achieves security using many of the mechanisms that we will examine in Chapter 8, so we will not address security considerations in our discussion below. Agent Discovery A mobile IP node arriving to a new network, whether attaching to a foreign network or returning to its home network, must learn the identity of the corresponding foreign or home agent. Indeed it is the discovery of a new foreign agent, with a new network address, that allows the network layer in a mobile node to learn that it has moved into a new foreign network. This process is known as agent discovery. Agent discovery can be accomplished in one of two ways: via agent advertisement or via agent solicitation"
"Justify with an example how as a result, applications that operate over wireless links, particularly over cellular wireless links, must treat bandwidth as a scarce commodity","As a result, applications that operate over wireless links, particularly over cellular wireless links, must treat bandwidth as a scarce commodity .For example, a Web server serving content to a Web browser executing on a 4G phone will likely not be able to provide the same image-rich content that it gives to a browser operating over a wired connection","In-depth surveys of TCP challenges and solutions in wireless networks can be found in [Hanabali 2005; Leung 2006]. We encourage you to consult the references for details of this ongoing area of research. Having considered transport-layer protocols, let us next consider the effect of wireless and mobility on application-layer protocols. Here, an important consideration is that wireless links often have relatively low bandwidths, as we saw in Figure 7.2. As a result, applications that operate over wireless links, particularly over cellular wireless links, must treat bandwidth as a scarce commodity. For example, a Web server serving content to a Web browser executing on a 4G phone will likely not be able to provide the same image-rich content that it gives to a browser operating over a wired connection. Although wireless links do provide challenges at the application layer, the mobility they enable also makes possible a rich set of location-aware and context-aware applications [Chen 2000; Baldauf 2007]. More generally, wireless and mobile networks will play a key role in realizing the ubiquitous computing environments of the future [Weiser 1991]. Its fair to say that weve only seen the tip of the iceberg when it comes to the impact of wireless and mobile networks on networked applications and their protocols! 7.9 Summary Wireless and mobile networks have revolutionized telephony and are having an increasingly profound impact in the world of computer networks as well. With their anytime, anywhere, untethered access into the global network infrastructure, they are not only making network access more ubiquitous, they are also enabling an exciting new set of location-dependent services. Given the growing importance of wireless and mobile networks, this chapter has focused on the principles, common link technologies, and network architectures for supporting wireless and mobile communication"
"Justify with an example how if a messages destination is not an immediate neighbor, then the message must be relayed","If a messages destination is not an immediate neighbor, then the message must be relayed .For example, if A wants to send to D, a message from A must first be sent to B, which then sends the message to C, which then sends the message to D","P8. Consider the scenario shown in Figure 7.34, in which there are four wireless nodes, A, B, C, and D. The radio coverage of the four nodes is shown via the shaded ovals; all nodes share the same frequency. When A transmits, it A C Scenario for problem P8 can only be heard/received by B; when B transmits, both A and C can hear/ receive from B; when C transmits, both B and D can hear/receive from C; when D transmits, only C can hear/receive from D. Suppose now that each node has an infinite supply of messages that it wants to send to each of the other nodes. If a messages destination is not an immediate neighbor, then the message must be relayed. For example, if A wants to send to D, a message from A must first be sent to B, which then sends the message to C, which then sends the message to D. Time is slotted, with a message transmission time taking exactly one time slot, e.g., as in slotted Aloha. During a slot, a node can do one of the following: (i) send a message, (ii) receive a message (if exactly one message is being sent to it), (iii) remain silent. As always, if a node hears two or more simultaneous transmissions, a collision occurs and none of the transmitted messages are received successfully. You can assume here that there are no bit-level errors, and thus if exactly one message is sent, it will be received correctly by those within the transmission radius of the sender. a. Suppose now that an omniscient controller (i.e., a controller that knows the state of every node in the network) can command each node to do whatever it (the omniscient controller) wishes, i.e., to send a message, to receive a message, or to remain silent. Given this omniscient controller, what is the maximum rate at which a data message can be transferred from C to A, given that there are no other messages between any other source/destination pairs? b. Suppose now that A sends messages to B, and D sends messages to C"
"Justify with an example how if the intruder has some knowledge about the possible contents of the message, then it is even easier to break the code","If the intruder has some knowledge about the possible contents of the message, then it is even easier to break the code .For example, if Trudy the intruder is Bobs wife and suspects Bob of having an affair with Alice, then she might suspect that the names bob and alice appear in the text","An improvement on the Caesar cipher is the monoalphabetic cipher, which also substitutes one letter of the alphabet with another letter of the alphabet. However, rather than substituting according to a regular pattern (for example, substitution with an offset of k for all letters), any letter can be substituted for any other letter, as long as each letter has a unique substitute letter, and vice versa. The substitution rule in The plaintext message bob, i love you. Alice becomes nkn, s gktc wky. Mgsbc. Thus, as in the case of the Caesar cipher, this looks like gibberish. A monoalphabetic cipher would also appear to be better than the Caesar cipher in that there are 26! (on the order of 1026) possible pairings of letters rather than 25 possible pairings. A brute-force approach of trying all 1026 possible pairings Plaintext letter: Ciphertext letter: a b c d e f g h i j k l m n o p q r s t u v w x y z m n b v c x z a s d f g h j k l p o i u y t r e w q 8.2 PRINCIPLES OF CRYPTOGRAPHY would require far too much work to be a feasible way of breaking the encryption algorithm and decoding the message. However, by statistical analysis of the plaintext language, for example, knowing that the letters e and t are the most frequently occurring letters in typical English text (accounting for 13 percent and 9 percent of letter occurrences), and knowing that particular two-and three-letter occurrences of letters appear quite often together (for example, in, it, the, ion, ing, and so forth) make it relatively easy to break this code. If the intruder has some knowledge about the possible contents of the message, then it is even easier to break the code. For example, if Trudy the intruder is Bobs wife and suspects Bob of having an affair with Alice, then she might suspect that the names bob and alice appear in the text. If Trudy knew for certain that those two names appeared in the ciphertext and had a copy of the example ciphertext message above, then she could immediately determine seven of the 26 letter pairings, requiring 109 fewer possibilities to be checked by a brute-force method. Indeed, if Trudy suspected Bob of having an affair, she might well expect to find some other choice words in the message as well. When considering how easy it might be for Trudy to break Bob and Alices encryption scheme, one can distinguish three different scenarios, depending on what information the intruder has"
Justify with an example how each of these algorithms also uses a string of bits for a key,"Each of these algorithms also uses a string of bits for a key .For example, DES uses 64-bit blocks with a 56-bit key","64-bit input Loop for n rounds 8 bits 8 bits 8 bits 8 bits T4 T8 8 bits 8 bits 8 bits 8 bits 64-bit output Today there are a number of popular block ciphers, including DES (standing for Data Encryption Standard), 3DES, and AES (standing for Advanced Encryption Standard). Each of these standards uses functions, rather than predetermined tables, along the lines of Figure 8.5 (albeit more complicated and specific to each cipher). Each of these algorithms also uses a string of bits for a key. For example, DES uses 64-bit blocks with a 56-bit key. AES uses 128-bit blocks and can operate with keys that are 128, 192, and 256 bits long. An algorithms key determines the specific mini-table mappings and permutations within the algorithms internals. The bruteforce attack for each of these ciphers is to cycle through all the keys, applying the decryption algorithm with each key. Observe that with a key length of n, there are 2n possible keys. NIST [NIST 2001] estimates that a machine that could crack 56-bit DES in one second (that is, try all 256 keys in one second) would take approximately 149 trillion years to crack a 128-bit AES key. Cipher-Block Chaining In computer networking applications, we typically need to encrypt long messages (or long streams of data). If we apply a block cipher as described by simply chopping up the message into k-bit blocks and independently encrypting each block, a subtle but important problem occurs. To see this, observe that two or more of the cleartext blocks can be identical. For example, the cleartext in two or more blocks could be HTTP/1.1. For these identical blocks, a block cipher would, of course, produce the same ciphertext. An attacker could potentially guess the cleartext when it sees identical ciphertext blocks and may even be able to decrypt the entire message by identifying identical ciphtertext blocks and using knowledge about the underlying protocol structure [Kaufman 1995]"
Justify with an example how there still remains an important issue How do we distribute the shared authentication key to the communicating entities?,"There still remains an important issue How do we distribute the shared authentication key to the communicating entities? .For example, in the link-state routing algorithm, we would somehow need to distribute the secret authentication key to each of the routers in the autonomous system. (Note that the routers can all use the same authentication key.) A network administrator could actually accomplish this by physically visiting each of the routers","As you might expect, a number of different standards for MACs have been proposed over the years. The most popular standard today is HMAC, which can be used either with MD5 or SHA-1. HMAC actually runs data and the authentication key through the hash function twice [Kaufman 1995; RFC 2104]. There still remains an important issue. How do we distribute the shared authentication key to the communicating entities? For example, in the link-state routing algorithm, we would somehow need to distribute the secret authentication key to each of the routers in the autonomous system. (Note that the routers can all use the same authentication key.) A network administrator could actually accomplish this by physically visiting each of the routers. Or, if the network administrator is a lazy guy, and if each router has its own public key, the network administrator could distribute the authentication key to any one of the routers by encrypting it with the routers public key and then sending the encrypted key over the network to the router. 8.3.3 Digital Signatures Think of the number of the times youve signed your name to a piece of paper during the last week. You sign checks, credit card receipts, legal documents, and letters. Your signature attests to the fact that you (as opposed to someone else) have acknowledged and/or agreed with the documents contents. In a digital world, one often wants to indicate the owner or creator of a document, or to signify ones agreement with a documents content. A digital signature is a cryptographic technique for achieving these goals in a digital world"
Justify with an example how the distribution of these public keys is a nontrivial problem,"The distribution of these public keys is a nontrivial problem .For example, Trudy might masquerade as Bob and give Alice her own public key while saying that it is Bobs public key, H(.) KA (H(m)) + m to Internet + KB (.) Alice uses symmetric key cyptography, public key cryptography, a hash function, and a digital signature to provide secrecy, sender authentication, and message integrity enabling her to receive the message meant for Bob","When Bob receives the package, he first applies his side of Figure 8.19 and then his KA (.) m KA (H(m)) + m Alice sends e-mail message m KA+ (.) Internet Compare Bob receives e-mail message m Using hash functions and digital signatures to provide sender authentication and message integrity side of Figure 8.20. It should be clear that this design achieves the goal of providing confidentiality, sender authentication, and message integrity. Note that, in this scheme, Alice uses public key cryptography twice: once with her own private key and once with Bobs public key. Similarly, Bob also uses public key cryptography twiceonce with his private key and once with Alices public key. The secure e-mail design outlined in Figure 8.21 probably provides satisfactory security for most e-mail users for most occasions. But there is still one important issue that remains to be addressed. The design in Figure 8.21 requires Alice to obtain Bobs public key, and requires Bob to obtain Alices public key. The distribution of these public keys is a nontrivial problem. For example, Trudy might masquerade as Bob and give Alice her own public key while saying that it is Bobs public key, H(.) KA (H(m)) + m to Internet + KB (.) Alice uses symmetric key cyptography, public key cryptography, a hash function, and a digital signature to provide secrecy, sender authentication, and message integrity enabling her to receive the message meant for Bob. As we learned in Section 8.3, a popular approach for securely distributing public keys is to certify the public keys using a CA. 8.5.2 PGP Written by Phil Zimmermann in 1991, Pretty Good Privacy (PGP) is a nice example of an e-mail encryption scheme [PGPI 2016]. Versions of PGP are available in the public domain; for example, you can find the PGP software for your favorite platform as well as lots of interesting reading at the International PGP Home Page [PGPI 2016]. The PGP design is, in essence, the same as the design shown in Figure 8.21"
"Justify with an example how in addition to confidentiality, a network-layer security protocol could potentially provide other security services","In addition to confidentiality, a network-layer security protocol could potentially provide other security services .For example, it could provide source authentication, so that the receiving entity can verify the source of the secured datagram","Before getting into the specifics of IPsec, lets step back and consider what it means to provide confidentiality at the network layer. With network-layer confidentiality between a pair of network entities (for example, between two routers, between two hosts, or between a router and a host), the sending entity encrypts the payloads of all the datagrams it sends to the receiving entity. The encrypted payload could be a TCP segment, a UDP segment, an ICMP message, and so on. If such a network-layer service were in place, all data sent from one entity to the other including e-mail, Web pages, TCP handshake messages, and management messages (such as ICMP and SNMP)would be hidden from any third party that might be sniffing the network. For this reason, network-layer security is said to provide blanket coverage. In addition to confidentiality, a network-layer security protocol could potentially provide other security services. For example, it could provide source authentication, so that the receiving entity can verify the source of the secured datagram. A networklayer security protocol could provide data integrity, so that the receiving entity can check for any tampering of the datagram that may have occurred while the datagram was in transit. A network-layer security service could also provide replay-attack prevention, meaning that Bob could detect any duplicate datagrams that an attacker might insert. We will soon see that IPsec indeed provides mechanisms for all these security services, that is, for confidentiality, source authentication, data integrity, and replay-attack prevention. 8.7.1 IPsec and Virtual Private Networks (VPNs) An institution that extends over multiple geographical regions often desires its own IP network, so that its hosts and servers can send data to each other in a secure and confidential manner. To achieve this goal, the institution could actually deploy a stand-alone physical networkincluding routers, links, and a DNS infrastructure that is completely separate from the public Internet. Such a disjoint network, dedicated to a particular institution, is called a private network. Not surprisingly, a private network can be very costly, as the institution needs to purchase, install, and maintain its own physical network infrastructure"
"Justify with an example how5 lists a number of possible polices an organization may have, and how they would be addressed with a packet filter","5 lists a number of possible polices an organization may have, and how they would be addressed with a packet filter .For example, if the organization doesnt want any incoming TCP connections except those for its public Web server, it can block all incoming TCP SYN segments except TCP SYN segments with destination port 80 and the destination IP address corresponding to the Web server","Drop all outgoing ICMP TTL expired traffic. Policies and corresponding filtering rules for an organizations network 130.207/16 with Web server at 130.207.244.203 TCP flag bits: SYN, ACK, and so on ICMP message type Different rules for datagrams leaving and entering the network Different rules for the different router interfaces A network administrator configures the firewall based on the policy of the organization. The policy may take user productivity and bandwidth usage into account as well as the security concerns of an organization. Table 8.5 lists a number of possible polices an organization may have, and how they would be addressed with a packet filter. For example, if the organization doesnt want any incoming TCP connections except those for its public Web server, it can block all incoming TCP SYN segments except TCP SYN segments with destination port 80 and the destination IP address corresponding to the Web server. If the organization doesnt want its users to monopolize access bandwidth with Internet radio applications, it can block all not-critical UDP traffic (since Internet radio is often sent over UDP). If the organization doesnt want its internal network to be mapped (tracerouted) by an outsider, it can block all ICMP TTL expired messages leaving the organizations network. A filtering policy can be based on a combination of addresses and port numbers"
Justify with an example how a filtering policy can be based on a combination of addresses and port numbers,"A filtering policy can be based on a combination of addresses and port numbers .For example, a filtering router could forward all Telnet datagrams (those with a port number of 23) except those going to and coming from a list of specific IP addresses","A filtering policy can be based on a combination of addresses and port numbers. For example, a filtering router could forward all Telnet datagrams (those with a port number of 23) except those going to and coming from a list of specific IP addresses. This policy permits Telnet connections to and from hosts on the allowed list. Unfortunately, basing the policy on external addresses provides no protection against datagrams that have had their source addresses spoofed"
"Justify with an example how we can also use compression to create multiple versions of the same video, each at a different quality level","We can also use compression to create multiple versions of the same video, each at a different quality level .For example, we can use compression to create, say, three versions of the same video, at rates of 300 kbps, 1 Mbps, and 3 Mbps","Spatial redundancy is the redundancy within a given image. Intuitively, an image that consists of mostly white space has a high degree of redundancy and can be efficiently compressed without significantly sacrificing image quality. Temporal redundancy reflects repetition from image to subsequent image. If, for example, an image and the subsequent image are exactly the same, there is no reason to re-encode the subsequent image; it is instead more efficient simply to indicate during encoding that the subsequent image is exactly the same. Todays off-the-shelf compression algorithms can compress a video to essentially any bit rate desired. Of course, the higher the bit rate, the better the image quality and the better the overall user viewing experience. We can also use compression to create multiple versions of the same video, each at a different quality level. For example, we can use compression to create, say, three versions of the same video, at rates of 300 kbps, 1 Mbps, and 3 Mbps. Users can then decide which version they want to watch as a function of their current available bandwidth. Users with high-speed Internet connections might choose the 3 Mbps version; users watching the video over 3G with a smartphone might choose the 300 kbps version. Similarly, the video in a video conference application can be compressed on-the-fly to provide the best video quality given the available end-to-end bandwidth between conversing users"
"Justify with an example how with UDP streaming, the server transmits video at a rate that matches the clients video consumption rate by clocking out the video chunks over UDP at a steady rate","With UDP streaming, the server transmits video at a rate that matches the clients video consumption rate by clocking out the video chunks over UDP at a steady rate .For example, if the video consumption rate is 2 Mbps and each UDP packet carries 8,000 bits of video, then the server would transmit one UDP packet into its socket every (8000 bits)/(2 Mbps) = 4 msec","video is encoded at a fixed bit rate, and thus each video block contains video frames that are to be played out over the same fixed amount of time, . The server transmits the first video block at t0, the second block at t0 + , the third block at t0 + 2, and so on. Once the client begins playout, each block should be played out time units after the previous block in order to reproduce the timing of the original recorded video. Because of the variable end-to-end network delays, different video blocks experience different delays. The first video block arrives at the client at t1 and the second block arrives at t2. The network delay for the ith block is the horizontal distance between the time the block was transmitted by the server and the time it is received at the client; note that the network delay varies from one video block to another. In this example, if the client were to begin playout as soon as the first block arrived at t1, then the second block would not have arrived in time to be played out at out at t1 + . In this case, video playout would either have to stall (waiting for block 2 to arrive) or block 2 could be skippedboth resulting in undesirable playout impairments. Instead, if the client were to delay the start of playout until t3, when blocks 1 through 6 have all arrived, periodic playout can proceed with all blocks having been received before their playout time. 11 8 6 4 2 Constant bit rate video transmission by server Video reception at client Client playout delay Variable network delay t0 +2D t0 +D Constant bit rate video playout by client t1 + D Time t3 + D 9.2 STREAMING STORED VIDEO 9.2.1 UDP Streaming We only briefly discuss UDP streaming here, referring the reader to more in-depth discussions of the protocols behind these systems where appropriate. With UDP streaming, the server transmits video at a rate that matches the clients video consumption rate by clocking out the video chunks over UDP at a steady rate. For example, if the video consumption rate is 2 Mbps and each UDP packet carries 8,000 bits of video, then the server would transmit one UDP packet into its socket every (8000 bits)/(2 Mbps) = 4 msec. As we learned in Chapter 3, because UDP does not employ a congestion-control mechanism, the server can push packets into the network at the consumption rate of the video without the rate-control restrictions of TCP. UDP streaming typically uses a small client-side buffer, big enough to hold less than a second of video. Before passing the video chunks to UDP, the server will encapsulate the video chunks within transport packets specially designed for transporting audio and video, using the Real-Time Transport Protocol (RTP) [RFC 3550] or a similar (possibly proprietary) scheme. We delay our coverage of RTP until Section 9.3, where we discuss RTP in the context of conversational voice and video systems"
"Justify with an example how first, due to the unpredictable and varying amount of available bandwidth between server and client, constant-rate UDP streaming can fail to provide continuous playout","First, due to the unpredictable and varying amount of available bandwidth between server and client, constant-rate UDP streaming can fail to provide continuous playout .For example, consider the scenario where the video consumption rate is 1 Mbps and the server-toclient available bandwidth is usually more than 1 Mbps, but every few minutes the available bandwidth drops below 1 Mbps for several seconds","Another distinguishing property of UDP streaming is that in addition to the server-to-client video stream, the client and server also maintain, in parallel, a separate control connection over which the client sends commands regarding session state changes (such as pause, resume, reposition, and so on). The Real-Time Streaming Protocol (RTSP) [RFC 2326], explained in some detail in the Web site for this textbook, is a popular open protocol for such a control connection. Although UDP streaming has been employed in many open-source systems and proprietary products, it suffers from three significant drawbacks. First, due to the unpredictable and varying amount of available bandwidth between server and client, constant-rate UDP streaming can fail to provide continuous playout. For example, consider the scenario where the video consumption rate is 1 Mbps and the server-toclient available bandwidth is usually more than 1 Mbps, but every few minutes the available bandwidth drops below 1 Mbps for several seconds. In such a scenario, a UDP streaming system that transmits video at a constant rate of 1 Mbps over RTP/ UDP would likely provide a poor user experience, with freezing or skipped frames soon after the available bandwidth falls below 1 Mbps. The second drawback of UDP streaming is that it requires a media control server, such as an RTSP server, to process client-to-server interactivity requests and to track client state (e.g., the clients playout point in the video, whether the video is being paused or played, and so on) for each ongoing client session. This increases the overall cost and complexity of deploying a large-scale video-on-demand system. The third drawback is that many firewalls are configured to block UDP traffic, preventing the users behind these firewalls from receiving UDP video. 9.2.2 HTTP Streaming In HTTP streaming, the video is simply stored in an HTTP server as an ordinary file with a specific URL. When a user wants to see the video, the client establishes a TCP connection with the server and issues an HTTP GET request for that URL"
Justify with an example how the second FEC mechanism is to send a lower-resolution audio stream as the redundant information,"The second FEC mechanism is to send a lower-resolution audio stream as the redundant information .For example, the sender might create a nominal audio stream and a corresponding low-resolution, low-bit rate audio stream. (The nominal stream could be a PCM encoding at 64 kbps, and the lower-quality stream could be a GSM encoding at 13 kbps.) The low-bit rate stream is referred to as the redundant stream","By keeping n + 1, the group size, small, a large fraction of the lost packets can be recovered when loss is not excessive. However, the smaller the group size, the greater the relative increase of the transmission rate. In particular, the transmission rate increases by a factor of 1/n, so that, if n = 3, then the transmission rate increases by 33 percent. Furthermore, this simple scheme increases the playout delay, as the receiver must wait to receive the entire group of packets before it can begin playout. For more practical details about how FEC works for multimedia transport see [RFC 5109]. The second FEC mechanism is to send a lower-resolution audio stream as the redundant information. For example, the sender might create a nominal audio stream and a corresponding low-resolution, low-bit rate audio stream. (The nominal stream could be a PCM encoding at 64 kbps, and the lower-quality stream could be a GSM encoding at 13 kbps.) The low-bit rate stream is referred to as the redundant stream. As shown in Figure 9.5, the sender constructs the nth packet by taking the nth chunk from the nominal stream and appending to it the (n - 1)st chunk from the redundant stream. In this manner, whenever there is nonconsecutive packet loss, the receiver can conceal the loss by playing out the low-bit rate encoded chunk that arrives with the subsequent packet. Of course, low-bit rate chunks give lower quality than the nominal chunks. However, a stream of mostly high-quality chunks, occasional lowquality chunks, and no missing chunks gives good overall audio quality. Note that in this scheme, the receiver only has to receive two packets before playback, so that the increased playout delay is small. Furthermore, if the low-bit rate encoding is much less than the nominal encoding, then the marginal increase in the transmission rate will be small"
"Justify with an example how for both voice and video, the Skype clients have at their disposal many different codecs, which are capable of encoding the media at a wide range of rates and qualities","For both voice and video, the Skype clients have at their disposal many different codecs, which are capable of encoding the media at a wide range of rates and qualities .For example, video rates for Skype have been measured to be as low as 30 kbps for a low-quality session up to almost 1 Mbps for a high quality session","Because the Skype protocol is proprietary, and because all Skypes control and media packets are encrypted, it is difficult to precisely determine how Skype operates. Nevertheless, from the Skype Web site and several measurement studies, researchers have learned how Skype generally works [Baset 2006; Guha 2006; Chen 2006; Suh 2006; Ren 2006; Zhang X 2012]. For both voice and video, the Skype clients have at their disposal many different codecs, which are capable of encoding the media at a wide range of rates and qualities. For example, video rates for Skype have been measured to be as low as 30 kbps for a low-quality session up to almost 1 Mbps for a high quality session [Zhang X 2012]. Typically, Skypes audio quality is better than the POTS (Plain Old Telephone Service) quality provided by the wire-line phone system. (Skype codecs typically sample voice at 16,000 samples/sec or higher, which provides richer tones than POTS, which samples at 8,000/sec.) By default, Skype sends audio and video packets over UDP. However, control packets are sent over TCP, and media packets are also sent over TCP when firewalls block UDP streams. Skype uses FEC for loss recovery for both voice and video streams sent over UDP"
"Justify with an example how if an application incorporates RTPinstead of a proprietary scheme to provide payload type, sequence numbers, or timestampsthen the application will more easily interoperate with other networked multimedia applications","If an application incorporates RTPinstead of a proprietary scheme to provide payload type, sequence numbers, or timestampsthen the application will more easily interoperate with other networked multimedia applications .For example, if two different companies develop VoIP software and they both incorporate RTP into their product, there may be some hope that a user using one of the VoIP products will be able to communicate with a user using the other VoIP product","As an example, consider the use of RTP to transport voice. Suppose the voice source is PCM-encoded (that is, sampled, quantized, and digitized) at 64 kbps. Further suppose that the application collects the encoded data in 20-msec chunks, that is, 160 bytes in a chunk. The sending side precedes each chunk of the audio data with an RTP header that includes the type of audio encoding, a sequence number, and a timestamp. The RTP header is normally 12 bytes. The audio chunk along with the RTP header form the RTP packet. The RTP packet is then sent into the UDP socket interface. At the receiver side, the application receives the RTP packet from its socket interface. The application extracts the audio chunk from the RTP packet and uses the header fields of the RTP packet to properly decode and play back the audio chunk. If an application incorporates RTPinstead of a proprietary scheme to provide payload type, sequence numbers, or timestampsthen the application will more easily interoperate with other networked multimedia applications. For example, if two different companies develop VoIP software and they both incorporate RTP into their product, there may be some hope that a user using one of the VoIP products will be able to communicate with a user using the other VoIP product. In Section 9.4.2, well see that RTP is often used in conjunction with SIP, an important standard for Internet telephony. It should be emphasized that RTP does not provide any mechanism to ensure timely delivery of data or provide other quality-of-service (QoS) guarantees; it does not even guarantee delivery of packets or prevent out-of-order delivery of packets. Indeed, RTP encapsulation is seen only at the end systems. Routers do not distinguish between IP datagrams that carry RTP packets and IP datagrams that dont"
"Justify with an example how rTP allows each source (for example, a camera or a microphone) to be assigned its own independent RTP stream of packets","RTP allows each source (for example, a camera or a microphone) to be assigned its own independent RTP stream of packets .For example, for a video conference between two participants, four RTP streams could be openedtwo streams for transmitting the audio (one in each direction) and two streams for transmitting the video (again, one in each direction)","It should be emphasized that RTP does not provide any mechanism to ensure timely delivery of data or provide other quality-of-service (QoS) guarantees; it does not even guarantee delivery of packets or prevent out-of-order delivery of packets. Indeed, RTP encapsulation is seen only at the end systems. Routers do not distinguish between IP datagrams that carry RTP packets and IP datagrams that dont. RTP allows each source (for example, a camera or a microphone) to be assigned its own independent RTP stream of packets. For example, for a video conference between two participants, four RTP streams could be openedtwo streams for transmitting the audio (one in each direction) and two streams for transmitting the video (again, one in each direction). However, many popular encoding techniques including MPEG 1 and MPEG 2bundle the audio and video into a single stream during the encoding process. When the audio and video are bundled by the encoder, then only one RTP stream is generated in each direction. RTP packets are not limited to unicast applications. They can also be sent over one-to-many and many-to-many multicast trees. For a many-to-many multicast session, all of the sessions senders and sources typically use the same multicast group for sending their RTP streams. RTP multicast streams belonging together, such as audio and video streams emanating from multiple senders in a video conference application, belong to an RTP session"
"Justify with an example how whenever a user launches an SIP application on a device, the application sends an SIP register message to the registrar, informing the registrar of its current IP address","Whenever a user launches an SIP application on a device, the application sends an SIP register message to the registrar, informing the registrar of its current IP address .For example, when Bob launches his SIP application on his PDA, the application would send a message along the lines of: REGISTER sip:domain.com SIP/2.0 Via: SIP/2.0/UDP 193.64.210.89 From: sip:bob@domain.com To: sip:bob@domain.com Expires: 3600 Bobs registrar keeps track of Bobs current IP address","com is currently using. To find this out, Alice creates an INVITE message that begins with INVITE bob@domain.com SIP/2.0 and sends this message to an SIP proxy. The proxy will respond with an SIP reply that might include the IP address of the device that bob@domain.com is currently using. Alternatively, the reply might include the IP address of Bobs voicemail box, or it might include a URL of a Web page (that says Bob is sleeping. Leave me alone!). Also, the result returned by the proxy might depend on the caller: If the call is from Bobs wife, he might accept the call and supply his IP address; if the call is from Bobs mother-in-law, he might respond with the URL that points to the I-am-sleeping Web page! Now, you are probably wondering, how can the proxy server determine the current IP address for bob@domain.com? To answer this question, we need to say a few words about another SIP device, the SIP registrar. Every SIP user has an associated registrar. Whenever a user launches an SIP application on a device, the application sends an SIP register message to the registrar, informing the registrar of its current IP address. For example, when Bob launches his SIP application on his PDA, the application would send a message along the lines of: REGISTER sip:domain.com SIP/2.0 Via: SIP/2.0/UDP 193.64.210.89 From: sip:bob@domain.com To: sip:bob@domain.com Expires: 3600 Bobs registrar keeps track of Bobs current IP address. Whenever Bob switches to a new SIP device, the new device sends a new register message, indicating the new IP address. Also, if Bob remains at the same device for an extended period of time, the device will send refresh register messages, indicating that the most recently sent IP address is still valid. (In the example above, refresh messages need to be sent every 3600 seconds to maintain the address at the registrar server.) It is worth noting that the registrar is analogous to a DNS authoritative name server: The DNS server translates fixed host names to fixed IP addresses; the SIP registrar translates fixed human identifiers (for example, bob@domain.com) to dynamic IP addresses. Often SIP registrars and SIP proxies are run on the same host. Now lets examine how Alices SIP proxy server obtains Bobs current IP address. From the preceding discussion we see that the proxy server simply needs to forward Alices INVITE message to Bobs registrar/proxy. The registrar/proxy could then forward the message to Bobs current SIP device. Finally, Bob, having now received Alices INVITE message, could send an SIP response to Alice"
"Justify with an example how with differentiated service, one type of traffic might be given strict priority over another class of traffic when both types of traffic are queued at a router","With differentiated service, one type of traffic might be given strict priority over another class of traffic when both types of traffic are queued at a router .For example, packets belonging to a real-time conversational application might be given priority over other packets due to their stringent delay constraints","Making the best of best-effort service. The application-level mechanisms and infrastructure that we studied in Sections 9.2 through 9.4 can be successfully used in a well-dimensioned network where packet loss and excessive end-to-end delay rarely occur. When demand increases are forecasted, the ISPs deploy additional bandwidth and switching capacity to continue to ensure satisfactory delay and packet-loss performance [Huang 2005]. Well discuss such network dimensioning further in Section 9.5.1. Differentiated service. Since the early days of the Internet, its been envisioned that different types of traffic (for example, as indicated in the Type-of-Service field in the IP4v packet header) could be provided with different classes of service, rather than a single one-size-fits-all best-effort service. With differentiated service, one type of traffic might be given strict priority over another class of traffic when both types of traffic are queued at a router. For example, packets belonging to a real-time conversational application might be given priority over other packets due to their stringent delay constraints. Introducing differentiated service into the network will require new mechanisms for packet marking (indicating a packets class of service), packet scheduling, and more. Well cover differentiated service, and new network mechanisms needed to implement this service, in Sections 9.5.2 and 9.5.3. Approach Guarantee Making the best of besteffort service all traffic treated equally none, or soft application-layer minimal support, CDNs, overlays, networklevel resource provisioning Differentiated service different classes of traffic treated differently none, or soft packet marking, policing, scheduling some Per-connection Quality-ofService (QoS) Guarantees each sourcedestination flows treated differently soft or hard, once flow is admitted packet marking, policing, scheduling; call admission and signaling little Deployment to date Three network-level approaches to supporting multimedia applications Per-connection Quality-of-Service (QoS) Guarantees. With per-connection QoS guarantees, each instance of an application explicitly reserves end-to-end bandwidth and thus has a guaranteed end-to-end performance. A hard guarantee means the application will receive its requested quality of service (QoS) with certainty. A soft guarantee means the application will receive its requested quality of service with high probability. For example, if a user wants to make a VoIP call from Host A to Host B, the users VoIP application reserves bandwidth explicitly in each link along a route between the two hosts. But permitting applications to make reservations and requiring the network to honor the reservations requires some big changes. First, we need a protocol that, on behalf of the applications, reserves link bandwidth on the paths from the senders to their receivers. Second, well need new scheduling policies in the router queues so that per-connection bandwidth reservations can be honored. Finally, in order to make a reservation, the applications must give the network a description of the traffic that they intend to send into the network and the network will need to police each applications traffic to make sure that it abides by that description. These mechanisms, when combined, require new and complex software in hosts and routers. Because per-connection QoS guaranteed service has not seen significant deployment, well cover these mechanisms only briefly in Section 9.5.4"
Justify with an example how a soft guarantee means the application will receive its requested quality of service with high probability,"A soft guarantee means the application will receive its requested quality of service with high probability .For example, if a user wants to make a VoIP call from Host A to Host B, the users VoIP application reserves bandwidth explicitly in each link along a route between the two hosts","Differentiated service. Since the early days of the Internet, its been envisioned that different types of traffic (for example, as indicated in the Type-of-Service field in the IP4v packet header) could be provided with different classes of service, rather than a single one-size-fits-all best-effort service. With differentiated service, one type of traffic might be given strict priority over another class of traffic when both types of traffic are queued at a router. For example, packets belonging to a real-time conversational application might be given priority over other packets due to their stringent delay constraints. Introducing differentiated service into the network will require new mechanisms for packet marking (indicating a packets class of service), packet scheduling, and more. Well cover differentiated service, and new network mechanisms needed to implement this service, in Sections 9.5.2 and 9.5.3. Approach Guarantee Making the best of besteffort service all traffic treated equally none, or soft application-layer minimal support, CDNs, overlays, networklevel resource provisioning Differentiated service different classes of traffic treated differently none, or soft packet marking, policing, scheduling some Per-connection Quality-ofService (QoS) Guarantees each sourcedestination flows treated differently soft or hard, once flow is admitted packet marking, policing, scheduling; call admission and signaling little Deployment to date Three network-level approaches to supporting multimedia applications Per-connection Quality-of-Service (QoS) Guarantees. With per-connection QoS guarantees, each instance of an application explicitly reserves end-to-end bandwidth and thus has a guaranteed end-to-end performance. A hard guarantee means the application will receive its requested quality of service (QoS) with certainty. A soft guarantee means the application will receive its requested quality of service with high probability. For example, if a user wants to make a VoIP call from Host A to Host B, the users VoIP application reserves bandwidth explicitly in each link along a route between the two hosts. But permitting applications to make reservations and requiring the network to honor the reservations requires some big changes. First, we need a protocol that, on behalf of the applications, reserves link bandwidth on the paths from the senders to their receivers. Second, well need new scheduling policies in the router queues so that per-connection bandwidth reservations can be honored. Finally, in order to make a reservation, the applications must give the network a description of the traffic that they intend to send into the network and the network will need to police each applications traffic to make sure that it abides by that description. These mechanisms, when combined, require new and complex software in hosts and routers. Because per-connection QoS guaranteed service has not seen significant deployment, well cover these mechanisms only briefly in Section 9.5.4. 9.5.1 Dimensioning Best-Effort Networks Fundamentally, the difficulty in supporting multimedia applications arises from their stringent performance requirementslow end-to-end packet delay, delay jitter, and lossand the fact that packet delay, delay jitter, and loss occur whenever the network becomes congested. A first approach to improving the quality of multimedia applicationsan approach that can often be used to solve just about any problem where resources are constrainedis simply to throw money at the problem and thus simply avoid resource contention. In the case of networked multimedia, this means providing enough link capacity throughout the network so that network congestion, and its consequent packet delay and loss, never (or only very rarely) occurs. With enough link capacity, packets could zip through todays Internet without queuing delay or loss. From many perspectives this is an ideal situationmultimedia applications would perform perfectly, users would be happy, and this could all be achieved with no changes to Internets best-effort architecture"
"Justify with an example how Providing Multiple Classes of Service Perhaps the simplest enhancement to the one-size-fits-all best-effort service in todays Internet is to divide traffic into classes, and provide different levels of service to these different classes of traffic","Providing Multiple Classes of Service Perhaps the simplest enhancement to the one-size-fits-all best-effort service in todays Internet is to divide traffic into classes, and provide different levels of service to these different classes of traffic .For example, an ISP might well want to provide a higher class of service to delay-sensitive Voice-over-IP or teleconferencing traffic (and charge more for this service!) than to elastic traffic such as e-mail or HTTP","Given that todays best-effort Internet could (from a technology standpoint) support multimedia traffic at an appropriate performance level if it were dimensioned to do so, the natural question is why todays Internet doesnt do so. The answers are primarily economic and organizational. From an economic standpoint, would users be willing to pay their ISPs enough for the ISPs to install sufficient bandwidth to support multimedia applications over a best-effort Internet? The organizational issues are perhaps even more daunting. Note that an end-to-end path between two multimedia end points will pass through the networks of multiple ISPs. From an organizational standpoint, would these ISPs be willing to cooperate (perhaps with revenue sharing) to ensure that the end-to-end path is properly dimensioned to support multimedia applications? For a perspective on these economic and organizational issues, see [Davies 2005]. For a perspective on provisioning tier-1 backbone networks to support delay-sensitive traffic, see [Fraleigh 2003]. 9.5.2 Providing Multiple Classes of Service Perhaps the simplest enhancement to the one-size-fits-all best-effort service in todays Internet is to divide traffic into classes, and provide different levels of service to these different classes of traffic. For example, an ISP might well want to provide a higher class of service to delay-sensitive Voice-over-IP or teleconferencing traffic (and charge more for this service!) than to elastic traffic such as e-mail or HTTP. Alternatively, an ISP may simply want to provide a higher quality of service to customers willing to pay more for this improved service. A number of residential wired-access ISPs and cellular wireless-access ISPs have adopted such tiered levels of servicewith platinum-service subscribers receiving better performance than gold- or silver-service subscribers. Were all familiar with different classes of service from our everyday lives first-class airline passengers get better service than business-class passengers, who in turn get better service than those of us who fly economy class; VIPs are provided immediate entry to events while everyone else waits in line; elders are revered in some countries and provided seats of honor and the finest food at a table. Its important to note that such differential service is provided among aggregates of traffic, that is, among classes of traffic, not among individual connections. For example, all first-class passengers are handled the same (with no first-class passenger receiving any better treatment than any other first-class passenger), just as all VoIP packets would receive the same treatment within the network, independent of the particular end-to-end connection to which they belong. As we will see, by dealing with a small number of traffic aggregates, rather than a large number of individual connections, the new network mechanisms required to provide better-than-best service can be kept relatively simple"
Justify with an example how a complementary approach for providing isolation among traffic classes is for the link-level packet-scheduling mechanism to explicitly allocate a fixed amount of link bandwidth to each class,"A complementary approach for providing isolation among traffic classes is for the link-level packet-scheduling mechanism to explicitly allocate a fixed amount of link bandwidth to each class .For example, the audio class could be allocated 1 Mbps at R1, and the HTTP class could be allocated 0.5 Mbps","The leaky bucket mechanism that well examine shortly is perhaps the most widely used policing mechanism. In Figure 9.12, the packet classification and marking mechanism (Insight 1) and the policing mechanism (Insight 2) are both implemented together at the networks edge, either in the end system or at an edge router. A complementary approach for providing isolation among traffic classes is for the link-level packet-scheduling mechanism to explicitly allocate a fixed amount of link bandwidth to each class. For example, the audio class could be allocated 1 Mbps at R1, and the HTTP class could be allocated 0.5 Mbps. In this case, the audio and Packet marking and policing R1 1.5 Mbps link Key: Metering and policing Policing (and marking) the audio and HTTP traffic classes R1 1.0 Mbps logical link 1.5 Mbps link 0.5 Mbps logical link HTTP flows see a logical link with capacity 1.0 and 0.5 Mbps, respectively, as shown in Figure 9.13. With strict enforcement of the link-level allocation of bandwidth, a class can use only the amount of bandwidth that has been allocated; in particular, it cannot utilize bandwidth that is not currently being used by others. For example, if the audio flow goes silent (for example, if the speaker pauses and generates no audio packets), the HTTP flow would still not be able to transmit more than 0.5 Mbps over the R1-to-R2 link, even though the audio flows 1 Mbps bandwidth allocation is not being used at that moment. Since bandwidth is a use-it-or-lose-it resource, there is no reason to prevent HTTP traffic from using bandwidth not used by the audio traffic. Wed like to use bandwidth as efficiently as possible, never wasting it when it could be otherwise used. This gives rise to our third insight: Insight 3: While providing isolation among classes or flows, it is desirable to use resources (for example, link bandwidth and buffers) as efficiently as possible. Recall from our discussion in Sections 1.3 and 4.2 that packets belonging to various network flows are multiplexed and queued for transmission at the output buffers associated with a link. The manner in which queued packets are selected for transmission on the link is known as the link-scheduling discipline, and was discussed in detail in Section 4.2. Recall that in Section 4.2 three link-scheduling disciplines were discussed, namely, FIFO, priority queuing, and Weighted Fair Queuing (WFQ). Well see soon see that WFQ will play a particularly important role for isolating the traffic classes"
"Justify with an example how with strict enforcement of the link-level allocation of bandwidth, a class can use only the amount of bandwidth that has been allocated; in particular, it cannot utilize bandwidth that is not currently being used by others","With strict enforcement of the link-level allocation of bandwidth, a class can use only the amount of bandwidth that has been allocated; in particular, it cannot utilize bandwidth that is not currently being used by others .For example, if the audio flow goes silent (for example, if the speaker pauses and generates no audio packets), the HTTP flow would still not be able to transmit more than 0.5 Mbps over the R1-to-R2 link, even though the audio flows 1 Mbps bandwidth allocation is not being used at that moment","The leaky bucket mechanism that well examine shortly is perhaps the most widely used policing mechanism. In Figure 9.12, the packet classification and marking mechanism (Insight 1) and the policing mechanism (Insight 2) are both implemented together at the networks edge, either in the end system or at an edge router. A complementary approach for providing isolation among traffic classes is for the link-level packet-scheduling mechanism to explicitly allocate a fixed amount of link bandwidth to each class. For example, the audio class could be allocated 1 Mbps at R1, and the HTTP class could be allocated 0.5 Mbps. In this case, the audio and Packet marking and policing R1 1.5 Mbps link Key: Metering and policing Policing (and marking) the audio and HTTP traffic classes R1 1.0 Mbps logical link 1.5 Mbps link 0.5 Mbps logical link HTTP flows see a logical link with capacity 1.0 and 0.5 Mbps, respectively, as shown in Figure 9.13. With strict enforcement of the link-level allocation of bandwidth, a class can use only the amount of bandwidth that has been allocated; in particular, it cannot utilize bandwidth that is not currently being used by others. For example, if the audio flow goes silent (for example, if the speaker pauses and generates no audio packets), the HTTP flow would still not be able to transmit more than 0.5 Mbps over the R1-to-R2 link, even though the audio flows 1 Mbps bandwidth allocation is not being used at that moment. Since bandwidth is a use-it-or-lose-it resource, there is no reason to prevent HTTP traffic from using bandwidth not used by the audio traffic. Wed like to use bandwidth as efficiently as possible, never wasting it when it could be otherwise used. This gives rise to our third insight: Insight 3: While providing isolation among classes or flows, it is desirable to use resources (for example, link bandwidth and buffers) as efficiently as possible. Recall from our discussion in Sections 1.3 and 4.2 that packets belonging to various network flows are multiplexed and queued for transmission at the output buffers associated with a link. The manner in which queued packets are selected for transmission on the link is known as the link-scheduling discipline, and was discussed in detail in Section 4.2. Recall that in Section 4.2 three link-scheduling disciplines were discussed, namely, FIFO, priority queuing, and Weighted Fair Queuing (WFQ). Well see soon see that WFQ will play a particularly important role for isolating the traffic classes"
"Justify with an example how a flow whose average rate is limited to 100 packets per second is more constrained than a source that is limited to 6,000 packets per minute, even though both have the same average rate over a long enough interval of time","A flow whose average rate is limited to 100 packets per second is more constrained than a source that is limited to 6,000 packets per minute, even though both have the same average rate over a long enough interval of time .For example, the latter constraint would allow a flow to send 1,000 packets in a given second-long interval of time, while the former constraint would disallow this sending behavior","Recall from our discussion in Sections 1.3 and 4.2 that packets belonging to various network flows are multiplexed and queued for transmission at the output buffers associated with a link. The manner in which queued packets are selected for transmission on the link is known as the link-scheduling discipline, and was discussed in detail in Section 4.2. Recall that in Section 4.2 three link-scheduling disciplines were discussed, namely, FIFO, priority queuing, and Weighted Fair Queuing (WFQ). Well see soon see that WFQ will play a particularly important role for isolating the traffic classes. The Leaky Bucket One of our earlier insights was that policing, the regulation of the rate at which a class or flow (we will assume the unit of policing is a flow in our discussion below) is allowed to inject packets into the network, is an important QoS mechanism. But what aspects of a flows packet rate should be policed? We can identify three important policing criteria, each differing from the other according to the time scale over which the packet flow is policed: Average rate. The network may wish to limit the long-term average rate (packets per time interval) at which a flows packets can be sent into the network. A crucial issue here is the interval of time over which the average rate will be policed. A flow whose average rate is limited to 100 packets per second is more constrained than a source that is limited to 6,000 packets per minute, even though both have the same average rate over a long enough interval of time. For example, the latter constraint would allow a flow to send 1,000 packets in a given second-long interval of time, while the former constraint would disallow this sending behavior. Peak rate. While the average-rate constraint limits the amount of traffic that can be sent into the network over a relatively long period of time, a peak-rate constraint limits the maximum number of packets that can be sent over a shorter period of time. Using our example above, the network may police a flow at an average rate of 6,000 packets per minute, while limiting the flows peak rate to 1,500 packets per second"
"Justify with an example how in order to determine the best cluster for a client based on the current traffic conditions, CDNs can instead perform periodic real-time measurements of delay and loss performance between their clusters and clients","In order to determine the best cluster for a client based on the current traffic conditions, CDNs can instead perform periodic real-time measurements of delay and loss performance between their clusters and clients .For instance, a CDN can have each of its clusters periodically send probes (for example, ping messages or DNS queries) to all of the LDNSs around the world","When a DNS request is received from a particular LDNS, the CDN chooses the geographically closest cluster, that is, the cluster that is the fewest kilometers from the LDNS as the bird flies. Such a solution can work reasonably well for a large fraction of the clients [Agarwal 2009]. However, for some clients, the solution may perform poorly, since the geographically closest cluster may not be the closest cluster in terms of the length or number of hops of the network path. Furthermore, a problem inherent with all DNSbased approaches is that some end-users are configured to use remotely located LDNSs [Shaikh 2001; Mao 2002], in which case the LDNS location may be far from the clients location. Moreover, this simple strategy ignores the variation in delay and available bandwidth over time of Internet paths, always assigning the same cluster to a particular client. In order to determine the best cluster for a client based on the current traffic conditions, CDNs can instead perform periodic real-time measurements of delay and loss performance between their clusters and clients. For instance, a CDN can have each of its clusters periodically send probes (for example, ping messages or DNS queries) to all of the LDNSs around the world. One drawback of this approach is that many LDNSs are configured to not respond to such probes. 2.6.4 Case Studies: Netflix, YouTube, and Kankan We conclude our discussion of streaming stored video by taking a look at three highly successful large-scale deployments: Netflix, YouTube, and Kankan. Well see that each of these systems take a very different approach, yet employ many of the underlying principles discussed in this section"
"Justify with an example how each ISP is in itself a network of packet switches and communication links ISPs provide a variety of types of network access to the end systems, including residential broadband access","Each ISP is in itself a network of packet switches and communication links ISPs provide a variety of types of network access to the end systems, including residential broadband access .such as cable modem or DSL, high-speed local area network access, and mobile wireless access","Packet-switched networks (which transport packets) are in many ways similar to transportation networks of highways, roads, and intersections (which transport vehicles). Consider, for example, a factory that needs to move a large amount of cargo to some destination warehouse located thousands of kilometers away. At the factory, the cargo is segmented and loaded into a fleet of trucks. Each of the trucks then independently travels through the network of highways, roads, and intersections to the destination warehouse. At the destination warehouse, the cargo is unloaded and grouped with the rest of the cargo arriving from the same shipment. Thus, in many ways, packets are analogous to trucks, communication links are analogous to highways and roads, packet switches are analogous to intersections, and end systems are analogous to buildings. Just as a truck takes a path through the transportation network, a packet takes a path through a computer network. End systems access the Internet through Internet Service Providers (ISPs), including residential ISPs such as local cable or telephone companies; corporate ISPs; university ISPs; ISPs that provide WiFi access in airports, hotels, coffee shops, and other public places; and cellular data ISPs, providing mobile access to our smartphones and other devices. Each ISP is in itself a network of packet switches and communication links. ISPs provide a variety of types of network access to the end systems, including residential broadband access such as cable modem or DSL, high-speed local area network access, and mobile wireless access. ISPs also provide Internet access to content providers, connecting Web sites and video servers directly to the Internet. The Internet is all about connecting end systems to each other, so the ISPs that provide access to end systems must also be interconnected. These lowertier ISPs are interconnected through national and international upper-tier ISPs such as Level 3 Communications, AT&T, Sprint, and NTT. An upper-tier ISP consists of high-speed routers interconnected with high-speed fiber-optic links. Each ISP network, whether upper-tier or lower-tier, is managed independently, runs the IP protocol (see below), and conforms to certain naming and address conventions. Well examine ISPs and their interconnection more closely in Section 1.3. End systems, packet switches, and other pieces of the Internet run protocols that control the sending and receiving of information within the Internet. The Transmission Control Protocol (TCP) and the Internet Protocol (IP) are two of the most important protocols in the Internet. The IP protocol specifies the format of the packets that are sent and received among routers and end systems. The Internets principal protocols are collectively known as TCP/IP. Well begin looking into protocols in this introductory chapter. But thats just a startmuch of this book is concerned with computer network protocols! Given the importance of protocols to the Internet, its important that everyone agree on what each and every protocol does, so that people can create systems and products that interoperate. This is where standards come into play. Internet standards are developed by the Internet Engineering Task Force (IETF) [IETF 2016]. The IETF standards documents are called requests for comments (RFCs). RFCs started out as general requests for comments (hence the name) to resolve network and protocol design problems that faced the precursor to the Internet [Allman 2011]. RFCs tend to be quite technical and detailed. They define protocols such as TCP, IP, HTTP (for the Web), and SMTP (for e-mail). There are currently more than 7,000 RFCs. Other bodies also specify standards for network components, most notably for network links. The IEEE 802 LAN/MAN Standards Committee [IEEE 802 2016], for example, specifies the Ethernet and wireless WiFi standards"
"Justify with an example how but we can also describe the Internet from an entirely different anglenamely, as an infrastructure that provides services to applications In addition to traditional applications","But we can also describe the Internet from an entirely different anglenamely, as an infrastructure that provides services to applications In addition to traditional applications .such as e-mail and Web surfing, Internet applications include mobile smartphone and tablet applications, including Internet messaging, mapping with real-time road-traffic information, music streaming from the cloud, movie and television streaming, online social networks, video conferencing, multi-person games, and location-based recommendation systems","1.1.2 A Services Description Our discussion above has identified many of the pieces that make up the Internet. But we can also describe the Internet from an entirely different anglenamely, as an infrastructure that provides services to applications. In addition to traditional applications such as e-mail and Web surfing, Internet applications include mobile smartphone and tablet applications, including Internet messaging, mapping with real-time road-traffic information, music streaming from the cloud, movie and television streaming, online social networks, video conferencing, multi-person games, and location-based recommendation systems. The applications are said to be distributed applications, since they involve multiple end systems that exchange data with each other. Importantly, Internet applications run on end systemsthey do not run in the packet switches in the network core. Although packet switches facilitate the exchange of data among end systems, they are not concerned with the application that is the source or sink of data. Lets explore a little more what we mean by an infrastructure that provides services to applications. To this end, suppose you have an exciting new idea for a distributed Internet application, one that may greatly benefit humanity or one that may simply make you rich and famous. How might you go about transforming this idea into an actual Internet application? Because applications run on end systems, you are going to need to write programs that run on the end systems. You might, for example, write your programs in Java, C, or Python. Now, because you are developing a distributed Internet application, the programs running on the different end systems will need to send data to each other. And here we get to a central issueone that leads to the alternative way of describing the Internet as a platform for applications. How does one program running on one end system instruct the Internet to deliver data to another program running on another end system? End systems attached to the Internet provide a socket interface that specifies how a program running on one end system asks the Internet infrastructure to deliver data to a specific destination program running on another end system. This Internet socket interface is a set of rules that the sending program must follow so that the Internet can deliver the data to the destination program. Well discuss the Internet socket interface in detail in Chapter 2. For now, lets draw upon a simple analogy, one that we will frequently use in this book. Suppose Alice wants to send a letter to Bob using the postal service. Alice, of course, cant just write the letter (the data) and drop the letter out her window. Instead, the postal service requires that Alice put the letter in an envelope; write Bobs full name, address, and zip code in the center of the envelope; seal the envelope; put a stamp in the upper-right-hand corner of the envelope; and finally, drop the envelope into an official postal service mailbox. Thus, the postal service has its own postal service interface, or set of rules, that Alice must follow to have the postal service deliver her letter to Bob. In a similar manner, the Internet has a socket interface that the program sending data must follow to have the Internet deliver the data to the program that will receive the data"
"Justify with an example how physical media fall into two categories: guided media and unguided media With guided media, the waves are guided along a solid medium,","Physical media fall into two categories: guided media and unguided media With guided media, the waves are guided along a solid medium, .such as a fiber-optic cable, a twisted-pair copper wire, or a coaxial cable","In order to define what is meant by a physical medium, let us reflect on the brief life of a bit. Consider a bit traveling from one end system, through a series of links and routers, to another end system. This poor bit gets kicked around and transmitted many, many times! The source end system first transmits the bit, and shortly thereafter the first router in the series receives the bit; the first router then transmits the bit, and shortly thereafter the second router receives the bit; and so on. Thus our bit, when traveling from source to destination, passes through a series of transmitter-receiver pairs. For each transmitterreceiver pair, the bit is sent by propagating electromagnetic waves or optical pulses across a physical medium. The physical medium can take many shapes and forms and does not have to be of the same type for each transmitter-receiver pair along the path. Examples of physical media include twisted-pair copper wire, coaxial cable, multimode fiber-optic cable, terrestrial radio spectrum, and satellite radio spectrum. Physical media fall into two categories: guided media and unguided media. With guided media, the waves are guided along a solid medium, such as a fiber-optic cable, a twisted-pair copper wire, or a coaxial cable. With unguided media, the waves propagate in the atmosphere and in outer space, such as in a wireless LAN or a digital satellite channel. But before we get into the characteristics of the various media types, let us say a few words about their costs. The actual cost of the physical link (copper wire, fiber-optic cable, and so on) is often relatively minor compared with other networking costs. In particular, the labor cost associated with the installation of the physical link can be orders of magnitude higher than the cost of the material. For this reason, many builders install twisted pair, optical fiber, and coaxial cable in every room in a building. Even if only one medium is initially used, there is a good chance that another medium could be used in the near future, and so money is saved by not having to lay additional wires in the future"
"Justify with an example how a protocol layer can be implemented in software, in hardware, or in a combination of the two Application-layer protocols","A protocol layer can be implemented in software, in hardware, or in a combination of the two Application-layer protocols.such as HTTP and SMTPare almost always implemented in software in the end systems; so are transport-layer protocols","This might be implemented by using an unreliable edge-to-edge message delivery service of layer n - 1, and adding layer n functionality to detect and retransmit lost messages. A protocol layer can be implemented in software, in hardware, or in a combination of the two. Application-layer protocolssuch as HTTP and SMTPare almost always implemented in software in the end systems; so are transport-layer protocols. Because the physical layer and data link layers are responsible for handling communication over a specific link, they are typically implemented in a network interface card (for example, Ethernet or WiFi interface cards) associated with a given link. The network layer is often a mixed implementation of hardware and software. Also note that just as the functions in the layered airline architecture were distributed among the various airports and flight control centers that make up the system, so too is a layer n protocol distributed among the end systems, packet switches, and other components that make up the network. That is, theres often a piece of a layer n protocol in each of these network components"
Justify with an example how the Minitel became a huge success in 1984 when the French government gave away a free Minitel terminal to each French household that wanted one Minitel sites included free sites,"The Minitel became a huge success in 1984 when the French government gave away a free Minitel terminal to each French household that wanted one Minitel sites included free sites.such as a telephone directory siteas well as private sites, which collected a usage-based fee from each user","The transition [RFC 801] from NCP to TCP/IP was a flag day eventall hosts were required to transfer over to TCP/IP as of that day. In the late 1980s, important extensions were made to TCP to implement host-based congestion control [Jacobson 1988]. The DNS, used to map between a human-readable Internet name (for example, gaia.cs.umass.edu) and its 32-bit IP address, was also developed [RFC 1034]. Paralleling this development of the ARPAnet (which was for the most part a US effort), in the early 1980s the French launched the Minitel project, an ambitious plan to bring data networking into everyones home. Sponsored by the French government, the Minitel system consisted of a public packet-switched network (based on the X.25 protocol suite), Minitel servers, and inexpensive terminals with built-in low-speed modems. The Minitel became a huge success in 1984 when the French government gave away a free Minitel terminal to each French household that wanted one. Minitel sites included free sitessuch as a telephone directory siteas well as private sites, which collected a usage-based fee from each user. At its peak in the mid 1990s, it offered more than 20,000 services, ranging from home banking to specialized research databases. The Minitel was in a large proportion of French homes 10 years before most Americans had ever heard of the Internet. 1.7.4 The Internet Explosion: The 1990s The 1990s were ushered in with a number of events that symbolized the continued evolution and the soon-to-arrive commercialization of the Internet. ARPAnet, the progenitor of the Internet, ceased to exist. In 1991, NSFNET lifted its restrictions on the use of NSFNET for commercial purposes. NSFNET itself would be decommissioned in 1995, with Internet backbone traffic being carried by commercial Internet Service Providers"
"Justify with an example how for example, a packet can overflow a buffer in a router, or can be discarded by a host or router after having some of its bits corrupted For many applications","For example, a packet can overflow a buffer in a router, or can be discarded by a host or router after having some of its bits corrupted For many applications.such as electronic mail, file transfer, remote host access, Web document transfers, and financial applicationsdata loss can have devastating consequences (in the latter case, for either the bank or the customer!)","You have to choose one or the other, and each transportation mode offers different services. (For example, the train offers downtown pickup and drop-off, whereas the plane offers shorter travel time.) What are the services that a transport-layer protocol can offer to applications invoking it? We can broadly classify the possible services along four dimensions: reliable data transfer, throughput, timing, and security. Reliable Data Transfer As discussed in Chapter 1, packets can get lost within a computer network. For example, a packet can overflow a buffer in a router, or can be discarded by a host or router after having some of its bits corrupted. For many applicationssuch as electronic mail, file transfer, remote host access, Web document transfers, and financial applicationsdata loss can have devastating consequences (in the latter case, for either the bank or the customer!). Thus, to support these applications, something has to be done to guarantee that the data sent by one end of the application is delivered correctly and completely to the other end of the application. If a protocol provides such a guaranteed data delivery service, it is said to provide reliable data transfer. One important service that a transport-layer protocol can potentially provide to an application is process-to-process reliable data transfer. When a transport protocol provides this service, the sending process can just pass its data into the socket and know with complete confidence that the data will arrive without errors at the receiving process"
Justify with an example how a host with a complicated hostname can have one or more alias names,"A host with a complicated hostname can have one or more alias names For example, a hostname .such as relay1.west-coast .enterprise.com could have, say, two aliases such as enterprise.com and www.enterprise.com","We see from this example that DNS adds an additional delaysometimes substantialto the Internet applications that use it. Fortunately, as we discuss below, the desired IP address is often cached in a nearby DNS server, which helps to reduce DNS network traffic as well as the average DNS delay. DNS provides a few other important services in addition to translating hostnames to IP addresses: Host aliasing. A host with a complicated hostname can have one or more alias names. For example, a hostname such as relay1.west-coast .enterprise.com could have, say, two aliases such as enterprise.com and www.enterprise.com. In this case, the hostname relay1 .west-coast.enterprise.com is said to be a canonical hostname. Alias hostnames, when present, are typically more mnemonic than canonical hostnames. DNS can be invoked by an application to obtain the canonical hostname for a supplied alias hostname as well as the IP address of the host. Mail server aliasing. For obvious reasons, it is highly desirable that e-mail addresses be mnemonic. For example, if Bob has an account with Yahoo Mail, Bobs e-mail address might be as simple as bob@yahoo.mail. However, the hostname of the Yahoo mail server is more complicated and much less mnemonic than simply yahoo.com (for example, the canonical hostname might be something like relay1.west-coast.yahoo.com). DNS can be invoked by a mail application to obtain the canonical hostname for a supplied alias hostname as well as the IP address of the host. In fact, the MX record (see below) permits a companys mail server and Web server to have identical (aliased) hostnames; for example, a companys Web server and mail server can both be called enterprise.com"
"Justify with an example how any ISP (except for tier-1 ISPs) may choose to multi-home, that is, to connect to two or more provider ISPs","Any ISP (except for tier-1 ISPs) may choose to multi-home, that is, to connect to two or more provider ISPs So, .for example, an access ISP may multi-home with two regional ISPs, or it may multihome with two regional ISPs and also with a tier-1 ISP","Returning to this network of networks, not only are there multiple competing tier-1 ISPs, there may be multiple competing regional ISPs in a region. In such a hierarchy, each access ISP pays the regional ISP to which it connects, and each regional ISP pays the tier-1 ISP to which it connects. (An access ISP can also connect directly to a tier-1 ISP, in which case it pays the tier-1 ISP). Thus, there is customerprovider relationship at each level of the hierarchy. Note that the tier-1 ISPs do not pay anyone as they are at the top of the hierarchy. To further complicate matters, in some regions, there may be a larger regional ISP (possibly spanning an entire country) to which the smaller regional ISPs in that region connect; the larger regional ISP then connects to a tier-1 ISP. For example, in China, there are access ISPs in each city, which connect to provincial ISPs, which in turn connect to national ISPs, which finally connect to tier-1 ISPs [Tian 2012]. We refer to this multi-tier hierarchy, which is still only a crude approximation of todays Internet, as Network Structure 3. To build a network that more closely resembles todays Internet, we must add points of presence (PoPs), multi-homing, peering, and Internet exchange points (IXPs) to the hierarchical Network Structure 3. PoPs exist in all levels of the hierarchy, except for the bottom (access ISP) level. A PoP is simply a group of one or more routers (at the same location) in the providers network where customer ISPs can connect into the provider ISP. For a customer network to connect to a providers PoP, it can lease a high-speed link from a third-party telecommunications provider to directly connect one of its routers to a router at the PoP. Any ISP (except for tier-1 ISPs) may choose to multi-home, that is, to connect to two or more provider ISPs. So, for example, an access ISP may multi-home with two regional ISPs, or it may multihome with two regional ISPs and also with a tier-1 ISP. Similarly, a regional ISP may multi-home with multiple tier-1 ISPs. When an ISP multi-homes, it can continue to send and receive packets into the Internet even if one of its providers has a failure. As we just learned, customer ISPs pay their provider ISPs to obtain global Internet interconnectivity. The amount that a customer ISP pays a provider ISP reflects the amount of traffic it exchanges with the provider. To reduce these costs, a pair of nearby ISPs at the same level of the hierarchy can peer, that is, they can directly connect their networks together so that all the traffic between them passes over the direct connection rather than through upstream intermediaries. When two ISPs peer, it is typically settlement-free, that is, neither ISP pays the other. As noted earlier, tier-1 ISPs also peer with one another, settlement-free. For a readable discussion of peering and customer-provider relationships, see [Van der Berg 2008]. Along these same lines, a third-party company can create an Internet Exchange Point (IXP), which is a meeting point where multiple ISPs can peer together. An IXP is typically in a stand-alone building with its own switches [Ager 2012]. There are over 400 IXPs in the Internet today [IXP List 2016]. We refer to this ecosystemconsisting of access ISPs, regional ISPs, tier-1 ISPs, PoPs, multi-homing, peering, and IXPsas Network Structure 4"
Justify with an example how p3 Consider an application that transmits data at a steady rate,"P3 Consider an application that transmits data at a steady rate (.for example, the sender generates an N-bit unit of data every k time units, where k is small and fixed)","P2. Equation 1.1 gives a formula for the end-to-end delay of sending one packet of length L over N links of transmission rate R. Generalize this formula for sending P such packets back-to-back over the N links. P3. Consider an application that transmits data at a steady rate (for example, the sender generates an N-bit unit of data every k time units, where k is small and fixed). Also, when such an application starts, it will continue running for a relatively long period of time. Answer the following questions, briefly justifying your answer: a. Would a packet-switched network or a circuit-switched network be more appropriate for this application? Why? b. Suppose that a packet-switched network is used and the only traffic in this network comes from such applications as described above. Furthermore, assume that the sum of the application data rates is less than the capacities of each and every link. Is some form of congestion control needed? Why? P4. Consider the circuit-switched network in Figure 1.13. Recall that there are 4 circuits on each link. Label the four switches A, B, C, and D, going in the clockwise direction. a. What is the maximum number of simultaneous connections that can be in progress at any one time in this network? b. Suppose that all connections are between switches A and C. What is the maximum number of simultaneous connections that can be in progress? c. Suppose we want to make four connections between switches A and C, and another four connections between switches B and D. Can we route these calls through the four links to accommodate all eight connections? P5. Review the car-caravan analogy in Section 1.4. Assume a propagation speed of 100 km/hour"
"Justify with an example how the idea behind DNS caching is very simple In a query chain, when a DNS server receives a DNS reply (containing,","The idea behind DNS caching is very simple In a query chain, when a DNS server receives a DNS reply (containing, .for example, a mapping from a hostname to an IP address), it can cache the mapping in its local memory","Our previous example assumed that the TLD server knows the authoritative DNS server for the hostname. In general this not always true. Instead, the TLD server Root DNS server 3 5 Local DNS server dns.nyu.edu 6 Authoritative DNS server dns.umass.edu Requesting host cse.nyu.edu gaia.cs.umass.edu may know only of an intermediate DNS server, which in turn knows the authoritative DNS server for the hostname. For example, suppose again that the University of Massachusetts has a DNS server for the university, called dns.umass.edu. Also suppose that each of the departments at the University of Massachusetts has its own DNS server, and that each departmental DNS server is authoritative for all hosts in the department. In this case, when the intermediate DNS server, dns.umass.edu, receives a query for a host with a hostname ending with cs.umass.edu, it returns to dns.nyu.edu the IP address of dns.cs.umass.edu, which is authoritative for all hostnames ending with cs.umass.edu. The local DNS server dns.nyu .edu then sends the query to the authoritative DNS server, which returns the desired mapping to the local DNS server, which in turn returns the mapping to the requesting host. In this case, a total of 10 DNS messages are sent! The example shown in Figure 2.19 makes use of both recursive queries and iterative queries. The query sent from cse.nyu.edu to dns.nyu.edu is a recursive query, since the query asks dns.nyu.edu to obtain the mapping on its behalf. But the subsequent three queries are iterative since all of the replies are directly returned to dns.nyu.edu. In theory, any DNS query can be iterative or recursive. For example, Figure 2.20 shows a DNS query chain for which all of the queries are recursive. In practice, the queries typically follow the pattern in and the remaining queries are iterative. DNS Caching Our discussion thus far has ignored DNS caching, a critically important feature of the DNS system. In truth, DNS extensively exploits DNS caching in order to improve the delay performance and to reduce the number of DNS messages Root DNS server 6 Local DNS server dns.nyu.edu TLD DNS server 1 8 Requesting host cse.nyu.edu Authoritative DNS server dns.umass.edu Recursive queries in DNS ricocheting around the Internet. The idea behind DNS caching is very simple. In a query chain, when a DNS server receives a DNS reply (containing, for example, a mapping from a hostname to an IP address), it can cache the mapping in its local memory. For example, in Figure 2.19, each time the local DNS server dns.nyu.edu receives a reply from some DNS server, it can cache any of the information contained in the reply. If a hostname/IP address pair is cached in a DNS server and another query arrives to the DNS server for the same hostname, the DNS server can provide the desired IP address, even if it is not authoritative for the hostname. Because hosts and mappings between hostnames and IP addresses are by no means permanent, DNS servers discard cached information after a period of time (often set to two days)"
"Justify with an example how furthermore, most local DNS servers cache the IP addresses of top-level-domain servers, allowing the query process to often bypass the DNS root servers A potentially more effective DDoS attack against DNS would be send a deluge of DNS queries to top-level-domain servers,","Furthermore, most local DNS servers cache the IP addresses of top-level-domain servers, allowing the query process to often bypass the DNS root servers A potentially more effective DDoS attack against DNS would be send a deluge of DNS queries to top-level-domain servers, .for example, to all the top-level-domain servers that handle the .com domain","When you register the domain name networkutopia.com with some registrar, you also need to provide the registrar with the names and IP addresses of your primary and secondary authoritative DNS servers. Suppose the names and IP addresses are dns1.networkutopia.com, dns2.networkutopia.com, 212.2.212.1, and 212.212.212.2. For each of these two authoritative DNS servers, the registrar would then make sure that a Type NS and a Type A record are entered into the TLD com servers. Specifically, for the primary authoritative server for networkutopia.com, the registrar would insert the following two resource records into the DNS system: (networkutopia.com, dns1.networkutopia.com, NS) (dns1.networkutopia.com, 212.212.212.1, A) Youll also have to make sure that the Type A resource record for your Web server www.networkutopia.com and the Type MX resource record for your mail server mail.networkutopia.com are entered into your authoritative DNS FOCUS ON SECURITY D N S VULNERABILIT IES We have seen that DNS is a critical component of the Internet infrastructure, with many important servicesincluding the Web and e-mailsimply incapable of functioning without it. We therefore naturally ask, how can DNS be attacked? Is DNS a sitting duck, waiting to be knocked out of service, while taking most Internet applications down with it? The first type of attack that comes to mind is a DDoS bandwidth-flooding attack (see Section 1.6) against DNS servers. For example, an attacker could attempt to send to each DNS root server a deluge of packets, so many that the majority of legitimate DNS queries never get answered. Such a large-scale DDoS attack against DNS root servers actually took place on October 21, 2002. In this attack, the attackers leveraged a botnet to send truck loads of ICMP ping messages to each of the 13 DNS root IP addresses. (ICMP messages are discussed in Section 5.6. For now, it suffices to know that ICMP packets are special types of IP datagrams.) Fortunately, this large-scale attack caused minimal damage, having little or no impact on users Internet experience. The attackers did succeed at directing a deluge of packets at the root servers. But many of the DNS root servers were protected by packet filters, configured to always block all ICMP ping messages directed at the root servers. These protected servers were thus spared and functioned as normal. Furthermore, most local DNS servers cache the IP addresses of top-level-domain servers, allowing the query process to often bypass the DNS root servers. A potentially more effective DDoS attack against DNS would be send a deluge of DNS queries to top-level-domain servers, for example, to all the top-level-domain servers that handle the .com domain. It would be harder to filter DNS queries directed to DNS servers; and top-level-domain servers are not as easily bypassed as are root servers. But the severity of such an attack would be partially mitigated by caching in local DNS servers. DNS could potentially be attacked in other ways. In a man-in-the-middle attack, the attacker intercepts queries from hosts and returns bogus replies. In the DNS poisoning attack, the attacker sends bogus replies to a DNS server, tricking the server into accepting bogus records into its cache. Either of these attacks could be used, for example, to redirect an unsuspecting Web user to the attackers Web site. These attacks, however, are difficult to implement, as they require intercepting packets or throttling servers [Skoudis 2006]"
"Justify with an example how3 Content Distribution Networks Today, many Internet video companies are distributing on-demand multi-Mbps streams to millions of users on a daily basis YouTube,","3 Content Distribution Networks Today, many Internet video companies are distributing on-demand multi-Mbps streams to millions of users on a daily basis YouTube, .for example, with a library of hundreds of millions of videos, distributes hundreds of millions of video streams to users around the world every day","DASH therefore allows the client to freely switch among different quality levels. 2.6.3 Content Distribution Networks Today, many Internet video companies are distributing on-demand multi-Mbps streams to millions of users on a daily basis. YouTube, for example, with a library of hundreds of millions of videos, distributes hundreds of millions of video streams to users around the world every day. Streaming all this traffic to locations all over the world while providing continuous playout and high interactivity is clearly a challenging task. For an Internet video company, perhaps the most straightforward approach to providing streaming video service is to build a single massive data center, store all of its videos in the data center, and stream the videos directly from the data center to clients worldwide. But there are three major problems with this approach. First, if the client is far from the data center, server-to-client packets will cross many communication links and likely pass through many ISPs, with some of the ISPs possibly located on different continents. If one of these links provides a throughput that is less than the video consumption rate, the end-to-end throughput will also be below the consumption rate, resulting in annoying freezing delays for the user. (Recall from at the bottleneck link.) The likelihood of this happening increases as the number of links in the end-to-end path increases. A second drawback is that a popular video will likely be sent many times over the same communication links. Not only does this waste network bandwidth, but the Internet video company itself will be paying its provider ISP (connected to the data center) for sending the same bytes into the Internet over and over again. A third problem with this solution is that a single data center represents a single point of failureif the data center or its links to the Internet goes down, it would not be able to distribute any video streams"
"Justify with an example how before discussing the UDP segment structure, we mention that it is possible for an application to have reliable data transfer when using UDP","Before discussing the UDP segment structure, we mention that it is possible for an application to have reliable data transfer when using UDP This can be done if reliability is built into the application itself (.for example, by adding acknowledgment and retransmission mechanisms, such as those well study in the next section)","Many researchers have proposed new mechanisms to force all sources, including UDP sources, to perform adaptive congestion control [Mahdavi 1997; Floyd 2000; Kohler 2006: RFC 4340]. Before discussing the UDP segment structure, we mention that it is possible for an application to have reliable data transfer when using UDP. This can be done if reliability is built into the application itself (for example, by adding acknowledgment and retransmission mechanisms, such as those well study in the next section). We mentioned earlier that the QUIC protocol [Iyengar 2015] used in Googles Chrome browser implements reliability in an application-layer protocol on top of UDP. But this is a nontrivial task that would keep an application developer busy debugging for a long time. Nevertheless, building reliability directly into the application allows the application to have its cake and eat it too. That is, application processes can communicate reliably without being subjected to the transmission-rate constraints imposed by TCPs congestion-control mechanism. 3.3.1 UDP Segment Structure The UDP segment structure, shown in Figure 3.7, is defined in RFC 768. The application data occupies the data field of the UDP segment. For example, for DNS, the data field contains either a query message or a response message. For a streaming audio application, audio samples fill the data field. The UDP header has only four fields, each consisting of two bytes. As discussed in the previous section, the port numbers allow the destination host to pass the application data to the correct process running on the destination end system (that is, to perform the demultiplexing function)"
Justify with an example how The lack of synchronization between sender and receiver windows has important consequences when we are faced with the reality of a finite range of sequence numbers,"The lack of synchronization between sender and receiver windows has important consequences when we are faced with the reality of a finite range of sequence numbers Consider what could happen, .for example, with a finite range of four packet sequence numbers, 0, 1, 2, 3, and a window size of three","For SR protocols, this means that the sender and receiver windows will not always coincide. The lack of synchronization between sender and receiver windows has important consequences when we are faced with the reality of a finite range of sequence numbers. Consider what could happen, for example, with a finite range of four packet sequence numbers, 0, 1, 2, 3, and a window size of three. Suppose packets 0 through 2 are transmitted and correctly received and acknowledged at the receiver. At this point, the receivers window is over the fourth, fifth, and sixth packets, which have sequence numbers 3, 0, and 1, respectively. Now consider two scenarios. In the first scenario, shown in Figure 3.27(a), the ACKs for the first three packets are lost and the sender retransmits these packets. The receiver thus next receives a packet with sequence number 0a copy of the first packet sent. In the second scenario, shown in Figure 3.27(b), the ACKs for the first three packets are all delivered correctly. The sender thus moves its window forward and sends the fourth, fifth, and sixth packets, with sequence numbers 3, 0, and 1, respectively. The packet with sequence number 3 is lost, but the packet with sequence number 0 arrivesa packet containing new data"
"Justify with an example how when TCP sends a large file, such as an image as part of a Web page, it typically breaks the file into chunks of size MSS (except for the last chunk, which will often be less than the MSS) Interactive applications, however, often transmit data chunks that are smaller than the MSS;","When TCP sends a large file, such as an image as part of a Web page, it typically breaks the file into chunks of size MSS (except for the last chunk, which will often be less than the MSS) Interactive applications, however, often transmit data chunks that are smaller than the MSS; .for example, with remote login applications like Telnet, the data field in the TCP segment is often only one byte","(This terminology is confusing, but we have to live with it, as it is well entrenched.) TCP pairs each chunk of client data with a TCP header, thereby forming TCP segments. The segments are passed down to the network layer, where they are separately encapsulated within network-layer IP datagrams. The IP datagrams are then sent into the network. When TCP receives a segment at the other end, the segments data is placed in the TCP connections receive buffer, as shown in Figure 3.28. The application reads the stream of data from this buffer. Each side of the connection has Process writes data Process reads data Socket TCP send buffer TCP send and receive buffers TCP receive buffer its own send buffer and its own receive buffer. (You can see the online flow-control applet at http://www.awl.com/kurose-ross, which provides an animation of the send and receive buffers.) We see from this discussion that a TCP connection consists of buffers, variables, and a socket connection to a process in one host, and another set of buffers, variables, and a socket connection to a process in another host. As mentioned earlier, no buffers or variables are allocated to the connection in the network elements (routers, switches, and repeaters) between the hosts. 3.5.2 TCP Segment Structure Having taken a brief look at the TCP connection, lets examine the TCP segment structure. The TCP segment consists of header fields and a data field. The data field contains a chunk of application data. As mentioned above, the MSS limits the maximum size of a segments data field. When TCP sends a large file, such as an image as part of a Web page, it typically breaks the file into chunks of size MSS (except for the last chunk, which will often be less than the MSS). Interactive applications, however, often transmit data chunks that are smaller than the MSS; for example, with remote login applications like Telnet, the data field in the TCP segment is often only one byte. Because the TCP header is typically 20 bytes (12 bytes more than the UDP header), segments sent by Telnet may be only 21 bytes in length. includes source and destination port numbers, which are used for multiplexing/ demultiplexing data from/to upper-layer applications. Also, as with UDP, the header includes a checksum field. A TCP segment header also contains the following fields: The 32-bit sequence number field and the 32-bit acknowledgment number field are used by the TCP sender and receiver in implementing a reliable data transfer service, as discussed below"
"Justify with an example how for example, the ATM network architecture [MFA Forum 2016, Black 1995] provides for guaranteed in-order delay, bounded delay, and guaranteed minimal bandwidth There have also been proposed service model extensions to the Internet architecture;","For example, the ATM network architecture [MFA Forum 2016, Black 1995] provides for guaranteed in-order delay, bounded delay, and guaranteed minimal bandwidth There have also been proposed service model extensions to the Internet architecture; .for example, the Intserv architecture [RFC 1633] aims to provide end-end delay guarantees and congestion-free communication","This is only a partial list of services that a network layer could providethere are countless variations possible. The Internets network layer provides a single service, known as best-effort service. With best-effort service, packets are neither guaranteed to be received in the order in which they were sent, nor is their eventual delivery even guaranteed. There is no guarantee on the end-to-end delay nor is there a minimal bandwidth guarantee. It might appear that best-effort service is a euphemism for no service at alla network that delivered no packets to the destination would satisfy the definition of best-effort delivery service! Other network architectures have defined and implemented service models that go beyond the Internets best-effort service. For example, the ATM network architecture [MFA Forum 2016, Black 1995] provides for guaranteed in-order delay, bounded delay, and guaranteed minimal bandwidth. There have also been proposed service model extensions to the Internet architecture; for example, the Intserv architecture [RFC 1633] aims to provide end-end delay guarantees and congestion-free communication. Interestingly, in spite of these well-developed alternatives, the Internets basic best-effort service model combined with adequate bandwidth provisioning have arguably proven to be more than good enough to enable an amazing range of applications, including streaming video services such as Netflix and voice-and-video-over-IP, real-time conferencing applications such as Skype and Facetime. An Overview of Chapter 4 Having now provided an overview of the network layer, well cover the data-plane component of the network layer in the following sections in this chapter. In Section 4.2, well dive down into the internal hardware operations of a router, including input and output packet processing, the routers internal switching mechanism, and packet queueing and scheduling. In Section 4.3, well take a look at traditional IP forwarding, in which packets are forwarded to output ports based on their destination IP addresses. Well encounter IP addressing, the celebrated IPv4 and IPv6 protocols and more. In Section 4.4, well cover more generalized forwarding, where packets may be forwarded to output ports based on a large number of header values (i.e., not only based on destination IP address). Packets may be blocked or duplicated at the router, or may have certain header field values rewrittenall under software control. This more generalized form of packet forwarding is a key component of a modern network data plane, including the data plane in software-defined networks (SDN)"
"Justify with an example how address aggregation works extremely well when addresses are allocated in blocks to ISPs and then from ISPs to client organizations But what happens when addresses are not allocated in such a hierarchical manner? What would happen,","Address aggregation works extremely well when addresses are allocated in blocks to ISPs and then from ISPs to client organizations But what happens when addresses are not allocated in such a hierarchical manner? What would happen, .for example, if Fly-By-Night-ISP acquires ISPs-R-Us and then has Organization 1 connect to the Internet through its subsidiary ISPs-R-Us? As shown in Figure 4.21, the subsidiary ISPs-R-Us owns the address block 199.31.0.0/16, but Organization 1s IP addresses are unfortunately outside of this address block","PRINCIPLES IN PRACTICE This example of an ISP that connects eight organizations to the Internet nicely illustrates how carefully allocated CIDRized addresses facilitate routing. Suppose, as shown in Figure 4.21, that the ISP (which well call Fly-By-Night-ISP) advertises to the outside world that it should be sent any datagrams whose first 20 address bits match 200.23.16.0/20. The rest of the world need not know that within the address block 200.23.16.0/20 there are in fact eight other organizations, each with its own subnets. This ability to use a single prefix to advertise multiple networks is often referred to as address aggregation (also route aggregation or route summarization). Address aggregation works extremely well when addresses are allocated in blocks to ISPs and then from ISPs to client organizations. But what happens when addresses are not allocated in such a hierarchical manner? What would happen, for example, if Fly-By-Night-ISP acquires ISPs-R-Us and then has Organization 1 connect to the Internet through its subsidiary ISPs-R-Us? As shown in Figure 4.21, the subsidiary ISPs-R-Us owns the address block 199.31.0.0/16, but Organization 1s IP addresses are unfortunately outside of this address block. What should be done here? Certainly, Organization 1 could renumber all of its routers and hosts to have addresses within the ISPs-R-Us address block. But this is a costly solution, and Organization 1 might well be reassigned to another subsidiary in the future. The solution typically adopted is for Organization 1 to keep its IP addresses in 200.23.18.0/23. In this case, as shown in Figure 4.22, Fly-By-Night-ISP continues to advertise the address block 200.23.16.0/20 and ISPs-R-Us continues to advertise 199.31.0.0/16. However, ISPs-R-Us now also advertises the block of addresses for Organization 1, 200.23.18.0/23. When other routers in the larger Internet see the address blocks 200.23.16.0/20 (from Fly-By-Night-ISP) and 200.23.18.0/23 (from ISPsR-Us) and want to route to an address in the block 200.23.18.0/23, they will use longest prefix matching (see Section 4.2.1), and route toward ISPs-R-Us, as it advertises the longest (i.e., most-specific) address prefix that matches the destination address"
Justify with an example how an internal router connects only to hosts and routers within its own AS,"An internal router connects only to hosts and routers within its own AS In AS1, .for example, router 1c is a gateway router; routers 1a, 1b, and 1d are internal routers","Let us now delve into how BGP carries out these two tasks. 5.4.2 Advertising BGP Route Information Consider the network shown in Figure 5.8. As we can see, this simple network has three autonomous systems: AS1, AS2, and AS3. As shown, AS3 includes a subnet with prefix x. For each AS, each router is either a gateway router or an internal router. A gateway router is a router on the edge of an AS that directly connects to one or more routers in other ASs. An internal router connects only to hosts and routers within its own AS. In AS1, for example, router 1c is a gateway router; routers 1a, 1b, and 1d are internal routers. Lets consider the task of advertising reachability information for prefix x to all of the routers shown in Figure 5.8. At a high level, this is straightforward. First, AS3 sends a BGP message to AS2, saying that x exists and is in AS3; lets denote this message as AS3 x. Then AS2 sends a BGP message to AS1, saying that x exists and that you can get to x by first passing through AS2 and then going to AS3; lets denote that message as AS2 AS3 x. In this manner, each of the autonomous systems will not only learn about the existence of x, but also learn about a path of autonomous systems that leads to x"
Justify with an example how the first drawback is that the protocol introduces a polling delaythe amount of time required to notify a node that it can transmit,"The first drawback is that the protocol introduces a polling delaythe amount of time required to notify a node that it can transmit If, .for example, only one node is active, then the node will transmit at a rate less than R bps, as the master node must poll each of the inactive nodes in turn each time the active node has sent its maximum number of frames","6.3.3 Taking-Turns Protocols Recall that two desirable properties of a multiple access protocol are (1) when only one node is active, the active node has a throughput of R bps, and (2) when M nodes are active, then each active node has a throughput of nearly R/M bps. The ALOHA and CSMA protocols have this first property but not the second. This has motivated researchers to create another class of protocolsthe taking-turns protocols. As with random access protocols, there are dozens of taking-turns protocols, and each one of these protocols has many variations. Well discuss two of the more important protocols here. The first one is the polling protocol. The polling protocol requires one of the nodes to be designated as a master node. The master node polls each of the nodes in a round-robin fashion. In particular, the master node first sends a message to node 1, saying that it (node 1) can transmit up to some maximum number of frames. After node 1 transmits some frames, the master node tells node 2 it (node 2) can transmit up to the maximum number of frames. (The master node can determine when a node has finished sending its frames by observing the lack of a signal on the channel.) The procedure continues in this manner, with the master node polling each of the nodes in a cyclic manner. The polling protocol eliminates the collisions and empty slots that plague random access protocols. This allows polling to achieve a much higher efficiency. But it also has a few drawbacks. The first drawback is that the protocol introduces a polling delaythe amount of time required to notify a node that it can transmit. If, for example, only one node is active, then the node will transmit at a rate less than R bps, as the master node must poll each of the inactive nodes in turn each time the active node has sent its maximum number of frames. The second drawback, which is potentially more serious, is that if the master node fails, the entire channel becomes inoperative. The 802.15 protocol and the Bluetooth protocol we will study in Section 6.3 are examples of polling protocols. The second taking-turns protocol is the token-passing protocol. In this protocol there is no master node. A small, special-purpose frame known as a token is exchanged among the nodes in some fixed order. For example, node 1 might always send the token to node 2, node 2 might always send the token to node 3, and node N might always send the token to node 1. When a node receives a token, it holds onto the token only if it has some frames to transmit; otherwise, it immediately forwards the token to the next node. If a node does have frames to transmit when it receives the token, it sends up to a maximum number of frames and then forwards the token to the next node. Token passing is decentralized and highly efficient. But it has its problems as well. For example, the failure of one node can crash the entire channel. Or if a node accidentally neglects to release the token, then some recovery procedure must be invoked to get the token back in circulation. Over the years many token-passing protocols have been developed, including the fiber distributed data interface (FDDI) protocol [Jain 1994] and the IEEE 802.5 token ring protocol [IEEE 802.5 2012], and each one had to address these as well as other sticky issues"
Justify with an example how but how can a CDMA receiver recover a senders original data bits when those data bits are being tangled with bits being transmitted by other senders? CDMA works under the assumption that the interfering transmitted bit signals are additive,"But how can a CDMA receiver recover a senders original data bits when those data bits are being tangled with bits being transmitted by other senders? CDMA works under the assumption that the interfering transmitted bit signals are additive This means, .for example, that if three senders send a 1 value, and a fourth sender sends a -1 value during the same mini-slot, then the received signal at all receivers during that mini-slot is a 2 (since 1 + 1 + 1 - 1 = 2)","To illustrate how CDMA works, let us focus on the ith data bit, di. For the mth mini-slot of the bit-transmission time of di, the output of the CDMA encoder, Zi,m, is the value of di multiplied by the mth bit in the assigned CDMA code, cm: Zi,m = di # cm CHAPTER 7 WIRELESS AND MOBILE NETWORKS In a simple world, with no interfering senders, the receiver would receive the encoded bits, Zi,m, and recover the original data bit, di, by computing: di = 1 M Zi,m # cm M ma The reader might want to work through the details of the example in Figure 7.5 to see that the original data bits are indeed correctly recovered at the receiver using Equation 7.2. The world is far from ideal, however, and as noted above, CDMA must work in the presence of interfering senders that are encoding and transmitting their data using a different assigned code. But how can a CDMA receiver recover a senders original data bits when those data bits are being tangled with bits being transmitted by other senders? CDMA works under the assumption that the interfering transmitted bit signals are additive. This means, for example, that if three senders send a 1 value, and a fourth sender sends a -1 value during the same mini-slot, then the received signal at all receivers during that mini-slot is a 2 (since 1 + 1 + 1 - 1 = 2). In the presence of multiple senders, sender s computes its encoded transmissions, Z si,m, in exactly the same manner as in Equation 7.1. The value received at a receiver during the mth mini-slot of the ith bit slot, however, is now the sum of the transmitted bits from all N senders during that mini-slot: N s Z *i, m = a Z i,m s=1 Amazingly, if the senders codes are chosen carefully, each receiver can recover the data sent by a given sender out of the aggregate signal simply by using the senders code in exactly the same manner as in Equation 7.2: di = 1 M * # Z i,m cm M ma as shown in Figure 7.6, for a two-sender CDMA example. The M-bit CDMA code being used by the upper sender is (1, 1, 1, -1, 1, -1, -1, -1), while the CDMA code being used by the lower sender is (1, -1, 1, 1, 1, -1, 1, 1). Figure 7.6 illustrates a receiver recovering the original data bits from the upper sender. Note that the receiver is able to extract the data from sender 1 in spite of the interfering transmission from sender 2. Recall our cocktail analogy from Chapter 6. A CDMA protocol is similar to having partygoers speaking in multiple languages; in such circumstances humans are actually quite good at locking into the conversation in the language they understand, while filtering out the remaining conversations. We see here that CDMA is a partitioning protocol in that it partitions the codespace (as opposed to time or frequency) and assigns each node a dedicated piece of the codespace"
Justify with an example how3 that different modulation techniques with the different transmission rates that they provide) are appropriate for different SNR scenarios Consider,"3 that different modulation techniques (with the different transmission rates that they provide) are appropriate for different SNR scenarios Consider .for example a mobile 802.11 user who is initially 20 meters away from the base station, with a high signal-to-noise ratio","802.11 Rate Adaptation We saw earlier in Figure 7.3 that different modulation techniques (with the different transmission rates that they provide) are appropriate for different SNR scenarios. Consider for example a mobile 802.11 user who is initially 20 meters away from the base station, with a high signal-to-noise ratio. Given the high SNR, the user can communicate with the base station using a physical-layer modulation technique that provides high transmission rates while maintaining a low BER. This is one happy user! Suppose now that the user becomes mobile, walking away from the base station, with the SNR falling as the distance from the base station increases. In this case, if the modulation technique used in the 802.11 protocol operating between the base station and the user does not change, the BER will become unacceptably high as the SNR decreases, and eventually no transmitted frames will be received correctly. For this reason, some 802.11 implementations have a rate adaptation capability that adaptively selects the underlying physical-layer modulation technique to use based on current or recent channel characteristics. If a node sends two frames in a row without receiving an acknowledgment (an implicit indication of bit errors on the channel), the transmission rate falls back to the next lower rate. If 10 frames in a row are acknowledged, or if a timer that tracks the time since the last fallback expires, the transmission rate increases to the next higher rate. This rate adaptation mechanism shares the same probing philosophy as TCPs congestion-control mechanismwhen conditions are good (reflected by ACK receipts), the transmission rate is increased until something bad happens (the lack of ACK receipts); when something bad happens, the transmission rate is reduced. 802.11 rate adaptation and TCP congestion control are thus similar to the young child who is constantly pushing his/her parents for more and more (say candy for a young child, later curfew hours for the teenager) until the parents finally say Enough! and the child backs off (only to try again later after conditions have hopefully improved!). A number of other schemes have also been proposed to improve on this basic automatic rateadjustment scheme [Kamerman 1997; Holland 2001; Lacage 2004]"
"Justify with an example how an anomaly-based IDS creates a traffic profile as it observes traffic in normal operation It then looks for packet streams that are statistically unusual,","An anomaly-based IDS creates a traffic profile as it observes traffic in normal operation It then looks for packet streams that are statistically unusual, .for example, an inordinate percentage of ICMP packets or a sudden exponential growth in port scans and ping sweeps","Signature-based IDS systems, although widely deployed, have a number of limitations. Most importantly, they require previous knowledge of the attack to generate an accurate signature. In other words, a signature-based IDS is completely blind to new attacks that have yet to be recorded. Another disadvantage is that even if a signature is matched, it may not be the result of an attack, so that a false alarm is generated. Finally, because every packet must be compared with an extensive collection of signatures, the IDS can become overwhelmed with processing and actually fail to detect many malicious packets. An anomaly-based IDS creates a traffic profile as it observes traffic in normal operation. It then looks for packet streams that are statistically unusual, for example, an inordinate percentage of ICMP packets or a sudden exponential growth in port scans and ping sweeps. The great thing about anomaly-based IDS systems is that they dont rely on previous knowledge about existing attacksthat is, they can potentially detect new, undocumented attacks. On the other hand, it is an extremely challenging problem to distinguish between normal traffic and statistically unusual traffic. To date, most IDS deployments are primarily signature-based, although some include some anomaly-based features. Snort Snort is a public-domain, open source IDS with hundreds of thousands of existing deployments [Snort 2012; Koziol 2003]. It can run on Linux, UNIX, and Windows platforms. It uses the generic sniffing interface libpcap, which is also used by Wireshark and many other packet sniffers. It can easily handle 100 Mbps of traffic; for installations with gibabit/sec traffic rates, multiple Snort sensors may be needed"
Justify with an example how5 Suppose that each block cipher Ti simply reverses the order of the eight input bits,"5 Suppose that each block cipher Ti simply reverses the order of the eight input bits (so that, .for example, 11110000 becomes 00001111)","P2. Show that Trudys known-plaintext attack, in which she knows the (ciphertext, plaintext) translation pairs for seven letters, reduces the number of possible substitutions to be checked in the example in Section 8.2.1 by approximately 109. P3. Consider the polyalphabetic system shown in Figure 8.4. Will a chosenplaintext attack that is able to get the plaintext encoding of the message The quick brown fox jumps over the lazy dog. be sufficient to decode all messages? Why or why not? P4. Consider the block cipher in Figure 8.5. Suppose that each block cipher Ti simply reverses the order of the eight input bits (so that, for example, 11110000 becomes 00001111). Further suppose that the 64-bit scrambler does not modify any bits (so that the output value of the mth bit is equal to the input value of the mth bit). (a) With n = 3 and the original 64-bit input equal to 10100000 repeated eight times, what is the value of the output? (b) Repeat part (a) but now change the last bit of the original 64-bit input from a 0 to a 1. (c) Repeat parts (a) and (b) but now suppose that the 64-bit scrambler inverses the order of the 64 bits. P5. Consider the block cipher in Figure 8.5. Suppose, for a given key, Alice and Bob would need to keep 16 tables, each 16 bits by 8 bits. For Alice (or Bob) to store all 16 tables, how many bits of storage are necessary? How does this number compare with the number of bits required for a full-table 128-bit block cipher? P6. Consider the 3-bit block cipher in Table 8.1. Suppose the plaintext is 100100100. (a) Initially assume that CBC is not used. What is the resulting ciphertext? (b) Suppose Trudy sniffs the ciphertext. Assuming she knows that a 3-bit block cipher without CBC is being employed (but doesnt know the specific cipher), what can she surmise? (c) Now suppose that CBC is used with IV = 111. What is the resulting ciphertext? P7. a. Using RSA, choose p = 5 and q = 7, and encode the numbers 12, 19, and 27 separately. Apply the decryption algorithm to the encrypted version to recover the original plaintext message"
Justify with an example how temporal redundancy reflects repetition from image to subsequent image,"Temporal redundancy reflects repetition from image to subsequent image If, .for example, an image and the subsequent image are exactly the same, there is no reason to re-encode the subsequent image; it is instead more efficient simply to indicate during encoding that the subsequent image is exactly the same","Another important characteristic of video is that it can be compressed, thereby trading off video quality with bit rate. A video is a sequence of images, typically being displayed at a constant rate, for example, at 24 or 30 images per second. An uncompressed, digitally encoded image consists of an array of pixels, with each pixel encoded into a number of bits to represent luminance and color. There are two types of redundancy in video, both of which can be exploited by video compression. Spatial redundancy is the redundancy within a given image. Intuitively, an image that consists of mostly white space has a high degree of redundancy and can be efficiently compressed without significantly sacrificing image quality. Temporal redundancy reflects repetition from image to subsequent image. If, for example, an image and the subsequent image are exactly the same, there is no reason to re-encode the subsequent image; it is instead more efficient simply to indicate during encoding that the subsequent image is exactly the same. Todays off-the-shelf compression algorithms can compress a video to essentially any bit rate desired. Of course, the higher the bit rate, the better the image quality and the better the overall user viewing experience. We can also use compression to create multiple versions of the same video, each at a different quality level. For example, we can use compression to create, say, three versions of the same video, at rates of 300 kbps, 1 Mbps, and 3 Mbps"
"Justify with an example how in other situations, we may use just one of the APIs to demonstrate a concept","In other situations, we may use just one of the APIs to demonstrate a concept .For example, we illustrate shared memory using just the POSIX API; socket programming in TCP/IP is highlighted using the Java API. Linux Virtual Machine To help students gain a better understanding of the Linux system, we provide a Linux virtual machine, including the Linux source code, that is available for download from the the website supporting this text (http://www.os-book.com)","In some instancessuch as thread creationwe illustrate a specic concept using all three programming environments, allowing the reader to contrast the three different libraries as they address the same task. In other situations, we may use just one of the APIs to demonstrate a concept. For example, we illustrate shared memory using just the POSIX API; socket programming in TCP/IP is highlighted using the Java API. Linux Virtual Machine To help students gain a better understanding of the Linux system, we provide a Linux virtual machine, including the Linux source code, that is available for download from the the website supporting this text (http://www.os-book.com). This virtual machine also includes a gcc development environment with compilers and editors. Most of the programming assignments in the book can be completed on this virtual machine, with the exception of assignments that require Java or the Windows API"
Justify with an example how eEPROM can be changed but cannot be changed frequently and so contains mostly static programs,"EEPROM can be changed but cannot be changed frequently and so contains mostly static programs .For example, smartphones have EEPROM to store their factory-installed programs. All forms of memory provide an array of bytes","The CPU can load instructions only from memory, so any programs to run must be stored there. General-purpose computers run most of their programs from rewritable memory, called main memory (also called random-access memory, or RAM). Main memory commonly is implemented in a semiconductor technology called dynamic random-access memory (DRAM). Computers use other forms of memory as well. We have already mentioned read-only memory, ROM) and electrically erasable programmable read-only memory, EEPROM). Because ROM cannot be changed, only static programs, such as the bootstrap program described earlier, are stored there. The immutability of ROM is of use in game cartridges. EEPROM can be changed but cannot be changed frequently and so contains mostly static programs. For example, smartphones have EEPROM to store their factory-installed programs. All forms of memory provide an array of bytes. Each byte has its own address. Interaction is achieved through a sequence of load or store instructions to specic memory addresses. The load instruction moves a byte or word from main memory to an internal register within the CPU, whereas the store instruction moves the content of a register to main memory. Aside from explicit loads and stores, the CPU automatically loads instructions from main memory for execution"